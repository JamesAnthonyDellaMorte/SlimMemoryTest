
STM32CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e14  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080110ac  080110ac  000210ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110d4  080110d4  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  080110d4  080110d4  000210d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110dc  080110dc  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110dc  080110dc  000210dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110e0  080110e0  000210e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080110e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  08011158  00030074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  080111b8  000300d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000860  24000134  08011218  00030134  2**2
                  ALLOC
 12 ._user_heap_stack 00002904  24000994  08011218  00030994  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003de5a  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000549d  00000000  00000000  0006dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002538  00000000  00000000  00073460  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002348  00000000  00000000  00075998  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003f53c  00000000  00000000  00077ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00022a10  00000000  00000000  000b721c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001929de  00000000  00000000  000d9c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0026c60a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a3e8  00000000  00000000  0026c688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000134 	.word	0x24000134
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08011094 	.word	0x08011094

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000138 	.word	0x24000138
 80002d4:	08011094 	.word	0x08011094

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005e0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <SCB_EnableICache+0x3c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <SCB_EnableICache+0x3c>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <SCB_EnableICache+0x3c>)
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000604:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000620:	2200      	movs	r2, #0
 8000622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000626:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <SCB_EnableDCache+0x7c>)
 800062c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000630:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	0b5b      	lsrs	r3, r3, #13
 8000636:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800063a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000644:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	015a      	lsls	r2, r3, #5
 800064a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800064e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	490f      	ldr	r1, [pc, #60]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000656:	4313      	orrs	r3, r2
 8000658:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1e5      	bne.n	800063c <SCB_EnableDCache+0x24>
 8000670:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <SCB_EnableDCache+0x7c>)
 800067a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067e:	6153      	str	r3, [r2, #20]
 8000680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000684:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09a      	sub	sp, #104	; 0x68
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800069e:	f7ff ff9b 	bl	80005d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006a2:	f7ff ffb9 	bl	8000618 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f002 f9b1 	bl	8002a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f87b 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 fe5b 	bl	8001368 <MX_GPIO_Init>
  MX_BDMA_Init();
 80006b2:	f000 fdb1 	bl	8001218 <MX_BDMA_Init>
  MX_DMA_Init();
 80006b6:	f000 fdcf 	bl	8001258 <MX_DMA_Init>
  MX_SPI1_Init();
 80006ba:	f000 fd0b 	bl	80010d4 <MX_SPI1_Init>
  MX_ADC2_Init();
 80006be:	f000 fa3d 	bl	8000b3c <MX_ADC2_Init>
  MX_SAI1_Init();
 80006c2:	f000 fc41 	bl	8000f48 <MX_SAI1_Init>
  MX_ADC3_Init();
 80006c6:	f000 fa9d 	bl	8000c04 <MX_ADC3_Init>
  MX_QUADSPI_Init();
 80006ca:	f000 fc11 	bl	8000ef0 <MX_QUADSPI_Init>
  MX_SAI2_Init();
 80006ce:	f000 fca1 	bl	8001014 <MX_SAI2_Init>
  MX_I2S2_Init();
 80006d2:	f000 fbd9 	bl	8000e88 <MX_I2S2_Init>
  MX_USART6_UART_Init();
 80006d6:	f000 fd53 	bl	8001180 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80006da:	f000 fb55 	bl	8000d88 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006de:	f000 fb93 	bl	8000e08 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80006e2:	f000 fccf 	bl	8001084 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 80006e6:	f000 f9b1 	bl	8000a4c <MX_ADC1_Init>
  MX_FMC_Init();
 80006ea:	f000 fded 	bl	80012c8 <MX_FMC_Init>
  MX_ETH_Init();
 80006ee:	f000 faf9 	bl	8000ce4 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  srand(100);
 80006f2:	2064      	movs	r0, #100	; 0x64
 80006f4:	f010 fc02 	bl	8010efc <srand>
 int a[20];
  for( int i = 0 ; i <= 20 ; i++ ) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	667b      	str	r3, [r7, #100]	; 0x64
 80006fc:	e016      	b.n	800072c <main+0x94>
        a[i] = rand() % 50;
 80006fe:	f010 fc21 	bl	8010f44 <rand>
 8000702:	4603      	mov	r3, r0
 8000704:	4a25      	ldr	r2, [pc, #148]	; (800079c <main+0x104>)
 8000706:	fb82 1203 	smull	r1, r2, r2, r3
 800070a:	1111      	asrs	r1, r2, #4
 800070c:	17da      	asrs	r2, r3, #31
 800070e:	1a8a      	subs	r2, r1, r2
 8000710:	2132      	movs	r1, #50	; 0x32
 8000712:	fb01 f202 	mul.w	r2, r1, r2
 8000716:	1a9a      	subs	r2, r3, r2
 8000718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000720:	440b      	add	r3, r1
 8000722:	f843 2c60 	str.w	r2, [r3, #-96]
  for( int i = 0 ; i <= 20 ; i++ ) {
 8000726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000728:	3301      	adds	r3, #1
 800072a:	667b      	str	r3, [r7, #100]	; 0x64
 800072c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800072e:	2b14      	cmp	r3, #20
 8000730:	dde5      	ble.n	80006fe <main+0x66>
     }

int volatile * const p_reg = (int *) 0xD0000000;
 8000732:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000736:	65fb      	str	r3, [r7, #92]	; 0x5c
volatile int badcnt = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]

{
	int i;

	int Last = -1;
 800073c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000740:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < 1000000; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	663b      	str	r3, [r7, #96]	; 0x60
 8000746:	e008      	b.n	800075a <main+0xc2>
	{
		p_reg[i] = i;
 8000748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800074e:	4413      	add	r3, r2
 8000750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000752:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 1000000; i++)
 8000754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000756:	3301      	adds	r3, #1
 8000758:	663b      	str	r3, [r7, #96]	; 0x60
 800075a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <main+0x108>)
 800075e:	4293      	cmp	r3, r2
 8000760:	ddf2      	ble.n	8000748 <main+0xb0>
	}
	for (i = 0; i < 1000000; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	663b      	str	r3, [r7, #96]	; 0x60
 8000766:	e013      	b.n	8000790 <main+0xf8>
		{
			if(p_reg[i] != i)
 8000768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800076e:	4413      	add	r3, r2
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000774:	429a      	cmp	r2, r3
 8000776:	d002      	beq.n	800077e <main+0xe6>
			{
				//printf("Bad At %h", i);

				badcnt ++;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
			}
			Last=p_reg[i];
 800077e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000784:	4413      	add	r3, r2
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < 1000000; i++)
 800078a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800078c:	3301      	adds	r3, #1
 800078e:	663b      	str	r3, [r7, #96]	; 0x60
 8000790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000792:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <main+0x108>)
 8000794:	4293      	cmp	r3, r2
 8000796:	dde7      	ble.n	8000768 <main+0xd0>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000798:	e7fe      	b.n	8000798 <main+0x100>
 800079a:	bf00      	nop
 800079c:	51eb851f 	.word	0x51eb851f
 80007a0:	000f423f 	.word	0x000f423f

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0d2      	sub	sp, #328	; 0x148
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007ae:	224c      	movs	r2, #76	; 0x4c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f010 fb9a 	bl	8010eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f010 fb93 	bl	8010eec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	4618      	mov	r0, r3
 80007cc:	23bc      	movs	r3, #188	; 0xbc
 80007ce:	461a      	mov	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f010 fb8b 	bl	8010eec <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	461a      	mov	r2, r3
 80007dc:	2300      	movs	r3, #0
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	6053      	str	r3, [r2, #4]
 80007e2:	6093      	str	r3, [r2, #8]
 80007e4:	60d3      	str	r3, [r2, #12]
 80007e6:	6113      	str	r3, [r2, #16]
 80007e8:	6153      	str	r3, [r2, #20]

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007ea:	2002      	movs	r0, #2
 80007ec:	f007 fc94 	bl	8008118 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	4b91      	ldr	r3, [pc, #580]	; (8000a3c <SystemClock_Config+0x298>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fa:	4a90      	ldr	r2, [pc, #576]	; (8000a3c <SystemClock_Config+0x298>)
 80007fc:	f023 0301 	bic.w	r3, r3, #1
 8000800:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000802:	4b8e      	ldr	r3, [pc, #568]	; (8000a3c <SystemClock_Config+0x298>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	f003 0201 	and.w	r2, r3, #1
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	4b8c      	ldr	r3, [pc, #560]	; (8000a40 <SystemClock_Config+0x29c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a8b      	ldr	r2, [pc, #556]	; (8000a40 <SystemClock_Config+0x29c>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b89      	ldr	r3, [pc, #548]	; (8000a40 <SystemClock_Config+0x29c>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800082a:	bf00      	nop
 800082c:	4b84      	ldr	r3, [pc, #528]	; (8000a40 <SystemClock_Config+0x29c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000838:	d1f8      	bne.n	800082c <SystemClock_Config+0x88>
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800083a:	f007 fc5d 	bl	80080f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800083e:	f002 f95f 	bl	8002b00 <HAL_GetREVID>
 8000842:	4b80      	ldr	r3, [pc, #512]	; (8000a44 <SystemClock_Config+0x2a0>)
 8000844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000846:	4a7f      	ldr	r2, [pc, #508]	; (8000a44 <SystemClock_Config+0x2a0>)
 8000848:	f023 0318 	bic.w	r3, r3, #24
 800084c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800084e:	4b7d      	ldr	r3, [pc, #500]	; (8000a44 <SystemClock_Config+0x2a0>)
 8000850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000852:	f023 0303 	bic.w	r3, r3, #3
 8000856:	4a7b      	ldr	r2, [pc, #492]	; (8000a44 <SystemClock_Config+0x2a0>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800085e:	2307      	movs	r3, #7
 8000860:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000868:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000872:	2301      	movs	r3, #1
 8000874:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000884:	2302      	movs	r3, #2
 8000886:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLM = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  RCC_OscInitStruct.PLL.PLLP = 10;
 8000896:	230a      	movs	r3, #10
 8000898:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008a8:	230c      	movs	r3, #12
 80008aa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fd32 	bl	8008328 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80008ca:	f000 fe99 	bl	8001600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	233f      	movs	r3, #63	; 0x3f
 80008d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2303      	movs	r3, #3
 80008d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008fa:	2340      	movs	r3, #64	; 0x40
 80008fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000900:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f008 f8e6 	bl	8008ad8 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x172>
  {
    Error_Handler();
 8000912:	f000 fe75 	bl	8001600 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SPI1
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	4a4b      	ldr	r2, [pc, #300]	; (8000a48 <SystemClock_Config+0x2a4>)
 800091c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_QSPI
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2202      	movs	r2, #2
 8000924:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	220c      	movs	r2, #12
 800092c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2201      	movs	r2, #1
 8000934:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2204      	movs	r2, #4
 800093c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2201      	movs	r2, #1
 8000944:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	22c0      	movs	r2, #192	; 0xc0
 800094c:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	2220      	movs	r2, #32
 8000954:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2200      	movs	r2, #0
 8000964:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL2;
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2220      	movs	r2, #32
 800096c:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000976:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	2201      	movs	r2, #1
 800097e:	655a      	str	r2, [r3, #84]	; 0x54
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL2;
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	2240      	movs	r2, #64	; 0x40
 8000986:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000990:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2200      	movs	r2, #0
 8000998:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2200      	movs	r2, #0
 80009ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f008 fc99 	bl	80092ec <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x220>
  {
    Error_Handler();
 80009c0:	f000 fe1e 	bl	8001600 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009c8:	2100      	movs	r1, #0
 80009ca:	2000      	movs	r0, #0
 80009cc:	f008 fa28 	bl	8008e20 <HAL_RCC_MCOConfig>
  /** Enable the SYSCFG APB clock 
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <SystemClock_Config+0x2a0>)
 80009d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <SystemClock_Config+0x2a0>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <SystemClock_Config+0x2a0>)
 80009e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009e6:	f003 0202 	and.w	r2, r3, #2
 80009ea:	463b      	mov	r3, r7
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	463b      	mov	r3, r7
 80009f0:	681b      	ldr	r3, [r3, #0]
  /** Configures CRS 
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a02:	605a      	str	r2, [r3, #4]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8000a14:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2222      	movs	r2, #34	; 0x22
 8000a1c:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2220      	movs	r2, #32
 8000a24:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00a f9ca 	bl	800adc4 <HAL_RCCEx_CRSConfig>
}
 8000a30:	bf00      	nop
 8000a32:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58000400 	.word	0x58000400
 8000a40:	58024800 	.word	0x58024800
 8000a44:	58024400 	.word	0x58024400
 8000a48:	03091309 	.word	0x03091309

08000a4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a72:	4a30      	ldr	r2, [pc, #192]	; (8000b34 <MX_ADC1_Init+0xe8>)
 8000a74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a78:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ace:	4818      	ldr	r0, [pc, #96]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000ad0:	f002 f9b6 	bl	8002e40 <HAL_ADC_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ada:	f000 fd91 	bl	8001600 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000aea:	f002 ff7b 	bl	80039e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000af4:	f000 fd84 	bl	8001600 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_ADC1_Init+0xec>)
 8000afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afc:	2306      	movs	r3, #6
 8000afe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b04:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_ADC1_Init+0xe4>)
 8000b18:	f002 fb32 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b22:	f000 fd6d 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	240004e8 	.word	0x240004e8
 8000b34:	40022000 	.word	0x40022000
 8000b38:	43210000 	.word	0x43210000

08000b3c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b56:	4a29      	ldr	r2, [pc, #164]	; (8000bfc <MX_ADC2_Init+0xc0>)
 8000b58:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b5c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8000b60:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6e:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000bb4:	f002 f944 	bl	8002e40 <HAL_ADC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bbe:	f000 fd1f 	bl	8001600 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC2_Init+0xc4>)
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bd2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_ADC2_Init+0xbc>)
 8000be2:	f002 facd 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000bec:	f000 fd08 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2400027c 	.word	0x2400027c
 8000bfc:	40022100 	.word	0x40022100
 8000c00:	3ef08000 	.word	0x3ef08000

08000c04 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c1e:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <MX_ADC3_Init+0xd8>)
 8000c20:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c24:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8000c28:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c38:	2204      	movs	r2, #4
 8000c3a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c7a:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000c7c:	f002 f8e0 	bl	8002e40 <HAL_ADC_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000c86:	f000 fcbb 	bl	8001600 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_ADC3_Init+0xdc>)
 8000c8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000caa:	f002 fa69 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000cb4:	f000 fca4 	bl	8001600 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_ADC3_Init+0xd4>)
 8000cc2:	f002 fa5d 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000ccc:	f000 fc98 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2400054c 	.word	0x2400054c
 8000cdc:	58026000 	.word	0x58026000
 8000ce0:	19200040 	.word	0x19200040

08000ce4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_ETH_Init+0x90>)
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_ETH_Init+0x94>)
 8000cec:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_ETH_Init+0x90>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_ETH_Init+0x90>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	3302      	adds	r3, #2
 8000d06:	22e1      	movs	r2, #225	; 0xe1
 8000d08:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	3303      	adds	r3, #3
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	3305      	adds	r3, #5
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d30:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <MX_ETH_Init+0x98>)
 8000d32:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_ETH_Init+0x9c>)
 8000d38:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d40:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d44:	f005 fb0e 	bl	8006364 <HAL_ETH_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000d4e:	f000 fc57 	bl	8001600 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d52:	2234      	movs	r2, #52	; 0x34
 8000d54:	2100      	movs	r1, #0
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <MX_ETH_Init+0xa0>)
 8000d58:	f010 f8c8 	bl	8010eec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_ETH_Init+0xa0>)
 8000d5e:	2221      	movs	r2, #33	; 0x21
 8000d60:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_ETH_Init+0xa0>)
 8000d64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d68:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_ETH_Init+0xa0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24000808 	.word	0x24000808
 8000d78:	40028000 	.word	0x40028000
 8000d7c:	240000d4 	.word	0x240000d4
 8000d80:	24000074 	.word	0x24000074
 8000d84:	24000878 	.word	0x24000878

08000d88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <MX_I2C1_Init+0x78>)
 8000d90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <MX_I2C1_Init+0x7c>)
 8000d96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000dc4:	f006 f8ae 	bl	8006f24 <HAL_I2C_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dce:	f000 fc17 	bl	8001600 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000dd6:	f006 ff3a 	bl	8007c4e <HAL_I2CEx_ConfigAnalogFilter>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000de0:	f000 fc0e 	bl	8001600 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000de4:	2100      	movs	r1, #0
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_I2C1_Init+0x74>)
 8000de8:	f006 ff7c 	bl	8007ce4 <HAL_I2CEx_ConfigDigitalFilter>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000df2:	f000 fc05 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	240002e0 	.word	0x240002e0
 8000e00:	40005400 	.word	0x40005400
 8000e04:	10707dbc 	.word	0x10707dbc

08000e08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_I2C2_Init+0x78>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <MX_I2C2_Init+0x7c>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e44:	f006 f86e 	bl	8006f24 <HAL_I2C_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e4e:	f000 fbd7 	bl	8001600 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e56:	f006 fefa 	bl	8007c4e <HAL_I2CEx_ConfigAnalogFilter>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f000 fbce 	bl	8001600 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_I2C2_Init+0x74>)
 8000e68:	f006 ff3c 	bl	8007ce4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e72:	f000 fbc5 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2400032c 	.word	0x2400032c
 8000e80:	40005800 	.word	0x40005800
 8000e84:	10707dbc 	.word	0x10707dbc

08000e88 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <MX_I2S2_Init+0x64>)
 8000e90:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000ea8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000eac:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000eb0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000eb4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_I2S2_Init+0x60>)
 8000ed6:	f006 ff51 	bl	8007d7c <HAL_I2S_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2S2_Init+0x5c>
  {
    Error_Handler();
 8000ee0:	f000 fb8e 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	240008ac 	.word	0x240008ac
 8000eec:	40003800 	.word	0x40003800

08000ef0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <MX_QUADSPI_Init+0x54>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_QUADSPI_Init+0x50>)
 8000f2c:	f007 f92e 	bl	800818c <HAL_QSPI_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f36:	f000 fb63 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	24000900 	.word	0x24000900
 8000f44:	52005000 	.word	0x52005000

08000f48 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f4e:	4a30      	ldr	r2, [pc, #192]	; (8001010 <MX_SAI1_Init+0xc8>)
 8000f50:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_32;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f60:	22e0      	movs	r2, #224	; 0xe0
 8000f62:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 1;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_SAI1_Init+0xc4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 64;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fbe:	2240      	movs	r2, #64	; 0x40
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 32;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fdc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_SAI1_Init+0xc4>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_SAI1_Init+0xc4>)
 8000ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_SAI1_Init+0xc4>)
 8000ffa:	f00a f8d7 	bl	800b1ac <HAL_SAI_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001004:	f000 fafc 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	240006c4 	.word	0x240006c4
 8001010:	40015804 	.word	0x40015804

08001014 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_SAI2_Init+0x68>)
 800101a:	4a19      	ldr	r2, [pc, #100]	; (8001080 <MX_SAI2_Init+0x6c>)
 800101c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_SAI2_Init+0x68>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_SAI2_Init+0x68>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_SAI2_Init+0x68>)
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001030:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_SAI2_Init+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_SAI2_Init+0x68>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_SAI2_Init+0x68>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.Mckdiv = 2;
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_SAI2_Init+0x68>)
 8001046:	2202      	movs	r2, #2
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_SAI2_Init+0x68>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_SAI2_Init+0x68>)
 8001052:	2200      	movs	r2, #0
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_SAI2_Init+0x68>)
 8001058:	2200      	movs	r2, #0
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_SAI2_Init+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8001062:	2302      	movs	r3, #2
 8001064:	2203      	movs	r2, #3
 8001066:	2100      	movs	r1, #0
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_SAI2_Init+0x68>)
 800106a:	f00a f865 	bl	800b138 <HAL_SAI_InitProtocol>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001074:	f000 fac4 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2400016c 	.word	0x2400016c
 8001080:	40015c24 	.word	0x40015c24

08001084 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_SDMMC1_SD_Init+0x48>)
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <MX_SDMMC1_SD_Init+0x4c>)
 800108c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_SDMMC1_SD_Init+0x48>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <MX_SDMMC1_SD_Init+0x48>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_SDMMC1_SD_Init+0x48>)
 800109c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <MX_SDMMC1_SD_Init+0x48>)
 80010a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010a8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 100;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_SDMMC1_SD_Init+0x48>)
 80010ac:	2264      	movs	r2, #100	; 0x64
 80010ae:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_SDMMC1_SD_Init+0x48>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_SDMMC1_SD_Init+0x48>)
 80010b8:	f00a feed 	bl	800be96 <HAL_SD_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 80010c2:	f000 fa9d 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24000378 	.word	0x24000378
 80010d0:	52007000 	.word	0x52007000

080010d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <MX_SPI1_Init+0xa4>)
 80010da:	4a28      	ldr	r2, [pc, #160]	; (800117c <MX_SPI1_Init+0xa8>)
 80010dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_SPI1_Init+0xa4>)
 80010e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <MX_SPI1_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_SPI1_Init+0xa4>)
 80010ee:	221f      	movs	r2, #31
 80010f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_SPI1_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_SPI1_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001100:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001104:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800110c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_SPI1_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001136:	2200      	movs	r2, #0
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_SPI1_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_SPI1_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_SPI1_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_SPI1_Init+0xa4>)
 8001166:	f00b ff01 	bl	800cf6c <HAL_SPI_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001170:	f000 fa46 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2400063c 	.word	0x2400063c
 800117c:	40013000 	.word	0x40013000

08001180 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <MX_USART6_UART_Init+0x90>)
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <MX_USART6_UART_Init+0x94>)
 8001188:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_USART6_UART_Init+0x90>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_USART6_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_USART6_UART_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011c8:	4811      	ldr	r0, [pc, #68]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011ca:	f00c fa41 	bl	800d650 <HAL_UART_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80011d4:	f000 fa14 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d8:	2100      	movs	r1, #0
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011dc:	f00e ffaf 	bl	801013e <HAL_UARTEx_SetTxFifoThreshold>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80011e6:	f000 fa0b 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4808      	ldr	r0, [pc, #32]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011ee:	f00e ffe4 	bl	80101ba <HAL_UARTEx_SetRxFifoThreshold>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80011f8:	f000 fa02 	bl	8001600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_USART6_UART_Init+0x90>)
 80011fe:	f00e ff65 	bl	80100cc <HAL_UARTEx_DisableFifoMode>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001208:	f000 f9fa 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	240005b0 	.word	0x240005b0
 8001214:	40011400 	.word	0x40011400

08001218 <MX_BDMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void) 
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_BDMA_Init+0x3c>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <MX_BDMA_Init+0x3c>)
 8001226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_BDMA_Init+0x3c>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2081      	movs	r0, #129	; 0x81
 8001242:	f002 fd61 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001246:	2081      	movs	r0, #129	; 0x81
 8001248:	f002 fd78 	bl	8003d3c <HAL_NVIC_EnableIRQ>

}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	58024400 	.word	0x58024400

08001258 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_DMA_Init+0x6c>)
 8001260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <MX_DMA_Init+0x6c>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_DMA_Init+0x6c>)
 8001270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	200b      	movs	r0, #11
 8001282:	f002 fd41 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001286:	200b      	movs	r0, #11
 8001288:	f002 fd58 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	200c      	movs	r0, #12
 8001292:	f002 fd39 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001296:	200c      	movs	r0, #12
 8001298:	f002 fd50 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	200d      	movs	r0, #13
 80012a2:	f002 fd31 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012a6:	200d      	movs	r0, #13
 80012a8:	f002 fd48 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2066      	movs	r0, #102	; 0x66
 80012b2:	f002 fd29 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80012b6:	2066      	movs	r0, #102	; 0x66
 80012b8:	f002 fd40 	bl	8003d3c <HAL_NVIC_EnableIRQ>

}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	58024400 	.word	0x58024400

080012c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_FMC_Init+0x98>)
 80012e2:	4a20      	ldr	r2, [pc, #128]	; (8001364 <MX_FMC_Init+0x9c>)
 80012e4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_FMC_Init+0x98>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_FMC_Init+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_FMC_Init+0x98>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_FMC_Init+0x98>)
 80012fa:	2220      	movs	r2, #32
 80012fc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_FMC_Init+0x98>)
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_FMC_Init+0x98>)
 8001306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_FMC_Init+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_FMC_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_FMC_Init+0x98>)
 800131a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_FMC_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800132a:	2310      	movs	r3, #16
 800132c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800132e:	2310      	movs	r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001332:	2310      	movs	r3, #16
 8001334:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001336:	2310      	movs	r3, #16
 8001338:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800133a:	2310      	movs	r3, #16
 800133c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800133e:	2310      	movs	r3, #16
 8001340:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_FMC_Init+0x98>)
 8001348:	f00b fdd4 	bl	800cef4 <HAL_SDRAM_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8001352:	f000 f955 	bl	8001600 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2400075c 	.word	0x2400075c
 8001364:	52004140 	.word	0x52004140

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137e:	4b92      	ldr	r3, [pc, #584]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	4a90      	ldr	r2, [pc, #576]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138e:	4b8e      	ldr	r3, [pc, #568]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b8a      	ldr	r3, [pc, #552]	; (80015c8 <MX_GPIO_Init+0x260>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	4a89      	ldr	r2, [pc, #548]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ac:	4b86      	ldr	r3, [pc, #536]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ba:	4b83      	ldr	r3, [pc, #524]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	4a81      	ldr	r2, [pc, #516]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ca:	4b7f      	ldr	r3, [pc, #508]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d8:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	4a7a      	ldr	r2, [pc, #488]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e8:	4b77      	ldr	r3, [pc, #476]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b74      	ldr	r3, [pc, #464]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	4a72      	ldr	r2, [pc, #456]	; (80015c8 <MX_GPIO_Init+0x260>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001406:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	4a6b      	ldr	r2, [pc, #428]	; (80015c8 <MX_GPIO_Init+0x260>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001432:	4b65      	ldr	r3, [pc, #404]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	4a63      	ldr	r2, [pc, #396]	; (80015c8 <MX_GPIO_Init+0x260>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001442:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001450:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	4a5c      	ldr	r2, [pc, #368]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146e:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	4a54      	ldr	r2, [pc, #336]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001476:	f043 0320 	orr.w	r3, r3, #32
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147e:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <MX_GPIO_Init+0x260>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|V_BATT_SW_EN_Pin|BOOST_EN_Pin|AK4452_PDN_Pin 
 800148c:	2200      	movs	r2, #0
 800148e:	f243 1103 	movw	r1, #12547	; 0x3103
 8001492:	484e      	ldr	r0, [pc, #312]	; (80015cc <MX_GPIO_Init+0x264>)
 8001494:	f005 fd2c 	bl	8006ef0 <HAL_GPIO_WritePin>
                          |AK4954_PDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149e:	484c      	ldr	r0, [pc, #304]	; (80015d0 <MX_GPIO_Init+0x268>)
 80014a0:	f005 fd26 	bl	8006ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENET_RST_N_GPIO_Port, ENET_RST_N_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014aa:	4849      	ldr	r0, [pc, #292]	; (80015d0 <MX_GPIO_Init+0x268>)
 80014ac:	f005 fd20 	bl	8006ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADS127_START_Pin|ADS127_RESET_PWDN_N_Pin|TPA_RESET_N_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f242 0118 	movw	r1, #8216	; 0x2018
 80014b6:	4847      	ldr	r0, [pc, #284]	; (80015d4 <MX_GPIO_Init+0x26c>)
 80014b8:	f005 fd1a 	bl	8006ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin V_BATT_SW_EN_Pin BOOST_EN_Pin AK4452_PDN_Pin 
                           AK4954_PDN_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|V_BATT_SW_EN_Pin|BOOST_EN_Pin|AK4452_PDN_Pin 
 80014bc:	f243 1303 	movw	r3, #12547	; 0x3103
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |AK4954_PDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	483d      	ldr	r0, [pc, #244]	; (80015cc <MX_GPIO_Init+0x264>)
 80014d6:	f005 fb5b 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : AK4452_DZF_Pin */
  GPIO_InitStruct.Pin = AK4452_DZF_Pin;
 80014da:	2320      	movs	r3, #32
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AK4452_DZF_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4837      	ldr	r0, [pc, #220]	; (80015cc <MX_GPIO_Init+0x264>)
 80014ee:	f005 fb4f 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80014f2:	2360      	movs	r3, #96	; 0x60
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001502:	2307      	movs	r3, #7
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4831      	ldr	r0, [pc, #196]	; (80015d4 <MX_GPIO_Init+0x26c>)
 800150e:	f005 fb3f 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin ENET_RST_N_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|ENET_RST_N_Pin;
 8001512:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4829      	ldr	r0, [pc, #164]	; (80015d0 <MX_GPIO_Init+0x268>)
 800152c:	f005 fb30 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADS127_START_Pin ADS127_RESET_PWDN_N_Pin TPA_RESET_N_Pin */
  GPIO_InitStruct.Pin = ADS127_START_Pin|ADS127_RESET_PWDN_N_Pin|TPA_RESET_N_Pin;
 8001530:	f242 0318 	movw	r3, #8216	; 0x2018
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	4822      	ldr	r0, [pc, #136]	; (80015d4 <MX_GPIO_Init+0x26c>)
 800154a:	f005 fb21 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 800154e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	481b      	ldr	r0, [pc, #108]	; (80015d0 <MX_GPIO_Init+0x268>)
 8001564:	f005 fb14 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_GPIO_Pin */
  GPIO_InitStruct.Pin = PTT_GPIO_Pin;
 8001568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PTT_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4816      	ldr	r0, [pc, #88]	; (80015d8 <MX_GPIO_Init+0x270>)
 800157e:	f005 fb07 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_GPIO_Init+0x268>)
 80015a0:	f005 faf6 	bl	8006b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : TPA_OTW_CLIP_N_Pin TPA_FAULT_N_Pin */
  GPIO_InitStruct.Pin = TPA_OTW_CLIP_N_Pin|TPA_FAULT_N_Pin;
 80015a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_GPIO_Init+0x26c>)
 80015ba:	f005 fae9 	bl	8006b90 <HAL_GPIO_Init>

}
 80015be:	bf00      	nop
 80015c0:	3738      	adds	r7, #56	; 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	58024400 	.word	0x58024400
 80015cc:	58020400 	.word	0x58020400
 80015d0:	58020000 	.word	0x58020000
 80015d4:	58020c00 	.word	0x58020c00
 80015d8:	58022000 	.word	0x58022000

080015dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ee:	f001 fa45 	bl	8002a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40001000 	.word	0x40001000

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_MspInit+0x30>)
 8001618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800161c:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x30>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x30>)
 8001628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	58024400 	.word	0x58024400

08001644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b090      	sub	sp, #64	; 0x40
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a90      	ldr	r2, [pc, #576]	; (80018a4 <HAL_ADC_MspInit+0x260>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d14e      	bne.n	8001704 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001666:	4b90      	ldr	r3, [pc, #576]	; (80018a8 <HAL_ADC_MspInit+0x264>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a8e      	ldr	r2, [pc, #568]	; (80018a8 <HAL_ADC_MspInit+0x264>)
 800166e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001670:	4b8d      	ldr	r3, [pc, #564]	; (80018a8 <HAL_ADC_MspInit+0x264>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10e      	bne.n	8001696 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001678:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <HAL_ADC_MspInit+0x268>)
 800167a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800167e:	4a8b      	ldr	r2, [pc, #556]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001688:	4b88      	ldr	r3, [pc, #544]	; (80018ac <HAL_ADC_MspInit+0x268>)
 800168a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b85      	ldr	r3, [pc, #532]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	4a83      	ldr	r2, [pc, #524]	; (80018ac <HAL_ADC_MspInit+0x268>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a6:	4b81      	ldr	r3, [pc, #516]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b7d      	ldr	r3, [pc, #500]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a7c      	ldr	r2, [pc, #496]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b79      	ldr	r3, [pc, #484]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016d2:	2301      	movs	r3, #1
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d6:	2303      	movs	r3, #3
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e2:	4619      	mov	r1, r3
 80016e4:	4872      	ldr	r0, [pc, #456]	; (80018b0 <HAL_ADC_MspInit+0x26c>)
 80016e6:	f005 fa53 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80016ea:	2309      	movs	r3, #9
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fa:	4619      	mov	r1, r3
 80016fc:	486d      	ldr	r0, [pc, #436]	; (80018b4 <HAL_ADC_MspInit+0x270>)
 80016fe:	f005 fa47 	bl	8006b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001702:	e0cb      	b.n	800189c <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a6b      	ldr	r2, [pc, #428]	; (80018b8 <HAL_ADC_MspInit+0x274>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d133      	bne.n	8001776 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800170e:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <HAL_ADC_MspInit+0x264>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a64      	ldr	r2, [pc, #400]	; (80018a8 <HAL_ADC_MspInit+0x264>)
 8001716:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001718:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_ADC_MspInit+0x264>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10e      	bne.n	800173e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001720:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001726:	4a61      	ldr	r2, [pc, #388]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001730:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001744:	4a59      	ldr	r2, [pc, #356]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174e:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800175c:	2308      	movs	r3, #8
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001760:	2303      	movs	r3, #3
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176c:	4619      	mov	r1, r3
 800176e:	4851      	ldr	r0, [pc, #324]	; (80018b4 <HAL_ADC_MspInit+0x270>)
 8001770:	f005 fa0e 	bl	8006b90 <HAL_GPIO_Init>
}
 8001774:	e092      	b.n	800189c <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC3)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a50      	ldr	r2, [pc, #320]	; (80018bc <HAL_ADC_MspInit+0x278>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f040 808d 	bne.w	800189c <HAL_ADC_MspInit+0x258>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_ADC_MspInit+0x268>)
 800178a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b46      	ldr	r3, [pc, #280]	; (80018ac <HAL_ADC_MspInit+0x268>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a0:	4b42      	ldr	r3, [pc, #264]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	4a41      	ldr	r2, [pc, #260]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b0:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	4a39      	ldr	r2, [pc, #228]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e2:	4a32      	ldr	r2, [pc, #200]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_ADC_MspInit+0x268>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017fa:	2310      	movs	r3, #16
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	2303      	movs	r3, #3
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	482c      	ldr	r0, [pc, #176]	; (80018c0 <HAL_ADC_MspInit+0x27c>)
 800180e:	f005 f9bf 	bl	8006b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001818:	2303      	movs	r3, #3
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	4827      	ldr	r0, [pc, #156]	; (80018c4 <HAL_ADC_MspInit+0x280>)
 8001828:	f005 f9b2 	bl	8006b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800182c:	2301      	movs	r3, #1
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001830:	2303      	movs	r3, #3
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	481c      	ldr	r0, [pc, #112]	; (80018b0 <HAL_ADC_MspInit+0x26c>)
 8001840:	f005 f9a6 	bl	8006b90 <HAL_GPIO_Init>
    hdma_adc3.Instance = BDMA_Channel0;
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 8001846:	4a21      	ldr	r2, [pc, #132]	; (80018cc <HAL_ADC_MspInit+0x288>)
 8001848:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 800184c:	2211      	movs	r2, #17
 800184e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 800185e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001862:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 8001866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 8001882:	f002 fa69 	bl	8003d58 <HAL_DMA_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_ADC_MspInit+0x24c>
      Error_Handler();
 800188c:	f7ff feb8 	bl	8001600 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 8001894:	64da      	str	r2, [r3, #76]	; 0x4c
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <HAL_ADC_MspInit+0x284>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800189c:	bf00      	nop
 800189e:	3740      	adds	r7, #64	; 0x40
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40022000 	.word	0x40022000
 80018a8:	24000150 	.word	0x24000150
 80018ac:	58024400 	.word	0x58024400
 80018b0:	58020800 	.word	0x58020800
 80018b4:	58020000 	.word	0x58020000
 80018b8:	40022100 	.word	0x40022100
 80018bc:	58026000 	.word	0x58026000
 80018c0:	58021c00 	.word	0x58021c00
 80018c4:	58021400 	.word	0x58021400
 80018c8:	240003f8 	.word	0x240003f8
 80018cc:	58025408 	.word	0x58025408

080018d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a49      	ldr	r2, [pc, #292]	; (8001a14 <HAL_ETH_MspInit+0x144>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	f040 808b 	bne.w	8001a0a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80018f4:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 80018f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018fa:	4a47      	ldr	r2, [pc, #284]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 80018fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001900:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001904:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001906:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800190a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001918:	4a3f      	ldr	r2, [pc, #252]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 800191a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001932:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001936:	4a38      	ldr	r2, [pc, #224]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001942:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001954:	4a30      	ldr	r2, [pc, #192]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800195a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001972:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800197c:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_ETH_MspInit+0x148>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11;
 80019a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ba:	230b      	movs	r3, #11
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	4619      	mov	r1, r3
 80019c4:	4815      	ldr	r0, [pc, #84]	; (8001a1c <HAL_ETH_MspInit+0x14c>)
 80019c6:	f005 f8e3 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80019ca:	2332      	movs	r3, #50	; 0x32
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019da:	230b      	movs	r3, #11
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	480e      	ldr	r0, [pc, #56]	; (8001a20 <HAL_ETH_MspInit+0x150>)
 80019e6:	f005 f8d3 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80019ea:	2386      	movs	r3, #134	; 0x86
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019fa:	230b      	movs	r3, #11
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <HAL_ETH_MspInit+0x154>)
 8001a06:	f005 f8c3 	bl	8006b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3738      	adds	r7, #56	; 0x38
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40028000 	.word	0x40028000
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58021800 	.word	0x58021800
 8001a20:	58020800 	.word	0x58020800
 8001a24:	58020000 	.word	0x58020000

08001a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	; 0x30
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <HAL_I2C_MspInit+0x110>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d13e      	bne.n	8001ac8 <HAL_I2C_MspInit+0xa0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	4b3c      	ldr	r3, [pc, #240]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	4a3a      	ldr	r2, [pc, #232]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
 8001a66:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a68:	23c0      	movs	r3, #192	; 0xc0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	482f      	ldr	r0, [pc, #188]	; (8001b40 <HAL_I2C_MspInit+0x118>)
 8001a84:	f005 f884 	bl	8006b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8e:	4a2b      	ldr	r2, [pc, #172]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	201f      	movs	r0, #31
 8001aac:	f002 f92c 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ab0:	201f      	movs	r0, #31
 8001ab2:	f002 f943 	bl	8003d3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2020      	movs	r0, #32
 8001abc:	f002 f924 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f002 f93b 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ac6:	e033      	b.n	8001b30 <HAL_I2C_MspInit+0x108>
  else if(hi2c->Instance==I2C2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_I2C_MspInit+0x11c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12e      	bne.n	8001b30 <HAL_I2C_MspInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001af0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af6:	2312      	movs	r3, #18
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b02:	2304      	movs	r3, #4
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <HAL_I2C_MspInit+0x118>)
 8001b0e:	f005 f83f 	bl	8006b90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_I2C_MspInit+0x114>)
 8001b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3730      	adds	r7, #48	; 0x30
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	58020400 	.word	0x58020400
 8001b44:	40005800 	.word	0x40005800

08001b48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a5b      	ldr	r2, [pc, #364]	; (8001cd4 <HAL_I2S_MspInit+0x18c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	f040 80b0 	bne.w	8001ccc <HAL_I2S_MspInit+0x184>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b72:	4a59      	ldr	r2, [pc, #356]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b7c:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9a:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	4a4a      	ldr	r2, [pc, #296]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	4a42      	ldr	r2, [pc, #264]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_I2S_MspInit+0x190>)
 8001bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    PB14     ------> I2S2_SDI
    PB15     ------> I2S2_SDO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 8001be4:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4836      	ldr	r0, [pc, #216]	; (8001cdc <HAL_I2S_MspInit+0x194>)
 8001c02:	f004 ffc5 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c14:	2302      	movs	r3, #2
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c18:	2305      	movs	r3, #5
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	482f      	ldr	r0, [pc, #188]	; (8001ce0 <HAL_I2S_MspInit+0x198>)
 8001c24:	f004 ffb4 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c28:	2340      	movs	r3, #64	; 0x40
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c34:	2302      	movs	r3, #2
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c38:	2305      	movs	r3, #5
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4828      	ldr	r0, [pc, #160]	; (8001ce4 <HAL_I2S_MspInit+0x19c>)
 8001c44:	f004 ffa4 	bl	8006b90 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c4a:	4a28      	ldr	r2, [pc, #160]	; (8001cec <HAL_I2S_MspInit+0x1a4>)
 8001c4c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c50:	2228      	movs	r2, #40	; 0x28
 8001c52:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c66:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c76:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c86:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ca0:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001ca2:	f002 f859 	bl	8003d58 <HAL_DMA_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2S_MspInit+0x168>
    {
      Error_Handler();
 8001cac:	f7ff fca8 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <HAL_I2S_MspInit+0x1a0>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2024      	movs	r0, #36	; 0x24
 8001cc2:	f002 f821 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001cc6:	2024      	movs	r0, #36	; 0x24
 8001cc8:	f002 f838 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3730      	adds	r7, #48	; 0x30
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40003800 	.word	0x40003800
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58020400 	.word	0x58020400
 8001ce0:	58020000 	.word	0x58020000
 8001ce4:	58020800 	.word	0x58020800
 8001ce8:	24000790 	.word	0x24000790
 8001cec:	40020010 	.word	0x40020010

08001cf0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <HAL_QSPI_MspInit+0x124>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d17c      	bne.n	8001e0c <HAL_QSPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d12:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d18:	4a3f      	ldr	r2, [pc, #252]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d30:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4e:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	4a30      	ldr	r2, [pc, #192]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d56:	f043 0320 	orr.w	r3, r3, #32
 8001d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d72:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_QSPI_MspInit+0x128>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    PF6     ------> QUADSPI_BK1_IO3
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d8a:	2340      	movs	r3, #64	; 0x40
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	481d      	ldr	r0, [pc, #116]	; (8001e1c <HAL_QSPI_MspInit+0x12c>)
 8001da6:	f004 fef3 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001daa:	23c0      	movs	r3, #192	; 0xc0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001dba:	2309      	movs	r3, #9
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4816      	ldr	r0, [pc, #88]	; (8001e20 <HAL_QSPI_MspInit+0x130>)
 8001dc6:	f004 fee3 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ddc:	230a      	movs	r3, #10
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	480e      	ldr	r0, [pc, #56]	; (8001e20 <HAL_QSPI_MspInit+0x130>)
 8001de8:	f004 fed2 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dec:	2304      	movs	r3, #4
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001dfc:	2309      	movs	r3, #9
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <HAL_QSPI_MspInit+0x134>)
 8001e08:	f004 fec2 	bl	8006b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	52005000 	.word	0x52005000
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58021800 	.word	0x58021800
 8001e20:	58021400 	.word	0x58021400
 8001e24:	58020400 	.word	0x58020400

08001e28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <HAL_SD_MspInit+0xc8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d14d      	bne.n	8001ee6 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e50:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e56:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e8e:	f043 0308 	orr.w	r3, r3, #8
 8001e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_SD_MspInit+0xcc>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9 
 8001ea4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ea8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <HAL_SD_MspInit+0xd0>)
 8001ec2:	f004 fe65 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001ed6:	230c      	movs	r3, #12
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4806      	ldr	r0, [pc, #24]	; (8001efc <HAL_SD_MspInit+0xd4>)
 8001ee2:	f004 fe55 	bl	8006b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	; 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	52007000 	.word	0x52007000
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58020800 	.word	0x58020800
 8001efc:	58020c00 	.word	0x58020c00

08001f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <HAL_SPI_MspInit+0xe4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d15c      	bne.n	8001fdc <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f28:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f32:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f46:	4a28      	ldr	r2, [pc, #160]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_SPI_MspInit+0xe8>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
    PD7     ------> SPI1_MOSI
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4815      	ldr	r0, [pc, #84]	; (8001fec <HAL_SPI_MspInit+0xec>)
 8001f98:	f004 fdfa 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fac:	2305      	movs	r3, #5
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <HAL_SPI_MspInit+0xf0>)
 8001fb8:	f004 fdea 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001fbc:	2360      	movs	r3, #96	; 0x60
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fcc:	2305      	movs	r3, #5
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <HAL_SPI_MspInit+0xf0>)
 8001fd8:	f004 fdda 	bl	8006b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013000 	.word	0x40013000
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	58020c00 	.word	0x58020c00
 8001ff0:	58020000 	.word	0x58020000

08001ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2e      	ldr	r2, [pc, #184]	; (80020cc <HAL_UART_MspInit+0xd8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d155      	bne.n	80020c2 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002016:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 8002018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800201c:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 800201e:	f043 0320 	orr.w	r3, r3, #32
 8002022:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002026:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 8002028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203a:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 800203c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_UART_MspInit+0xdc>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration    
    PG14     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002070:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002082:	2307      	movs	r3, #7
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4811      	ldr	r0, [pc, #68]	; (80020d4 <HAL_UART_MspInit+0xe0>)
 800208e:	f004 fd7f 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80020a2:	2307      	movs	r3, #7
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	480a      	ldr	r0, [pc, #40]	; (80020d8 <HAL_UART_MspInit+0xe4>)
 80020ae:	f004 fd6f 	bl	8006b90 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2047      	movs	r0, #71	; 0x47
 80020b8:	f001 fe26 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020bc:	2047      	movs	r0, #71	; 0x47
 80020be:	f001 fe3d 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3728      	adds	r7, #40	; 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40011400 	.word	0x40011400
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58021800 	.word	0x58021800
 80020d8:	58020800 	.word	0x58020800

080020dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80020f0:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_FMC_MspInit+0x10c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d172      	bne.n	80021de <HAL_FMC_MspInit+0x102>
    return;
  }
  FMC_Initialized = 1;
 80020f8:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_FMC_MspInit+0x10c>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_FMC_MspInit+0x110>)
 8002100:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002104:	4a39      	ldr	r2, [pc, #228]	; (80021ec <HAL_FMC_MspInit+0x110>)
 8002106:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800210a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800210e:	4b37      	ldr	r3, [pc, #220]	; (80021ec <HAL_FMC_MspInit+0x110>)
 8002110:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8 
 800211c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002120:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800212e:	230c      	movs	r3, #12
 8002130:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4619      	mov	r1, r3
 8002136:	482e      	ldr	r0, [pc, #184]	; (80021f0 <HAL_FMC_MspInit+0x114>)
 8002138:	f004 fd2a 	bl	8006b90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4 
 800213c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002140:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800214e:	230c      	movs	r3, #12
 8002150:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4827      	ldr	r0, [pc, #156]	; (80021f4 <HAL_FMC_MspInit+0x118>)
 8002158:	f004 fd1a 	bl	8006b90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14 
 800215c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002160:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800216e:	230c      	movs	r3, #12
 8002170:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	4619      	mov	r1, r3
 8002176:	4820      	ldr	r0, [pc, #128]	; (80021f8 <HAL_FMC_MspInit+0x11c>)
 8002178:	f004 fd0a 	bl	8006b90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3 
 800217c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002180:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_1 
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800218e:	230c      	movs	r3, #12
 8002190:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4819      	ldr	r0, [pc, #100]	; (80021fc <HAL_FMC_MspInit+0x120>)
 8002198:	f004 fcfa 	bl	8006b90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800219c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021a0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_6 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021ae:	230c      	movs	r3, #12
 80021b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4812      	ldr	r0, [pc, #72]	; (8002200 <HAL_FMC_MspInit+0x124>)
 80021b8:	f004 fcea 	bl	8006b90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3 
 80021bc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021c0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12 
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021ce:	230c      	movs	r3, #12
 80021d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	480b      	ldr	r0, [pc, #44]	; (8002204 <HAL_FMC_MspInit+0x128>)
 80021d8:	f004 fcda 	bl	8006b90 <HAL_GPIO_Init>
 80021dc:	e000      	b.n	80021e0 <HAL_FMC_MspInit+0x104>
    return;
 80021de:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	24000154 	.word	0x24000154
 80021ec:	58024400 	.word	0x58024400
 80021f0:	58021000 	.word	0x58021000
 80021f4:	58021800 	.word	0x58021800
 80021f8:	58020c00 	.word	0x58020c00
 80021fc:	58022000 	.word	0x58022000
 8002200:	58021c00 	.word	0x58021c00
 8002204:	58021400 	.word	0x58021400

08002208 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002210:	f7ff ff64 	bl	80020dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08e      	sub	sp, #56	; 0x38
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7d      	ldr	r2, [pc, #500]	; (8002420 <HAL_SAI_MspInit+0x204>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d15f      	bne.n	80022ee <HAL_SAI_MspInit+0xd2>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800222e:	4b7d      	ldr	r3, [pc, #500]	; (8002424 <HAL_SAI_MspInit+0x208>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10e      	bne.n	8002254 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002236:	4b7c      	ldr	r3, [pc, #496]	; (8002428 <HAL_SAI_MspInit+0x20c>)
 8002238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800223c:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_SAI_MspInit+0x20c>)
 800223e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002242:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_SAI_MspInit+0x20c>)
 8002248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800224c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002254:	4b73      	ldr	r3, [pc, #460]	; (8002424 <HAL_SAI_MspInit+0x208>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a72      	ldr	r2, [pc, #456]	; (8002424 <HAL_SAI_MspInit+0x208>)
 800225c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800225e:	2374      	movs	r3, #116	; 0x74
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800226e:	2306      	movs	r3, #6
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002276:	4619      	mov	r1, r3
 8002278:	486c      	ldr	r0, [pc, #432]	; (800242c <HAL_SAI_MspInit+0x210>)
 800227a:	f004 fc89 	bl	8006b90 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai1_a.Instance = DMA1_Stream2;
 800227e:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <HAL_SAI_MspInit+0x214>)
 8002280:	4a6c      	ldr	r2, [pc, #432]	; (8002434 <HAL_SAI_MspInit+0x218>)
 8002282:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_SAI_MspInit+0x214>)
 8002286:	2257      	movs	r2, #87	; 0x57
 8002288:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800228a:	4b69      	ldr	r3, [pc, #420]	; (8002430 <HAL_SAI_MspInit+0x214>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002290:	4b67      	ldr	r3, [pc, #412]	; (8002430 <HAL_SAI_MspInit+0x214>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002296:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_SAI_MspInit+0x214>)
 8002298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800229e:	4b64      	ldr	r3, [pc, #400]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022a6:	4b62      	ldr	r3, [pc, #392]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ac:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80022ae:	4b60      	ldr	r3, [pc, #384]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b4:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80022b6:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022bc:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80022c2:	485b      	ldr	r0, [pc, #364]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022c4:	f001 fd48 	bl	8003d58 <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_SAI_MspInit+0xb6>
    {
      Error_Handler();
 80022ce:	f7ff f997 	bl	8001600 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a56      	ldr	r2, [pc, #344]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80022da:	4a55      	ldr	r2, [pc, #340]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a53      	ldr	r2, [pc, #332]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80022e8:	4a51      	ldr	r2, [pc, #324]	; (8002430 <HAL_SAI_MspInit+0x214>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6393      	str	r3, [r2, #56]	; 0x38

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_B)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a51      	ldr	r2, [pc, #324]	; (8002438 <HAL_SAI_MspInit+0x21c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	f040 808e 	bne.w	8002416 <HAL_SAI_MspInit+0x1fa>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80022fa:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_SAI_MspInit+0x220>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_SAI_MspInit+0x114>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_SAI_MspInit+0x20c>)
 8002304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002308:	4a47      	ldr	r2, [pc, #284]	; (8002428 <HAL_SAI_MspInit+0x20c>)
 800230a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800230e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002312:	4b45      	ldr	r3, [pc, #276]	; (8002428 <HAL_SAI_MspInit+0x20c>)
 8002314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	205b      	movs	r0, #91	; 0x5b
 8002326:	f001 fcef 	bl	8003d08 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 800232a:	205b      	movs	r0, #91	; 0x5b
 800232c:	f001 fd06 	bl	8003d3c <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8002330:	4b42      	ldr	r3, [pc, #264]	; (800243c <HAL_SAI_MspInit+0x220>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	4a41      	ldr	r2, [pc, #260]	; (800243c <HAL_SAI_MspInit+0x220>)
 8002338:	6013      	str	r3, [r2, #0]
    PG10     ------> SAI2_SD_B
    PG9     ------> SAI2_FS_B
    PH2     ------> SAI2_SCK_B
    PH3     ------> SAI2_MCLK_B 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800233a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800234c:	230a      	movs	r3, #10
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	4619      	mov	r1, r3
 8002356:	483a      	ldr	r0, [pc, #232]	; (8002440 <HAL_SAI_MspInit+0x224>)
 8002358:	f004 fc1a 	bl	8006b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800235c:	230c      	movs	r3, #12
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800236c:	230a      	movs	r3, #10
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	4833      	ldr	r0, [pc, #204]	; (8002444 <HAL_SAI_MspInit+0x228>)
 8002378:	f004 fc0a 	bl	8006b90 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai2_b.Instance = DMA1_Stream1;
 800237c:	4b32      	ldr	r3, [pc, #200]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 800237e:	4a33      	ldr	r2, [pc, #204]	; (800244c <HAL_SAI_MspInit+0x230>)
 8002380:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 8002384:	225a      	movs	r2, #90	; 0x5a
 8002386:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 8002390:	2200      	movs	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8002394:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 8002396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800239a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 800239e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023a2:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 80023a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023aa:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 80023ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b2:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80023c0:	4821      	ldr	r0, [pc, #132]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 80023c2:	f001 fcc9 	bl	8003d58 <HAL_DMA_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_SAI_MspInit+0x1b4>
    {
      Error_Handler();
 80023cc:	f7ff f918 	bl	8001600 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80023d0:	2306      	movs	r3, #6
 80023d2:	617b      	str	r3, [r7, #20]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
    pSyncConfig.SyncEnable = DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	773b      	strb	r3, [r7, #28]
    pSyncConfig.EventEnable = ENABLE;
 80023dc:	2301      	movs	r3, #1
 80023de:	777b      	strb	r3, [r7, #29]
    pSyncConfig.RequestNumber = 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	623b      	str	r3, [r7, #32]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai2_b, &pSyncConfig) != HAL_OK)
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4817      	ldr	r0, [pc, #92]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 80023ec:	f003 fea2 	bl	8006134 <HAL_DMAEx_ConfigMuxSync>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_SAI_MspInit+0x1de>
    {
      Error_Handler();
 80023f6:	f7ff f903 	bl	8001600 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 80023fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002402:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 800240c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <HAL_SAI_MspInit+0x22c>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002416:	bf00      	nop
 8002418:	3738      	adds	r7, #56	; 0x38
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40015804 	.word	0x40015804
 8002424:	24000158 	.word	0x24000158
 8002428:	58024400 	.word	0x58024400
 800242c:	58021000 	.word	0x58021000
 8002430:	24000470 	.word	0x24000470
 8002434:	40020040 	.word	0x40020040
 8002438:	40015c24 	.word	0x40015c24
 800243c:	2400015c 	.word	0x2400015c
 8002440:	58021800 	.word	0x58021800
 8002444:	58021c00 	.word	0x58021c00
 8002448:	24000204 	.word	0x24000204
 800244c:	40020028 	.word	0x40020028

08002450 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002460:	2200      	movs	r2, #0
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	2036      	movs	r0, #54	; 0x36
 8002466:	f001 fc4f 	bl	8003d08 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800246a:	2036      	movs	r0, #54	; 0x36
 800246c:	f001 fc66 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002470:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <HAL_InitTick+0xa8>)
 8002472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002476:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <HAL_InitTick+0xa8>)
 8002478:	f043 0310 	orr.w	r3, r3, #16
 800247c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_InitTick+0xa8>)
 8002482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800248e:	f107 020c 	add.w	r2, r7, #12
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f006 fee5 	bl	8009268 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800249e:	f006 feb7 	bl	8009210 <HAL_RCC_GetPCLK1Freq>
 80024a2:	4603      	mov	r3, r0
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	4a14      	ldr	r2, [pc, #80]	; (80024fc <HAL_InitTick+0xac>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	3b01      	subs	r3, #1
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0xb0>)
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_InitTick+0xb4>)
 80024ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_InitTick+0xb0>)
 80024be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024c4:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_InitTick+0xb0>)
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_InitTick+0xb0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_InitTick+0xb0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024d6:	480a      	ldr	r0, [pc, #40]	; (8002500 <HAL_InitTick+0xb0>)
 80024d8:	f00a fe5b 	bl	800d192 <HAL_TIM_Base_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024e2:	4807      	ldr	r0, [pc, #28]	; (8002500 <HAL_InitTick+0xb0>)
 80024e4:	f00a fe8a 	bl	800d1fc <HAL_TIM_Base_Start_IT>
 80024e8:	4603      	mov	r3, r0
 80024ea:	e000      	b.n	80024ee <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3738      	adds	r7, #56	; 0x38
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	58024400 	.word	0x58024400
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	2400094c 	.word	0x2400094c
 8002504:	40001000 	.word	0x40001000

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <MemManage_Handler+0x4>

08002522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <BusFault_Handler+0x4>

08002528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <UsageFault_Handler+0x4>

0800252e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <DMA1_Stream0_IRQHandler+0x10>)
 800255e:	f002 fc83 	bl	8004e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	24000790 	.word	0x24000790

0800256c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA1_Stream1_IRQHandler+0x10>)
 8002572:	f002 fc79 	bl	8004e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	24000204 	.word	0x24000204

08002580 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <DMA1_Stream2_IRQHandler+0x10>)
 8002586:	f002 fc6f 	bl	8004e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	24000470 	.word	0x24000470

08002594 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <I2C1_EV_IRQHandler+0x10>)
 800259a:	f004 fd53 	bl	8007044 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	240002e0 	.word	0x240002e0

080025a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <I2C1_ER_IRQHandler+0x10>)
 80025ae:	f004 fd63 	bl	8007078 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	240002e0 	.word	0x240002e0

080025bc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <SPI2_IRQHandler+0x10>)
 80025c2:	f005 fcfb 	bl	8007fbc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	240008ac 	.word	0x240008ac

080025d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <TIM6_DAC_IRQHandler+0x10>)
 80025d6:	f00a fe3b 	bl	800d250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2400094c 	.word	0x2400094c

080025e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <USART6_IRQHandler+0x10>)
 80025ea:	f00b f881 	bl	800d6f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	240005b0 	.word	0x240005b0

080025f8 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <SAI2_IRQHandler+0x10>)
 80025fe:	f009 f8e9 	bl	800b7d4 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2400016c 	.word	0x2400016c

0800260c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai2_b);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <DMAMUX1_OVR_IRQHandler+0x10>)
 8002612:	f003 fe55 	bl	80062c0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	24000204 	.word	0x24000204

08002620 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <BDMA_Channel0_IRQHandler+0x10>)
 8002626:	f002 fc1f 	bl	8004e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	240003f8 	.word	0x240003f8

08002634 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <_sbrk+0x50>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x16>
		heap_end = &end;
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <_sbrk+0x50>)
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <_sbrk+0x54>)
 8002648:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <_sbrk+0x50>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <_sbrk+0x50>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	466a      	mov	r2, sp
 800265a:	4293      	cmp	r3, r2
 800265c:	d907      	bls.n	800266e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800265e:	f00e fc1b 	bl	8010e98 <__errno>
 8002662:	4602      	mov	r2, r0
 8002664:	230c      	movs	r3, #12
 8002666:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800266c:	e006      	b.n	800267c <_sbrk+0x48>
	}

	heap_end += incr;
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <_sbrk+0x50>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a03      	ldr	r2, [pc, #12]	; (8002684 <_sbrk+0x50>)
 8002678:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	24000160 	.word	0x24000160
 8002688:	24000998 	.word	0x24000998

0800268c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <SystemInit+0x9c>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <SystemInit+0x9c>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <SystemInit+0xa0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <SystemInit+0xa0>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <SystemInit+0xa0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <SystemInit+0xa0>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	491d      	ldr	r1, [pc, #116]	; (800272c <SystemInit+0xa0>)
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <SystemInit+0xa4>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <SystemInit+0xa0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <SystemInit+0xa0>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <SystemInit+0xa0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80026d0:	4b16      	ldr	r3, [pc, #88]	; (800272c <SystemInit+0xa0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <SystemInit+0xa0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <SystemInit+0xa0>)
 80026de:	2200      	movs	r2, #0
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <SystemInit+0xa0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <SystemInit+0xa0>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <SystemInit+0xa0>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <SystemInit+0xa0>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <SystemInit+0xa0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <SystemInit+0xa0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <SystemInit+0xa0>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <SystemInit+0xa0>)
 800270e:	2200      	movs	r2, #0
 8002710:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <SystemInit+0xa8>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

#if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
  SystemInit_ExtMemCtl();
 8002718:	f000 f80e 	bl	8002738 <SystemInit_ExtMemCtl>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <SystemInit+0x9c>)
 800271e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002722:	609a      	str	r2, [r3, #8]
#endif

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	e000ed00 	.word	0xe000ed00
 800272c:	58024400 	.word	0x58024400
 8002730:	eaf6ed7f 	.word	0xeaf6ed7f
 8002734:	51008108 	.word	0x51008108

08002738 <SystemInit_ExtMemCtl>:
  *         This SRAM/SDRAM will be used as program data memory (including heap and stack).
  * @param  None
  * @retval None
  */
void SystemInit_ExtMemCtl(void)
{
 8002738:	b4b0      	push	{r4, r5, r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
#if defined (DATA_IN_ExtSDRAM)
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
 800273e:	2400      	movs	r4, #0
 8002740:	f64f 75ff 	movw	r5, #65535	; 0xffff
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 8002744:	4b78      	ldr	r3, [pc, #480]	; (8002928 <SystemInit_ExtMemCtl+0x1f0>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274a:	4a77      	ldr	r2, [pc, #476]	; (8002928 <SystemInit_ExtMemCtl+0x1f0>)
 800274c:	f443 73fc 	orr.w	r3, r3, #504	; 0x1f8
 8002750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0]  = 0x000000CC;
 8002754:	4b75      	ldr	r3, [pc, #468]	; (800292c <SystemInit_ExtMemCtl+0x1f4>)
 8002756:	22cc      	movs	r2, #204	; 0xcc
 8002758:	621a      	str	r2, [r3, #32]
  GPIOD->AFR[1]  = 0xCC000CCC;
 800275a:	4b74      	ldr	r3, [pc, #464]	; (800292c <SystemInit_ExtMemCtl+0x1f4>)
 800275c:	4a74      	ldr	r2, [pc, #464]	; (8002930 <SystemInit_ExtMemCtl+0x1f8>)
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure PDx pins in Alternate function mode */
  GPIOD->MODER   = 0xAFEAFFFA;
 8002760:	4b72      	ldr	r3, [pc, #456]	; (800292c <SystemInit_ExtMemCtl+0x1f4>)
 8002762:	4a74      	ldr	r2, [pc, #464]	; (8002934 <SystemInit_ExtMemCtl+0x1fc>)
 8002764:	601a      	str	r2, [r3, #0]
  /* Configure PDx pins speed to 50 MHz */
  GPIOD->OSPEEDR = 0xA02A000A;
 8002766:	4b71      	ldr	r3, [pc, #452]	; (800292c <SystemInit_ExtMemCtl+0x1f4>)
 8002768:	4a73      	ldr	r2, [pc, #460]	; (8002938 <SystemInit_ExtMemCtl+0x200>)
 800276a:	609a      	str	r2, [r3, #8]
  /* Configure PDx pins Output type to push-pull */
  GPIOD->OTYPER  = 0x00000000;
 800276c:	4b6f      	ldr	r3, [pc, #444]	; (800292c <SystemInit_ExtMemCtl+0x1f4>)
 800276e:	2200      	movs	r2, #0
 8002770:	605a      	str	r2, [r3, #4]
  /* No pull-up, pull-down for PDx pins */
   GPIOD->PUPDR   = 0x55555505;
 8002772:	4b6e      	ldr	r3, [pc, #440]	; (800292c <SystemInit_ExtMemCtl+0x1f4>)
 8002774:	4a71      	ldr	r2, [pc, #452]	; (800293c <SystemInit_ExtMemCtl+0x204>)
 8002776:	60da      	str	r2, [r3, #12]
  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0]  = 0xC00000CC;
 8002778:	4b71      	ldr	r3, [pc, #452]	; (8002940 <SystemInit_ExtMemCtl+0x208>)
 800277a:	4a72      	ldr	r2, [pc, #456]	; (8002944 <SystemInit_ExtMemCtl+0x20c>)
 800277c:	621a      	str	r2, [r3, #32]
  GPIOE->AFR[1]  = 0xCCCCCCCC;
 800277e:	4b70      	ldr	r3, [pc, #448]	; (8002940 <SystemInit_ExtMemCtl+0x208>)
 8002780:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 8002784:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure PEx pins in Alternate function mode */
  GPIOE->MODER   = 0xAAAABFFA;
 8002786:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <SystemInit_ExtMemCtl+0x208>)
 8002788:	4a6f      	ldr	r2, [pc, #444]	; (8002948 <SystemInit_ExtMemCtl+0x210>)
 800278a:	601a      	str	r2, [r3, #0]
  /* Configure PEx pins speed to 50 MHz */
  GPIOE->OSPEEDR = 0xAAAA800A;
 800278c:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <SystemInit_ExtMemCtl+0x208>)
 800278e:	4a6f      	ldr	r2, [pc, #444]	; (800294c <SystemInit_ExtMemCtl+0x214>)
 8002790:	609a      	str	r2, [r3, #8]
  /* Configure PEx pins Output type to push-pull */
  GPIOE->OTYPER  = 0x00000000;
 8002792:	4b6b      	ldr	r3, [pc, #428]	; (8002940 <SystemInit_ExtMemCtl+0x208>)
 8002794:	2200      	movs	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
  /* No pull-up, pull-down for PEx pins */
  GPIOE->PUPDR   = 0x55554005;
 8002798:	4b69      	ldr	r3, [pc, #420]	; (8002940 <SystemInit_ExtMemCtl+0x208>)
 800279a:	4a6d      	ldr	r2, [pc, #436]	; (8002950 <SystemInit_ExtMemCtl+0x218>)
 800279c:	60da      	str	r2, [r3, #12]
  /* Connect PFx pins to FMC Alternate function */
  GPIOF->AFR[0]  = 0x00CCCCCC;
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <SystemInit_ExtMemCtl+0x21c>)
 80027a0:	4a6d      	ldr	r2, [pc, #436]	; (8002958 <SystemInit_ExtMemCtl+0x220>)
 80027a2:	621a      	str	r2, [r3, #32]
  GPIOF->AFR[1]  = 0xCCCCC000;
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <SystemInit_ExtMemCtl+0x21c>)
 80027a6:	4a6d      	ldr	r2, [pc, #436]	; (800295c <SystemInit_ExtMemCtl+0x224>)
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure PFx pins in Alternate function mode */
  GPIOF->MODER   = 0xAABFFAAA;
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <SystemInit_ExtMemCtl+0x21c>)
 80027ac:	4a6c      	ldr	r2, [pc, #432]	; (8002960 <SystemInit_ExtMemCtl+0x228>)
 80027ae:	601a      	str	r2, [r3, #0]
  /* Configure PFx pins speed to 50 MHz */
  GPIOF->OSPEEDR = 0xAA800AAA;
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <SystemInit_ExtMemCtl+0x21c>)
 80027b2:	4a6c      	ldr	r2, [pc, #432]	; (8002964 <SystemInit_ExtMemCtl+0x22c>)
 80027b4:	609a      	str	r2, [r3, #8]
  /* Configure PFx pins Output type to push-pull */
  GPIOF->OTYPER  = 0x00000000;
 80027b6:	4b67      	ldr	r3, [pc, #412]	; (8002954 <SystemInit_ExtMemCtl+0x21c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
  /* No pull-up, pull-down for PFx pins */
  GPIOF->PUPDR   = 0x55400555;
 80027bc:	4b65      	ldr	r3, [pc, #404]	; (8002954 <SystemInit_ExtMemCtl+0x21c>)
 80027be:	4a6a      	ldr	r2, [pc, #424]	; (8002968 <SystemInit_ExtMemCtl+0x230>)
 80027c0:	60da      	str	r2, [r3, #12]
  /* Connect PGx pins to FMC Alternate function */
  GPIOG->AFR[0]  = 0x00CCCCCC;
 80027c2:	4b6a      	ldr	r3, [pc, #424]	; (800296c <SystemInit_ExtMemCtl+0x234>)
 80027c4:	4a64      	ldr	r2, [pc, #400]	; (8002958 <SystemInit_ExtMemCtl+0x220>)
 80027c6:	621a      	str	r2, [r3, #32]
  GPIOG->AFR[1]  = 0xC000000C;
 80027c8:	4b68      	ldr	r3, [pc, #416]	; (800296c <SystemInit_ExtMemCtl+0x234>)
 80027ca:	4a69      	ldr	r2, [pc, #420]	; (8002970 <SystemInit_ExtMemCtl+0x238>)
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure PGx pins in Alternate function mode */
  GPIOG->MODER   = 0xBFFEFAAA;
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <SystemInit_ExtMemCtl+0x234>)
 80027d0:	4a68      	ldr	r2, [pc, #416]	; (8002974 <SystemInit_ExtMemCtl+0x23c>)
 80027d2:	601a      	str	r2, [r3, #0]
 /* Configure PGx pins speed to 50 MHz */
  GPIOG->OSPEEDR = 0x80020AAA;
 80027d4:	4b65      	ldr	r3, [pc, #404]	; (800296c <SystemInit_ExtMemCtl+0x234>)
 80027d6:	4a68      	ldr	r2, [pc, #416]	; (8002978 <SystemInit_ExtMemCtl+0x240>)
 80027d8:	609a      	str	r2, [r3, #8]
  /* Configure PGx pins Output type to push-pull */
  GPIOG->OTYPER  = 0x00000000;
 80027da:	4b64      	ldr	r3, [pc, #400]	; (800296c <SystemInit_ExtMemCtl+0x234>)
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
  /* No pull-up, pull-down for PGx pins */
  GPIOG->PUPDR   = 0x40010515;
 80027e0:	4b62      	ldr	r3, [pc, #392]	; (800296c <SystemInit_ExtMemCtl+0x234>)
 80027e2:	4a66      	ldr	r2, [pc, #408]	; (800297c <SystemInit_ExtMemCtl+0x244>)
 80027e4:	60da      	str	r2, [r3, #12]
  /* Connect PHx pins to FMC Alternate function */
  GPIOH->AFR[0]  = 0xCCC00000;
 80027e6:	4b66      	ldr	r3, [pc, #408]	; (8002980 <SystemInit_ExtMemCtl+0x248>)
 80027e8:	4a66      	ldr	r2, [pc, #408]	; (8002984 <SystemInit_ExtMemCtl+0x24c>)
 80027ea:	621a      	str	r2, [r3, #32]
  GPIOH->AFR[1]  = 0xCCCCCCCC;
 80027ec:	4b64      	ldr	r3, [pc, #400]	; (8002980 <SystemInit_ExtMemCtl+0x248>)
 80027ee:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure PHx pins in Alternate function mode */
  GPIOH->MODER   = 0xAAAAABFF;
 80027f4:	4b62      	ldr	r3, [pc, #392]	; (8002980 <SystemInit_ExtMemCtl+0x248>)
 80027f6:	4a64      	ldr	r2, [pc, #400]	; (8002988 <SystemInit_ExtMemCtl+0x250>)
 80027f8:	601a      	str	r2, [r3, #0]
  /* Configure PHx pins speed to 50 MHz */
  GPIOH->OSPEEDR = 0xAAAAA800;
 80027fa:	4b61      	ldr	r3, [pc, #388]	; (8002980 <SystemInit_ExtMemCtl+0x248>)
 80027fc:	4a63      	ldr	r2, [pc, #396]	; (800298c <SystemInit_ExtMemCtl+0x254>)
 80027fe:	609a      	str	r2, [r3, #8]
  /* Configure PHx pins Output type to push-pull */
  GPIOH->OTYPER  = 0x00000000;
 8002800:	4b5f      	ldr	r3, [pc, #380]	; (8002980 <SystemInit_ExtMemCtl+0x248>)
 8002802:	2200      	movs	r2, #0
 8002804:	605a      	str	r2, [r3, #4]
  /* No pull-up, pull-down for PHx pins */
  GPIOH->PUPDR   = 0x55555400;
 8002806:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <SystemInit_ExtMemCtl+0x248>)
 8002808:	4a61      	ldr	r2, [pc, #388]	; (8002990 <SystemInit_ExtMemCtl+0x258>)
 800280a:	60da      	str	r2, [r3, #12]
  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0]  = 0xCCCCCCCC;
 800280c:	4b61      	ldr	r3, [pc, #388]	; (8002994 <SystemInit_ExtMemCtl+0x25c>)
 800280e:	f04f 32cc 	mov.w	r2, #3435973836	; 0xcccccccc
 8002812:	621a      	str	r2, [r3, #32]
  GPIOI->AFR[1]  = 0x00000CC0;
 8002814:	4b5f      	ldr	r3, [pc, #380]	; (8002994 <SystemInit_ExtMemCtl+0x25c>)
 8002816:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure PIx pins in Alternate function mode */
  GPIOI->MODER   = 0xFFEBAAAA;
 800281c:	4b5d      	ldr	r3, [pc, #372]	; (8002994 <SystemInit_ExtMemCtl+0x25c>)
 800281e:	4a5e      	ldr	r2, [pc, #376]	; (8002998 <SystemInit_ExtMemCtl+0x260>)
 8002820:	601a      	str	r2, [r3, #0]
  /* Configure PIx pins speed to 50 MHz */
  GPIOI->OSPEEDR = 0x0028AAAA;
 8002822:	4b5c      	ldr	r3, [pc, #368]	; (8002994 <SystemInit_ExtMemCtl+0x25c>)
 8002824:	4a5d      	ldr	r2, [pc, #372]	; (800299c <SystemInit_ExtMemCtl+0x264>)
 8002826:	609a      	str	r2, [r3, #8]
  /* Configure PIx pins Output type to push-pull */
  GPIOI->OTYPER  = 0x00000000;
 8002828:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <SystemInit_ExtMemCtl+0x25c>)
 800282a:	2200      	movs	r2, #0
 800282c:	605a      	str	r2, [r3, #4]
  /* No pull-up, pull-down for PIx pins */
  GPIOI->PUPDR   = 0x00145555;
 800282e:	4b59      	ldr	r3, [pc, #356]	; (8002994 <SystemInit_ExtMemCtl+0x25c>)
 8002830:	4a5b      	ldr	r2, [pc, #364]	; (80029a0 <SystemInit_ExtMemCtl+0x268>)
 8002832:	60da      	str	r2, [r3, #12]
/*-- FMC Configuration ------------------------------------------------------*/
  /* Enable the FMC interface clock */
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8002834:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <SystemInit_ExtMemCtl+0x1f0>)
 8002836:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800283a:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <SystemInit_ExtMemCtl+0x1f0>)
 800283c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002840:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8002844:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 8002846:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800284a:	601a      	str	r2, [r3, #0]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 800284c:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 800284e:	f240 1265 	movw	r2, #357	; 0x165
 8002852:	605a      	str	r2, [r3, #4]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 8002856:	4a54      	ldr	r2, [pc, #336]	; (80029a8 <SystemInit_ExtMemCtl+0x270>)
 8002858:	609a      	str	r2, [r3, #8]
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 800285a:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 800285c:	4a53      	ldr	r2, [pc, #332]	; (80029ac <SystemInit_ExtMemCtl+0x274>)
 800285e:	60da      	str	r2, [r3, #12]

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 8002862:	2209      	movs	r2, #9
 8002864:	611a      	str	r2, [r3, #16]
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8002866:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0420 	and.w	r4, r3, #32
  while((tmpreg != 0) && (timeout-- > 0))
 800286e:	e003      	b.n	8002878 <SystemInit_ExtMemCtl+0x140>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0420 	and.w	r4, r3, #32
  while((tmpreg != 0) && (timeout-- > 0))
 8002878:	2c00      	cmp	r4, #0
 800287a:	d003      	beq.n	8002884 <SystemInit_ExtMemCtl+0x14c>
 800287c:	462b      	mov	r3, r5
 800287e:	1e5d      	subs	r5, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f5      	bne.n	8002870 <SystemInit_ExtMemCtl+0x138>
  }

  /* Delay */
  for (index = 0; index<1000; index++);
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	e002      	b.n	8002890 <SystemInit_ExtMemCtl+0x158>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3301      	adds	r3, #1
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002896:	d3f8      	bcc.n	800288a <SystemInit_ExtMemCtl+0x152>

  /* PALL command */
    FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 800289a:	220a      	movs	r2, #10
 800289c:	611a      	str	r2, [r3, #16]
  timeout = 0xFFFF;
 800289e:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while((tmpreg != 0) && (timeout-- > 0))
 80028a2:	e003      	b.n	80028ac <SystemInit_ExtMemCtl+0x174>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0420 	and.w	r4, r3, #32
  while((tmpreg != 0) && (timeout-- > 0))
 80028ac:	2c00      	cmp	r4, #0
 80028ae:	d003      	beq.n	80028b8 <SystemInit_ExtMemCtl+0x180>
 80028b0:	462b      	mov	r3, r5
 80028b2:	1e5d      	subs	r5, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f5      	bne.n	80028a4 <SystemInit_ExtMemCtl+0x16c>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 80028ba:	22eb      	movs	r2, #235	; 0xeb
 80028bc:	611a      	str	r2, [r3, #16]
  timeout = 0xFFFF;
 80028be:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while((tmpreg != 0) && (timeout-- > 0))
 80028c2:	e003      	b.n	80028cc <SystemInit_ExtMemCtl+0x194>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80028c4:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0420 	and.w	r4, r3, #32
  while((tmpreg != 0) && (timeout-- > 0))
 80028cc:	2c00      	cmp	r4, #0
 80028ce:	d003      	beq.n	80028d8 <SystemInit_ExtMemCtl+0x1a0>
 80028d0:	462b      	mov	r3, r5
 80028d2:	1e5d      	subs	r5, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f5      	bne.n	80028c4 <SystemInit_ExtMemCtl+0x18c>
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 80028da:	4a35      	ldr	r2, [pc, #212]	; (80029b0 <SystemInit_ExtMemCtl+0x278>)
 80028dc:	611a      	str	r2, [r3, #16]
  timeout = 0xFFFF;
 80028de:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while((tmpreg != 0) && (timeout-- > 0))
 80028e2:	e003      	b.n	80028ec <SystemInit_ExtMemCtl+0x1b4>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80028e4:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0420 	and.w	r4, r3, #32
  while((tmpreg != 0) && (timeout-- > 0))
 80028ec:	2c00      	cmp	r4, #0
 80028ee:	d003      	beq.n	80028f8 <SystemInit_ExtMemCtl+0x1c0>
 80028f0:	462b      	mov	r3, r5
 80028f2:	1e5d      	subs	r5, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f5      	bne.n	80028e4 <SystemInit_ExtMemCtl+0x1ac>
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 80028f8:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 80028fa:	695c      	ldr	r4, [r3, #20]
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603<<1));
 80028fc:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 80028fe:	f640 4306 	movw	r3, #3078	; 0xc06
 8002902:	4323      	orrs	r3, r4
 8002904:	6153      	str	r3, [r2, #20]

  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 8002908:	685c      	ldr	r4, [r3, #4]
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 800290a:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <SystemInit_ExtMemCtl+0x26c>)
 800290c:	f424 7300 	bic.w	r3, r4, #512	; 0x200
 8002910:	6053      	str	r3, [r2, #4]

   /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0]  |= 0x80000000;
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <SystemInit_ExtMemCtl+0x27c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <SystemInit_ExtMemCtl+0x27c>)
 8002918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800291c:	6013      	str	r3, [r2, #0]
  /*FMC controller Enable*/
  FMC_Bank1->BTCR[0]  |= 0x80000000;


#endif /* DATA_IN_ExtSRAM */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bcb0      	pop	{r4, r5, r7}
 8002926:	4770      	bx	lr
 8002928:	58024400 	.word	0x58024400
 800292c:	58020c00 	.word	0x58020c00
 8002930:	cc000ccc 	.word	0xcc000ccc
 8002934:	afeafffa 	.word	0xafeafffa
 8002938:	a02a000a 	.word	0xa02a000a
 800293c:	55555505 	.word	0x55555505
 8002940:	58021000 	.word	0x58021000
 8002944:	c00000cc 	.word	0xc00000cc
 8002948:	aaaabffa 	.word	0xaaaabffa
 800294c:	aaaa800a 	.word	0xaaaa800a
 8002950:	55554005 	.word	0x55554005
 8002954:	58021400 	.word	0x58021400
 8002958:	00cccccc 	.word	0x00cccccc
 800295c:	ccccc000 	.word	0xccccc000
 8002960:	aabffaaa 	.word	0xaabffaaa
 8002964:	aa800aaa 	.word	0xaa800aaa
 8002968:	55400555 	.word	0x55400555
 800296c:	58021800 	.word	0x58021800
 8002970:	c000000c 	.word	0xc000000c
 8002974:	bffefaaa 	.word	0xbffefaaa
 8002978:	80020aaa 	.word	0x80020aaa
 800297c:	40010515 	.word	0x40010515
 8002980:	58021c00 	.word	0x58021c00
 8002984:	ccc00000 	.word	0xccc00000
 8002988:	aaaaabff 	.word	0xaaaaabff
 800298c:	aaaaa800 	.word	0xaaaaa800
 8002990:	55555400 	.word	0x55555400
 8002994:	58022000 	.word	0x58022000
 8002998:	ffebaaaa 	.word	0xffebaaaa
 800299c:	0028aaaa 	.word	0x0028aaaa
 80029a0:	00145555 	.word	0x00145555
 80029a4:	52004140 	.word	0x52004140
 80029a8:	00105000 	.word	0x00105000
 80029ac:	01010351 	.word	0x01010351
 80029b0:	0004400c 	.word	0x0004400c
 80029b4:	52004000 	.word	0x52004000

080029b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029be:	e003      	b.n	80029c8 <LoopCopyDataInit>

080029c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029c6:	3104      	adds	r1, #4

080029c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029c8:	480b      	ldr	r0, [pc, #44]	; (80029f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029d0:	d3f6      	bcc.n	80029c0 <CopyDataInit>
  ldr  r2, =_sbss
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029d4:	e002      	b.n	80029dc <LoopFillZerobss>

080029d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029d8:	f842 3b04 	str.w	r3, [r2], #4

080029dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029e0:	d3f9      	bcc.n	80029d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029e2:	f7ff fe53 	bl	800268c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e6:	f00e fa5d 	bl	8010ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ea:	f7fd fe55 	bl	8000698 <main>
  bx  lr    
 80029ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80029f4:	080110e4 	.word	0x080110e4
  ldr  r0, =_sdata
 80029f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80029fc:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8002a00:	24000134 	.word	0x24000134
  ldr  r3, = _ebss
 8002a04:	24000994 	.word	0x24000994

08002a08 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a08:	e7fe      	b.n	8002a08 <ADC3_IRQHandler>
	...

08002a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a10:	2003      	movs	r0, #3
 8002a12:	f001 f96e 	bl	8003cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a16:	f006 fa6d 	bl	8008ef4 <HAL_RCC_GetSysClockFreq>
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_Init+0x60>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <HAL_Init+0x64>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_Init+0x68>)
 8002a34:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_Init+0x68>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_Init+0x60>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	490b      	ldr	r1, [pc, #44]	; (8002a70 <HAL_Init+0x64>)
 8002a44:	5ccb      	ldrb	r3, [r1, r3]
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_Init+0x6c>)
 8002a50:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7ff fcfc 	bl	8002450 <HAL_InitTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e002      	b.n	8002a68 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a62:	f7fe fdd5 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	58024400 	.word	0x58024400
 8002a70:	080110bc 	.word	0x080110bc
 8002a74:	24000000 	.word	0x24000000
 8002a78:	24000004 	.word	0x24000004

08002a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2400000c 	.word	0x2400000c
 8002aa0:	2400098c 	.word	0x2400098c

08002aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	2400098c 	.word	0x2400098c

08002abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_Delay+0x40>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	2400000c 	.word	0x2400000c

08002b00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_GetREVID+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0c1b      	lsrs	r3, r3, #16
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	5c001000 	.word	0x5c001000

08002b18 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b28:	4904      	ldr	r1, [pc, #16]	; (8002b3c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	58000400 	.word	0x58000400

08002b40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ba8:	b490      	push	{r4, r7}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3360      	adds	r3, #96	; 0x60
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc90      	pop	{r4, r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	431a      	orrs	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	611a      	str	r2, [r3, #16]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c14:	b490      	push	{r4, r7}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3360      	adds	r3, #96	; 0x60
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	6023      	str	r3, [r4, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc90      	pop	{r4, r7}
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c44:	b490      	push	{r4, r7}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3330      	adds	r3, #48	; 0x30
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	4413      	add	r3, r2
 8002c62:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002c64:	6822      	ldr	r2, [r4, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	211f      	movs	r1, #31
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	f003 011f 	and.w	r1, r3, #31
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc90      	pop	{r4, r7}
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c96:	b490      	push	{r4, r7}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	0e5b      	lsrs	r3, r3, #25
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0d1b      	lsrs	r3, r3, #20
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2107      	movs	r1, #7
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	401a      	ands	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	0d1b      	lsrs	r3, r3, #20
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc90      	pop	{r4, r7}
 8002ce4:	4770      	bx	lr
	...

08002ce8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0318 	and.w	r3, r3, #24
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d0c:	40d9      	lsrs	r1, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	400b      	ands	r3, r1
 8002d12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	000fffff 	.word	0x000fffff

08002d30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6093      	str	r3, [r2, #8]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	5fffffc0 	.word	0x5fffffc0

08002d54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	6fffffc0 	.word	0x6fffffc0

08002da4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <LL_ADC_IsEnabled+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_ADC_IsEnabled+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e18e      	b.n	8003178 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe fbeb 	bl	8001644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff67 	bl	8002d54 <LL_ADC_IsDeepPowerDownEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff4d 	bl	8002d30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff82 	bl	8002da4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d113      	bne.n	8002ece <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff66 	bl	8002d7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002eb0:	4b9a      	ldr	r3, [pc, #616]	; (800311c <HAL_ADC_Init+0x2dc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	4a9a      	ldr	r2, [pc, #616]	; (8003120 <HAL_ADC_Init+0x2e0>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ec0:	e002      	b.n	8002ec8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f9      	bne.n	8002ec2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff66 	bl	8002da4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff77 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8129 	bne.w	8003166 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 8125 	bne.w	8003166 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f24:	f043 0202 	orr.w	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff4b 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d136      	bne.n	8002faa <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a78      	ldr	r2, [pc, #480]	; (8003124 <HAL_ADC_Init+0x2e4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_ADC_Init+0x110>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a77      	ldr	r2, [pc, #476]	; (8003128 <HAL_ADC_Init+0x2e8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10e      	bne.n	8002f6e <HAL_ADC_Init+0x12e>
 8002f50:	4874      	ldr	r0, [pc, #464]	; (8003124 <HAL_ADC_Init+0x2e4>)
 8002f52:	f7ff ff3b 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f56:	4604      	mov	r4, r0
 8002f58:	4873      	ldr	r0, [pc, #460]	; (8003128 <HAL_ADC_Init+0x2e8>)
 8002f5a:	f7ff ff37 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4323      	orrs	r3, r4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e008      	b.n	8002f80 <HAL_ADC_Init+0x140>
 8002f6e:	486f      	ldr	r0, [pc, #444]	; (800312c <HAL_ADC_Init+0x2ec>)
 8002f70:	f7ff ff2c 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a66      	ldr	r2, [pc, #408]	; (8003124 <HAL_ADC_Init+0x2e4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_ADC_Init+0x158>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a65      	ldr	r2, [pc, #404]	; (8003128 <HAL_ADC_Init+0x2e8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_Init+0x15c>
 8002f98:	4a65      	ldr	r2, [pc, #404]	; (8003130 <HAL_ADC_Init+0x2f0>)
 8002f9a:	e000      	b.n	8002f9e <HAL_ADC_Init+0x15e>
 8002f9c:	4a65      	ldr	r2, [pc, #404]	; (8003134 <HAL_ADC_Init+0x2f4>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7ff fdcb 	bl	8002b40 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002faa:	f7ff fda9 	bl	8002b00 <HAL_GetREVID>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d914      	bls.n	8002fe2 <HAL_ADC_Init+0x1a2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d110      	bne.n	8002fe2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7d5b      	ldrb	r3, [r3, #21]
 8002fc4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002fd0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7f1b      	ldrb	r3, [r3, #28]
 8002fd6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002fd8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fda:	f043 030c 	orr.w	r3, r3, #12
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e00d      	b.n	8002ffe <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7d5b      	ldrb	r3, [r3, #21]
 8002fe6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ff2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7f1b      	ldrb	r3, [r3, #28]
 8002ff8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7f1b      	ldrb	r3, [r3, #28]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d106      	bne.n	8003014 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	3b01      	subs	r3, #1
 800300c:	045b      	lsls	r3, r3, #17
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	4b40      	ldr	r3, [pc, #256]	; (8003138 <HAL_ADC_Init+0x2f8>)
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	430b      	orrs	r3, r1
 8003042:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fed2 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 800304e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fedf 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 800305a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d14a      	bne.n	80030f8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d147      	bne.n	80030f8 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	7d1b      	ldrb	r3, [r3, #20]
 800306c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_ADC_Init+0x2fc>)
 800307e:	4013      	ands	r3, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	69b9      	ldr	r1, [r7, #24]
 8003086:	430b      	orrs	r3, r1
 8003088:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003090:	2b01      	cmp	r3, #1
 8003092:	d11b      	bne.n	80030cc <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_ADC_Init+0x300>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030a8:	3a01      	subs	r2, #1
 80030aa:	0411      	lsls	r1, r2, #16
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030bc:	430a      	orrs	r2, r1
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	611a      	str	r2, [r3, #16]
 80030ca:	e007      	b.n	80030dc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fb58 	bl	80037a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d121      	bne.n	8003144 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f023 010f 	bic.w	r1, r3, #15
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
 8003118:	e01c      	b.n	8003154 <HAL_ADC_Init+0x314>
 800311a:	bf00      	nop
 800311c:	24000000 	.word	0x24000000
 8003120:	053e2d63 	.word	0x053e2d63
 8003124:	40022000 	.word	0x40022000
 8003128:	40022100 	.word	0x40022100
 800312c:	58026000 	.word	0x58026000
 8003130:	40022300 	.word	0x40022300
 8003134:	58026300 	.word	0x58026300
 8003138:	fff0c003 	.word	0xfff0c003
 800313c:	ffffbffc 	.word	0xffffbffc
 8003140:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 020f 	bic.w	r2, r2, #15
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f023 0303 	bic.w	r3, r3, #3
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
 8003164:	e007      	b.n	8003176 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f043 0210 	orr.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003176:	7ffb      	ldrb	r3, [r7, #31]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3724      	adds	r7, #36	; 0x24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd90      	pop	{r4, r7, pc}

08003180 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b099      	sub	sp, #100	; 0x64
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a99      	ldr	r2, [pc, #612]	; (8003400 <HAL_ADC_ConfigChannel+0x280>)
 800319a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x2a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e2e6      	b.n	8003778 <HAL_ADC_ConfigChannel+0x5f8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fe1b 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 82cb 	bne.w	800375a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x62>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2201      	movs	r2, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	e00f      	b.n	8003202 <HAL_ADC_ConfigChannel+0x82>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2201      	movs	r2, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	69d1      	ldr	r1, [r2, #28]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	f7ff fd11 	bl	8002c44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fde3 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 800322c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fdf0 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 8003238:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800323a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 80b3 	bne.w	80033a8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 80af 	bne.w	80033a8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	461a      	mov	r2, r3
 8003258:	f7ff fd1d 	bl	8002c96 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800325c:	4b69      	ldr	r3, [pc, #420]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003268:	d10b      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x102>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	e01d      	b.n	80032be <HAL_ADC_ConfigChannel+0x13e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x128>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	e00a      	b.n	80032be <HAL_ADC_ConfigChannel+0x13e>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d027      	beq.n	8003318 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6919      	ldr	r1, [r3, #16]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d6:	f7ff fc67 	bl	8002ba8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6919      	ldr	r1, [r3, #16]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	7e5b      	ldrb	r3, [r3, #25]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x170>
 80032ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032ee:	e000      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x172>
 80032f0:	2300      	movs	r3, #0
 80032f2:	461a      	mov	r2, r3
 80032f4:	f7ff fc8e 	bl	8002c14 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6919      	ldr	r1, [r3, #16]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	7e1b      	ldrb	r3, [r3, #24]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d102      	bne.n	800330e <HAL_ADC_ConfigChannel+0x18e>
 8003308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800330c:	e000      	b.n	8003310 <HAL_ADC_ConfigChannel+0x190>
 800330e:	2300      	movs	r3, #0
 8003310:	461a      	mov	r2, r3
 8003312:	f7ff fc66 	bl	8002be2 <LL_ADC_SetDataRightShift>
 8003316:	e047      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	069b      	lsls	r3, r3, #26
 8003328:	429a      	cmp	r2, r3
 800332a:	d107      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800333a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	069b      	lsls	r3, r3, #26
 800334c:	429a      	cmp	r2, r3
 800334e:	d107      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800335e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	069b      	lsls	r3, r3, #26
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003382:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	069b      	lsls	r3, r3, #26
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fd0d 	bl	8002dcc <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 81d9 	bne.w	800376c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7ff fc8e 	bl	8002ce8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <HAL_ADC_ConfigChannel+0x280>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f040 8101 	bne.w	80035da <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x288>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e9b      	lsrs	r3, r3, #26
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	bf94      	ite	ls
 80033f8:	2301      	movls	r3, #1
 80033fa:	2300      	movhi	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e016      	b.n	800342e <HAL_ADC_ConfigChannel+0x2ae>
 8003400:	47ff0000 	.word	0x47ff0000
 8003404:	5c001000 	.word	0x5c001000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2b09      	cmp	r3, #9
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342e:	2b00      	cmp	r3, #0
 8003430:	d064      	beq.n	80034fc <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800343a:	2b00      	cmp	r3, #0
 800343c:	d107      	bne.n	800344e <HAL_ADC_ConfigChannel+0x2ce>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0e9b      	lsrs	r3, r3, #26
 8003444:	3301      	adds	r3, #1
 8003446:	069b      	lsls	r3, r3, #26
 8003448:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800344c:	e00e      	b.n	800346c <HAL_ADC_ConfigChannel+0x2ec>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	3301      	adds	r3, #1
 8003466:	069b      	lsls	r3, r3, #26
 8003468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_ADC_ConfigChannel+0x30c>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	3301      	adds	r3, #1
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	e010      	b.n	80034ae <HAL_ADC_ConfigChannel+0x32e>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	ea42 0103 	orr.w	r1, r2, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x354>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	0e9b      	lsrs	r3, r3, #26
 80034c4:	3301      	adds	r3, #1
 80034c6:	f003 021f 	and.w	r2, r3, #31
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	051b      	lsls	r3, r3, #20
 80034d2:	e011      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x378>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f8:	430b      	orrs	r3, r1
 80034fa:	e069      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x398>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	3301      	adds	r3, #1
 8003510:	069b      	lsls	r3, r3, #26
 8003512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003516:	e00e      	b.n	8003536 <HAL_ADC_ConfigChannel+0x3b6>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	61fb      	str	r3, [r7, #28]
  return result;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	3301      	adds	r3, #1
 8003530:	069b      	lsls	r3, r3, #26
 8003532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x3d6>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	0e9b      	lsrs	r3, r3, #26
 8003548:	3301      	adds	r3, #1
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2101      	movs	r1, #1
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	e010      	b.n	8003578 <HAL_ADC_ConfigChannel+0x3f8>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	617b      	str	r3, [r7, #20]
  return result;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	ea42 0103 	orr.w	r1, r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x424>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	3301      	adds	r3, #1
 8003590:	f003 021f 	and.w	r2, r3, #31
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	3b1e      	subs	r3, #30
 800359c:	051b      	lsls	r3, r3, #20
 800359e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035a2:	e014      	b.n	80035ce <HAL_ADC_ConfigChannel+0x44e>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	60fb      	str	r3, [r7, #12]
  return result;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	3b1e      	subs	r3, #30
 80035c8:	051b      	lsls	r3, r3, #20
 80035ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ce:	430b      	orrs	r3, r1
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	6892      	ldr	r2, [r2, #8]
 80035d4:	4619      	mov	r1, r3
 80035d6:	f7ff fb5e 	bl	8002c96 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f280 80c4 	bge.w	800376c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_ADC_ConfigChannel+0x600>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_ADC_ConfigChannel+0x478>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a64      	ldr	r2, [pc, #400]	; (8003784 <HAL_ADC_ConfigChannel+0x604>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x47c>
 80035f8:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_ADC_ConfigChannel+0x608>)
 80035fa:	e000      	b.n	80035fe <HAL_ADC_ConfigChannel+0x47e>
 80035fc:	4b63      	ldr	r3, [pc, #396]	; (800378c <HAL_ADC_ConfigChannel+0x60c>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fac4 	bl	8002b8c <LL_ADC_GetCommonPathInternalCh>
 8003604:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a5d      	ldr	r2, [pc, #372]	; (8003780 <HAL_ADC_ConfigChannel+0x600>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_ADC_ConfigChannel+0x49a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a5b      	ldr	r2, [pc, #364]	; (8003784 <HAL_ADC_ConfigChannel+0x604>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10e      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x4b8>
 800361a:	4859      	ldr	r0, [pc, #356]	; (8003780 <HAL_ADC_ConfigChannel+0x600>)
 800361c:	f7ff fbd6 	bl	8002dcc <LL_ADC_IsEnabled>
 8003620:	4604      	mov	r4, r0
 8003622:	4858      	ldr	r0, [pc, #352]	; (8003784 <HAL_ADC_ConfigChannel+0x604>)
 8003624:	f7ff fbd2 	bl	8002dcc <LL_ADC_IsEnabled>
 8003628:	4603      	mov	r3, r0
 800362a:	4323      	orrs	r3, r4
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e008      	b.n	800364a <HAL_ADC_ConfigChannel+0x4ca>
 8003638:	4855      	ldr	r0, [pc, #340]	; (8003790 <HAL_ADC_ConfigChannel+0x610>)
 800363a:	f7ff fbc7 	bl	8002dcc <LL_ADC_IsEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d07b      	beq.n	8003746 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a50      	ldr	r2, [pc, #320]	; (8003794 <HAL_ADC_ConfigChannel+0x614>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d12e      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x536>
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d129      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4a      	ldr	r2, [pc, #296]	; (8003790 <HAL_ADC_ConfigChannel+0x610>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d17f      	bne.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a43      	ldr	r2, [pc, #268]	; (8003780 <HAL_ADC_ConfigChannel+0x600>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_ADC_ConfigChannel+0x500>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a42      	ldr	r2, [pc, #264]	; (8003784 <HAL_ADC_ConfigChannel+0x604>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x504>
 8003680:	4a41      	ldr	r2, [pc, #260]	; (8003788 <HAL_ADC_ConfigChannel+0x608>)
 8003682:	e000      	b.n	8003686 <HAL_ADC_ConfigChannel+0x506>
 8003684:	4a41      	ldr	r2, [pc, #260]	; (800378c <HAL_ADC_ConfigChannel+0x60c>)
 8003686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f7ff fa69 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <HAL_ADC_ConfigChannel+0x618>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	4a40      	ldr	r2, [pc, #256]	; (800379c <HAL_ADC_ConfigChannel+0x61c>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80036a6:	e002      	b.n	80036ae <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f9      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b4:	e05a      	b.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a39      	ldr	r2, [pc, #228]	; (80037a0 <HAL_ADC_ConfigChannel+0x620>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d11e      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x57e>
 80036c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d119      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a30      	ldr	r2, [pc, #192]	; (8003790 <HAL_ADC_ConfigChannel+0x610>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d14b      	bne.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HAL_ADC_ConfigChannel+0x600>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_ADC_ConfigChannel+0x568>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a28      	ldr	r2, [pc, #160]	; (8003784 <HAL_ADC_ConfigChannel+0x604>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x56c>
 80036e8:	4a27      	ldr	r2, [pc, #156]	; (8003788 <HAL_ADC_ConfigChannel+0x608>)
 80036ea:	e000      	b.n	80036ee <HAL_ADC_ConfigChannel+0x56e>
 80036ec:	4a27      	ldr	r2, [pc, #156]	; (800378c <HAL_ADC_ConfigChannel+0x60c>)
 80036ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f7ff fa35 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036fc:	e036      	b.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <HAL_ADC_ConfigChannel+0x624>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d131      	bne.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
 8003708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d12c      	bne.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1e      	ldr	r2, [pc, #120]	; (8003790 <HAL_ADC_ConfigChannel+0x610>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d127      	bne.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_ADC_ConfigChannel+0x600>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_ADC_ConfigChannel+0x5b0>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_ADC_ConfigChannel+0x604>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x5b4>
 8003730:	4a15      	ldr	r2, [pc, #84]	; (8003788 <HAL_ADC_ConfigChannel+0x608>)
 8003732:	e000      	b.n	8003736 <HAL_ADC_ConfigChannel+0x5b6>
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <HAL_ADC_ConfigChannel+0x60c>)
 8003736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f7ff fa11 	bl	8002b66 <LL_ADC_SetCommonPathInternalCh>
 8003744:	e012      	b.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003758:	e008      	b.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003778:	4618      	mov	r0, r3
 800377a:	3764      	adds	r7, #100	; 0x64
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	40022000 	.word	0x40022000
 8003784:	40022100 	.word	0x40022100
 8003788:	40022300 	.word	0x40022300
 800378c:	58026300 	.word	0x58026300
 8003790:	58026000 	.word	0x58026000
 8003794:	cb840000 	.word	0xcb840000
 8003798:	24000000 	.word	0x24000000
 800379c:	053e2d63 	.word	0x053e2d63
 80037a0:	c7520000 	.word	0xc7520000
 80037a4:	cfb80000 	.word	0xcfb80000

080037a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a70      	ldr	r2, [pc, #448]	; (8003978 <ADC_ConfigureBoostMode+0x1d0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <ADC_ConfigureBoostMode+0x1c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6f      	ldr	r2, [pc, #444]	; (800397c <ADC_ConfigureBoostMode+0x1d4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d109      	bne.n	80037d8 <ADC_ConfigureBoostMode+0x30>
 80037c4:	4b6e      	ldr	r3, [pc, #440]	; (8003980 <ADC_ConfigureBoostMode+0x1d8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e008      	b.n	80037ea <ADC_ConfigureBoostMode+0x42>
 80037d8:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <ADC_ConfigureBoostMode+0x1dc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01a      	beq.n	8003824 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80037ee:	f005 fcf3 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 80037f2:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037fc:	d006      	beq.n	800380c <ADC_ConfigureBoostMode+0x64>
 80037fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003802:	d00b      	beq.n	800381c <ADC_ConfigureBoostMode+0x74>
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d000      	beq.n	800380c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800380a:	e05d      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	60fb      	str	r3, [r7, #12]
        break;
 800381a:	e055      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	089b      	lsrs	r3, r3, #2
 8003820:	60fb      	str	r3, [r7, #12]
        break;
 8003822:	e051      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003824:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003828:	f006 fc3e 	bl	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800382c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003836:	d02a      	beq.n	800388e <ADC_ConfigureBoostMode+0xe6>
 8003838:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800383c:	d813      	bhi.n	8003866 <ADC_ConfigureBoostMode+0xbe>
 800383e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003842:	d024      	beq.n	800388e <ADC_ConfigureBoostMode+0xe6>
 8003844:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003848:	d806      	bhi.n	8003858 <ADC_ConfigureBoostMode+0xb0>
 800384a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800384e:	d01e      	beq.n	800388e <ADC_ConfigureBoostMode+0xe6>
 8003850:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003854:	d01b      	beq.n	800388e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003856:	e037      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385c:	d017      	beq.n	800388e <ADC_ConfigureBoostMode+0xe6>
 800385e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003862:	d014      	beq.n	800388e <ADC_ConfigureBoostMode+0xe6>
        break;
 8003864:	e030      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003866:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800386a:	d021      	beq.n	80038b0 <ADC_ConfigureBoostMode+0x108>
 800386c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003870:	d806      	bhi.n	8003880 <ADC_ConfigureBoostMode+0xd8>
 8003872:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003876:	d013      	beq.n	80038a0 <ADC_ConfigureBoostMode+0xf8>
 8003878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800387c:	d014      	beq.n	80038a8 <ADC_ConfigureBoostMode+0x100>
        break;
 800387e:	e023      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003880:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003884:	d018      	beq.n	80038b8 <ADC_ConfigureBoostMode+0x110>
 8003886:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800388a:	d019      	beq.n	80038c0 <ADC_ConfigureBoostMode+0x118>
        break;
 800388c:	e01c      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	0c9b      	lsrs	r3, r3, #18
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	60fb      	str	r3, [r7, #12]
        break;
 800389e:	e013      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
      break;
 80038a6:	e00f      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	60fb      	str	r3, [r7, #12]
        break;
 80038ae:	e00b      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	60fb      	str	r3, [r7, #12]
        break;
 80038b6:	e007      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	09db      	lsrs	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]
        break;
 80038be:	e003      	b.n	80038c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	60fb      	str	r3, [r7, #12]
        break;
 80038c6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80038c8:	f7ff f91a 	bl	8002b00 <HAL_GetREVID>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d815      	bhi.n	8003902 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a2b      	ldr	r2, [pc, #172]	; (8003988 <ADC_ConfigureBoostMode+0x1e0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d908      	bls.n	80038f0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ec:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80038ee:	e03e      	b.n	800396e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fe:	609a      	str	r2, [r3, #8]
}
 8003900:	e035      	b.n	800396e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a20      	ldr	r2, [pc, #128]	; (800398c <ADC_ConfigureBoostMode+0x1e4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d808      	bhi.n	8003922 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	e025      	b.n	800396e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <ADC_ConfigureBoostMode+0x1e8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d80a      	bhi.n	8003940 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393c:	609a      	str	r2, [r3, #8]
}
 800393e:	e016      	b.n	800396e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a14      	ldr	r2, [pc, #80]	; (8003994 <ADC_ConfigureBoostMode+0x1ec>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d80a      	bhi.n	800395e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	e007      	b.n	800396e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40022000 	.word	0x40022000
 800397c:	40022100 	.word	0x40022100
 8003980:	40022300 	.word	0x40022300
 8003984:	58026300 	.word	0x58026300
 8003988:	01312d00 	.word	0x01312d00
 800398c:	005f5e10 	.word	0x005f5e10
 8003990:	00bebc20 	.word	0x00bebc20
 8003994:	017d7840 	.word	0x017d7840

08003998 <LL_ADC_IsEnabled>:
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <LL_ADC_IsEnabled+0x18>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <LL_ADC_IsEnabled+0x1a>
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_ADC_REG_IsConversionOngoing>:
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d101      	bne.n	80039d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b09f      	sub	sp, #124	; 0x7c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0ba      	b.n	8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5c      	ldr	r2, [pc, #368]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d102      	bne.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003a14:	4b5b      	ldr	r3, [pc, #364]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	e001      	b.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e09d      	b.n	8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ffbd 	bl	80039be <LL_ADC_REG_IsConversionOngoing>
 8003a44:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ffb7 	bl	80039be <LL_ADC_REG_IsConversionOngoing>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d17f      	bne.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d17c      	bne.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a47      	ldr	r2, [pc, #284]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a46      	ldr	r2, [pc, #280]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003a70:	4b45      	ldr	r3, [pc, #276]	; (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a72:	e000      	b.n	8003a76 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003a74:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a76:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d039      	beq.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3a      	ldr	r2, [pc, #232]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a38      	ldr	r2, [pc, #224]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003aa6:	4836      	ldr	r0, [pc, #216]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003aa8:	f7ff ff76 	bl	8003998 <LL_ADC_IsEnabled>
 8003aac:	4604      	mov	r4, r0
 8003aae:	4835      	ldr	r0, [pc, #212]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003ab0:	f7ff ff72 	bl	8003998 <LL_ADC_IsEnabled>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4323      	orrs	r3, r4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e008      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003ac4:	4832      	ldr	r0, [pc, #200]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ac6:	f7ff ff67 	bl	8003998 <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d047      	beq.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	6811      	ldr	r1, [r2, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	6892      	ldr	r2, [r2, #8]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	431a      	orrs	r2, r3
 8003aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af2:	e03a      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10e      	bne.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003b14:	481a      	ldr	r0, [pc, #104]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003b16:	f7ff ff3f 	bl	8003998 <LL_ADC_IsEnabled>
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4819      	ldr	r0, [pc, #100]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003b1e:	f7ff ff3b 	bl	8003998 <LL_ADC_IsEnabled>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4323      	orrs	r3, r4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e008      	b.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003b32:	4817      	ldr	r0, [pc, #92]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b34:	f7ff ff30 	bl	8003998 <LL_ADC_IsEnabled>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	2300      	movne	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b52:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b54:	e009      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003b68:	e000      	b.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	377c      	adds	r7, #124	; 0x7c
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd90      	pop	{r4, r7, pc}
 8003b80:	40022000 	.word	0x40022000
 8003b84:	40022100 	.word	0x40022100
 8003b88:	40022300 	.word	0x40022300
 8003b8c:	58026300 	.word	0x58026300
 8003b90:	58026000 	.word	0x58026000
 8003b94:	fffff0e0 	.word	0xfffff0e0

08003b98 <__NVIC_SetPriorityGrouping>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc6:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	60d3      	str	r3, [r2, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00
 8003bdc:	05fa0000 	.word	0x05fa0000

08003be0 <__NVIC_GetPriorityGrouping>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0307 	and.w	r3, r3, #7
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_EnableIRQ>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db0b      	blt.n	8003c26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4907      	ldr	r1, [pc, #28]	; (8003c34 <__NVIC_EnableIRQ+0x38>)
 8003c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000e100 	.word	0xe000e100

08003c38 <__NVIC_SetPriority>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db0a      	blt.n	8003c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	490c      	ldr	r1, [pc, #48]	; (8003c84 <__NVIC_SetPriority+0x4c>)
 8003c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c60:	e00a      	b.n	8003c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4908      	ldr	r1, [pc, #32]	; (8003c88 <__NVIC_SetPriority+0x50>)
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	440b      	add	r3, r1
 8003c76:	761a      	strb	r2, [r3, #24]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <NVIC_EncodePriority>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f1c3 0307 	rsb	r3, r3, #7
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	bf28      	it	cs
 8003caa:	2304      	movcs	r3, #4
 8003cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d902      	bls.n	8003cbc <NVIC_EncodePriority+0x30>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3b03      	subs	r3, #3
 8003cba:	e000      	b.n	8003cbe <NVIC_EncodePriority+0x32>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	401a      	ands	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa01 f303 	lsl.w	r3, r1, r3
 8003cde:	43d9      	mvns	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	4313      	orrs	r3, r2
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff4c 	bl	8003b98 <__NVIC_SetPriorityGrouping>
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d16:	f7ff ff63 	bl	8003be0 <__NVIC_GetPriorityGrouping>
 8003d1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	6978      	ldr	r0, [r7, #20]
 8003d22:	f7ff ffb3 	bl	8003c8c <NVIC_EncodePriority>
 8003d26:	4602      	mov	r2, r0
 8003d28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ff82 	bl	8003c38 <__NVIC_SetPriority>
}
 8003d34:	bf00      	nop
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ff56 	bl	8003bfc <__NVIC_EnableIRQ>
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7fe fea0 	bl	8002aa4 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e2e5      	b.n	800433c <HAL_DMA_Init+0x5e4>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a66      	ldr	r2, [pc, #408]	; (8003f10 <HAL_DMA_Init+0x1b8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d04a      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a65      	ldr	r2, [pc, #404]	; (8003f14 <HAL_DMA_Init+0x1bc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d045      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a63      	ldr	r2, [pc, #396]	; (8003f18 <HAL_DMA_Init+0x1c0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d040      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a62      	ldr	r2, [pc, #392]	; (8003f1c <HAL_DMA_Init+0x1c4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d03b      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a60      	ldr	r2, [pc, #384]	; (8003f20 <HAL_DMA_Init+0x1c8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d036      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a5f      	ldr	r2, [pc, #380]	; (8003f24 <HAL_DMA_Init+0x1cc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d031      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5d      	ldr	r2, [pc, #372]	; (8003f28 <HAL_DMA_Init+0x1d0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5c      	ldr	r2, [pc, #368]	; (8003f2c <HAL_DMA_Init+0x1d4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d027      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a5a      	ldr	r2, [pc, #360]	; (8003f30 <HAL_DMA_Init+0x1d8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a59      	ldr	r2, [pc, #356]	; (8003f34 <HAL_DMA_Init+0x1dc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01d      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a57      	ldr	r2, [pc, #348]	; (8003f38 <HAL_DMA_Init+0x1e0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a56      	ldr	r2, [pc, #344]	; (8003f3c <HAL_DMA_Init+0x1e4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a54      	ldr	r2, [pc, #336]	; (8003f40 <HAL_DMA_Init+0x1e8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a53      	ldr	r2, [pc, #332]	; (8003f44 <HAL_DMA_Init+0x1ec>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a51      	ldr	r2, [pc, #324]	; (8003f48 <HAL_DMA_Init+0x1f0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_DMA_Init+0xb8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a50      	ldr	r2, [pc, #320]	; (8003f4c <HAL_DMA_Init+0x1f4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_DMA_Init+0xbc>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_DMA_Init+0xbe>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 810b 	beq.w	8004032 <HAL_DMA_Init+0x2da>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a37      	ldr	r2, [pc, #220]	; (8003f10 <HAL_DMA_Init+0x1b8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d04a      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a36      	ldr	r2, [pc, #216]	; (8003f14 <HAL_DMA_Init+0x1bc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d045      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <HAL_DMA_Init+0x1c0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d040      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a33      	ldr	r2, [pc, #204]	; (8003f1c <HAL_DMA_Init+0x1c4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d03b      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a31      	ldr	r2, [pc, #196]	; (8003f20 <HAL_DMA_Init+0x1c8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d036      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a30      	ldr	r2, [pc, #192]	; (8003f24 <HAL_DMA_Init+0x1cc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d031      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2e      	ldr	r2, [pc, #184]	; (8003f28 <HAL_DMA_Init+0x1d0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02c      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <HAL_DMA_Init+0x1d4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d027      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <HAL_DMA_Init+0x1d8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d022      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <HAL_DMA_Init+0x1dc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d01d      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <HAL_DMA_Init+0x1e0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <HAL_DMA_Init+0x1e4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <HAL_DMA_Init+0x1e8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <HAL_DMA_Init+0x1ec>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <HAL_DMA_Init+0x1f0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_DMA_Init+0x174>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <HAL_DMA_Init+0x1f4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <HAL_DMA_Init+0x186>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e007      	b.n	8003eee <HAL_DMA_Init+0x196>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003eee:	e02f      	b.n	8003f50 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ef0:	f7fe fdd8 	bl	8002aa4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b05      	cmp	r3, #5
 8003efc:	d928      	bls.n	8003f50 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2203      	movs	r2, #3
 8003f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e215      	b.n	800433c <HAL_DMA_Init+0x5e4>
 8003f10:	40020010 	.word	0x40020010
 8003f14:	40020028 	.word	0x40020028
 8003f18:	40020040 	.word	0x40020040
 8003f1c:	40020058 	.word	0x40020058
 8003f20:	40020070 	.word	0x40020070
 8003f24:	40020088 	.word	0x40020088
 8003f28:	400200a0 	.word	0x400200a0
 8003f2c:	400200b8 	.word	0x400200b8
 8003f30:	40020410 	.word	0x40020410
 8003f34:	40020428 	.word	0x40020428
 8003f38:	40020440 	.word	0x40020440
 8003f3c:	40020458 	.word	0x40020458
 8003f40:	40020470 	.word	0x40020470
 8003f44:	40020488 	.word	0x40020488
 8003f48:	400204a0 	.word	0x400204a0
 8003f4c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1c8      	bne.n	8003ef0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4b8c      	ldr	r3, [pc, #560]	; (800419c <HAL_DMA_Init+0x444>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f76:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f82:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d107      	bne.n	8003fb4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	4313      	orrs	r3, r2
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0307 	bic.w	r3, r3, #7
 8003fca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d117      	bne.n	800400e <HAL_DMA_Init+0x2b6>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_Init+0x2b6>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f001 ff15 	bl	8005e20 <DMA_CheckFifoParam>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_DMA_Init+0x2b6>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2240      	movs	r2, #64	; 0x40
 8004000:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e196      	b.n	800433c <HAL_DMA_Init+0x5e4>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f001 fe50 	bl	8005cbc <DMA_CalcBaseAndBitshift>
 800401c:	4603      	mov	r3, r0
 800401e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	223f      	movs	r2, #63	; 0x3f
 800402a:	409a      	lsls	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	e0cc      	b.n	80041cc <HAL_DMA_Init+0x474>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a5a      	ldr	r2, [pc, #360]	; (80041a0 <HAL_DMA_Init+0x448>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <HAL_DMA_Init+0x32a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a58      	ldr	r2, [pc, #352]	; (80041a4 <HAL_DMA_Init+0x44c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01d      	beq.n	8004082 <HAL_DMA_Init+0x32a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a57      	ldr	r2, [pc, #348]	; (80041a8 <HAL_DMA_Init+0x450>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <HAL_DMA_Init+0x32a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a55      	ldr	r2, [pc, #340]	; (80041ac <HAL_DMA_Init+0x454>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_DMA_Init+0x32a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a54      	ldr	r2, [pc, #336]	; (80041b0 <HAL_DMA_Init+0x458>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_DMA_Init+0x32a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a52      	ldr	r2, [pc, #328]	; (80041b4 <HAL_DMA_Init+0x45c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_DMA_Init+0x32a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a51      	ldr	r2, [pc, #324]	; (80041b8 <HAL_DMA_Init+0x460>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_DMA_Init+0x32a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a4f      	ldr	r2, [pc, #316]	; (80041bc <HAL_DMA_Init+0x464>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_DMA_Init+0x32e>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_DMA_Init+0x330>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d07e      	beq.n	800418a <HAL_DMA_Init+0x432>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a43      	ldr	r2, [pc, #268]	; (80041a0 <HAL_DMA_Init+0x448>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d021      	beq.n	80040da <HAL_DMA_Init+0x382>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a42      	ldr	r2, [pc, #264]	; (80041a4 <HAL_DMA_Init+0x44c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01c      	beq.n	80040da <HAL_DMA_Init+0x382>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a40      	ldr	r2, [pc, #256]	; (80041a8 <HAL_DMA_Init+0x450>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d017      	beq.n	80040da <HAL_DMA_Init+0x382>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a3f      	ldr	r2, [pc, #252]	; (80041ac <HAL_DMA_Init+0x454>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d012      	beq.n	80040da <HAL_DMA_Init+0x382>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a3d      	ldr	r2, [pc, #244]	; (80041b0 <HAL_DMA_Init+0x458>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00d      	beq.n	80040da <HAL_DMA_Init+0x382>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a3c      	ldr	r2, [pc, #240]	; (80041b4 <HAL_DMA_Init+0x45c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d008      	beq.n	80040da <HAL_DMA_Init+0x382>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3a      	ldr	r2, [pc, #232]	; (80041b8 <HAL_DMA_Init+0x460>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <HAL_DMA_Init+0x382>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a39      	ldr	r2, [pc, #228]	; (80041bc <HAL_DMA_Init+0x464>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <HAL_DMA_Init+0x468>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d008      	beq.n	8004116 <HAL_DMA_Init+0x3be>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d102      	bne.n	8004112 <HAL_DMA_Init+0x3ba>
 800410c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004110:	e002      	b.n	8004118 <HAL_DMA_Init+0x3c0>
 8004112:	2300      	movs	r3, #0
 8004114:	e000      	b.n	8004118 <HAL_DMA_Init+0x3c0>
 8004116:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68d2      	ldr	r2, [r2, #12]
 800411c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800411e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004126:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800412e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004136:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800413e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004146:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <HAL_DMA_Init+0x46c>)
 800415e:	4413      	add	r3, r2
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <HAL_DMA_Init+0x470>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	009a      	lsls	r2, r3, #2
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f001 fda4 	bl	8005cbc <DMA_CalcBaseAndBitshift>
 8004174:	4603      	mov	r3, r0
 8004176:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2201      	movs	r2, #1
 8004182:	409a      	lsls	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	e020      	b.n	80041cc <HAL_DMA_Init+0x474>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2240      	movs	r2, #64	; 0x40
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2203      	movs	r2, #3
 8004194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0cf      	b.n	800433c <HAL_DMA_Init+0x5e4>
 800419c:	fe10803f 	.word	0xfe10803f
 80041a0:	58025408 	.word	0x58025408
 80041a4:	5802541c 	.word	0x5802541c
 80041a8:	58025430 	.word	0x58025430
 80041ac:	58025444 	.word	0x58025444
 80041b0:	58025458 	.word	0x58025458
 80041b4:	5802546c 	.word	0x5802546c
 80041b8:	58025480 	.word	0x58025480
 80041bc:	58025494 	.word	0x58025494
 80041c0:	fffe000f 	.word	0xfffe000f
 80041c4:	a7fdabf8 	.word	0xa7fdabf8
 80041c8:	cccccccd 	.word	0xcccccccd
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5c      	ldr	r2, [pc, #368]	; (8004344 <HAL_DMA_Init+0x5ec>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d072      	beq.n	80042bc <HAL_DMA_Init+0x564>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a5b      	ldr	r2, [pc, #364]	; (8004348 <HAL_DMA_Init+0x5f0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d06d      	beq.n	80042bc <HAL_DMA_Init+0x564>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a59      	ldr	r2, [pc, #356]	; (800434c <HAL_DMA_Init+0x5f4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d068      	beq.n	80042bc <HAL_DMA_Init+0x564>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a58      	ldr	r2, [pc, #352]	; (8004350 <HAL_DMA_Init+0x5f8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d063      	beq.n	80042bc <HAL_DMA_Init+0x564>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a56      	ldr	r2, [pc, #344]	; (8004354 <HAL_DMA_Init+0x5fc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d05e      	beq.n	80042bc <HAL_DMA_Init+0x564>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a55      	ldr	r2, [pc, #340]	; (8004358 <HAL_DMA_Init+0x600>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d059      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a53      	ldr	r2, [pc, #332]	; (800435c <HAL_DMA_Init+0x604>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d054      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a52      	ldr	r2, [pc, #328]	; (8004360 <HAL_DMA_Init+0x608>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d04f      	beq.n	80042bc <HAL_DMA_Init+0x564>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a50      	ldr	r2, [pc, #320]	; (8004364 <HAL_DMA_Init+0x60c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d04a      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a4f      	ldr	r2, [pc, #316]	; (8004368 <HAL_DMA_Init+0x610>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d045      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a4d      	ldr	r2, [pc, #308]	; (800436c <HAL_DMA_Init+0x614>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d040      	beq.n	80042bc <HAL_DMA_Init+0x564>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4c      	ldr	r2, [pc, #304]	; (8004370 <HAL_DMA_Init+0x618>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d03b      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a4a      	ldr	r2, [pc, #296]	; (8004374 <HAL_DMA_Init+0x61c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d036      	beq.n	80042bc <HAL_DMA_Init+0x564>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a49      	ldr	r2, [pc, #292]	; (8004378 <HAL_DMA_Init+0x620>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d031      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a47      	ldr	r2, [pc, #284]	; (800437c <HAL_DMA_Init+0x624>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d02c      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a46      	ldr	r2, [pc, #280]	; (8004380 <HAL_DMA_Init+0x628>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d027      	beq.n	80042bc <HAL_DMA_Init+0x564>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a44      	ldr	r2, [pc, #272]	; (8004384 <HAL_DMA_Init+0x62c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a43      	ldr	r2, [pc, #268]	; (8004388 <HAL_DMA_Init+0x630>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d01d      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a41      	ldr	r2, [pc, #260]	; (800438c <HAL_DMA_Init+0x634>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_DMA_Init+0x564>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a40      	ldr	r2, [pc, #256]	; (8004390 <HAL_DMA_Init+0x638>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_DMA_Init+0x564>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a3e      	ldr	r2, [pc, #248]	; (8004394 <HAL_DMA_Init+0x63c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_DMA_Init+0x564>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3d      	ldr	r2, [pc, #244]	; (8004398 <HAL_DMA_Init+0x640>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_DMA_Init+0x564>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3b      	ldr	r2, [pc, #236]	; (800439c <HAL_DMA_Init+0x644>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_DMA_Init+0x564>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a3a      	ldr	r2, [pc, #232]	; (80043a0 <HAL_DMA_Init+0x648>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <HAL_DMA_Init+0x568>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_DMA_Init+0x56a>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d032      	beq.n	800432c <HAL_DMA_Init+0x5d4>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f001 fe26 	bl	8005f18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d102      	bne.n	80042da <HAL_DMA_Init+0x582>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042ee:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <HAL_DMA_Init+0x5c2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d80c      	bhi.n	800431a <HAL_DMA_Init+0x5c2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f001 fea3 	bl	800604c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	e008      	b.n	800432c <HAL_DMA_Init+0x5d4>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40020010 	.word	0x40020010
 8004348:	40020028 	.word	0x40020028
 800434c:	40020040 	.word	0x40020040
 8004350:	40020058 	.word	0x40020058
 8004354:	40020070 	.word	0x40020070
 8004358:	40020088 	.word	0x40020088
 800435c:	400200a0 	.word	0x400200a0
 8004360:	400200b8 	.word	0x400200b8
 8004364:	40020410 	.word	0x40020410
 8004368:	40020428 	.word	0x40020428
 800436c:	40020440 	.word	0x40020440
 8004370:	40020458 	.word	0x40020458
 8004374:	40020470 	.word	0x40020470
 8004378:	40020488 	.word	0x40020488
 800437c:	400204a0 	.word	0x400204a0
 8004380:	400204b8 	.word	0x400204b8
 8004384:	58025408 	.word	0x58025408
 8004388:	5802541c 	.word	0x5802541c
 800438c:	58025430 	.word	0x58025430
 8004390:	58025444 	.word	0x58025444
 8004394:	58025458 	.word	0x58025458
 8004398:	5802546c 	.word	0x5802546c
 800439c:	58025480 	.word	0x58025480
 80043a0:	58025494 	.word	0x58025494

080043a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80043ac:	f7fe fb7a 	bl	8002aa4 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e2dc      	b.n	8004976 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d008      	beq.n	80043da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e2cd      	b.n	8004976 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a76      	ldr	r2, [pc, #472]	; (80045b8 <HAL_DMA_Abort+0x214>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d04a      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a74      	ldr	r2, [pc, #464]	; (80045bc <HAL_DMA_Abort+0x218>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d045      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a73      	ldr	r2, [pc, #460]	; (80045c0 <HAL_DMA_Abort+0x21c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d040      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a71      	ldr	r2, [pc, #452]	; (80045c4 <HAL_DMA_Abort+0x220>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d03b      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a70      	ldr	r2, [pc, #448]	; (80045c8 <HAL_DMA_Abort+0x224>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d036      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_DMA_Abort+0x228>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d031      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6d      	ldr	r2, [pc, #436]	; (80045d0 <HAL_DMA_Abort+0x22c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d02c      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6b      	ldr	r2, [pc, #428]	; (80045d4 <HAL_DMA_Abort+0x230>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d027      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6a      	ldr	r2, [pc, #424]	; (80045d8 <HAL_DMA_Abort+0x234>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d022      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a68      	ldr	r2, [pc, #416]	; (80045dc <HAL_DMA_Abort+0x238>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01d      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a67      	ldr	r2, [pc, #412]	; (80045e0 <HAL_DMA_Abort+0x23c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d018      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_DMA_Abort+0x240>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a64      	ldr	r2, [pc, #400]	; (80045e8 <HAL_DMA_Abort+0x244>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a62      	ldr	r2, [pc, #392]	; (80045ec <HAL_DMA_Abort+0x248>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d009      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a61      	ldr	r2, [pc, #388]	; (80045f0 <HAL_DMA_Abort+0x24c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_DMA_Abort+0xd6>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a5f      	ldr	r2, [pc, #380]	; (80045f4 <HAL_DMA_Abort+0x250>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <HAL_DMA_Abort+0xda>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_DMA_Abort+0xdc>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 021e 	bic.w	r2, r2, #30
 8004492:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e00a      	b.n	80044c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 020e 	bic.w	r2, r2, #14
 80044ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a3c      	ldr	r2, [pc, #240]	; (80045b8 <HAL_DMA_Abort+0x214>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d072      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3a      	ldr	r2, [pc, #232]	; (80045bc <HAL_DMA_Abort+0x218>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d06d      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a39      	ldr	r2, [pc, #228]	; (80045c0 <HAL_DMA_Abort+0x21c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d068      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a37      	ldr	r2, [pc, #220]	; (80045c4 <HAL_DMA_Abort+0x220>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d063      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a36      	ldr	r2, [pc, #216]	; (80045c8 <HAL_DMA_Abort+0x224>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d05e      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a34      	ldr	r2, [pc, #208]	; (80045cc <HAL_DMA_Abort+0x228>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d059      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a33      	ldr	r2, [pc, #204]	; (80045d0 <HAL_DMA_Abort+0x22c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d054      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a31      	ldr	r2, [pc, #196]	; (80045d4 <HAL_DMA_Abort+0x230>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d04f      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a30      	ldr	r2, [pc, #192]	; (80045d8 <HAL_DMA_Abort+0x234>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d04a      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2e      	ldr	r2, [pc, #184]	; (80045dc <HAL_DMA_Abort+0x238>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d045      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2d      	ldr	r2, [pc, #180]	; (80045e0 <HAL_DMA_Abort+0x23c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d040      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <HAL_DMA_Abort+0x240>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d03b      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <HAL_DMA_Abort+0x244>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d036      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a28      	ldr	r2, [pc, #160]	; (80045ec <HAL_DMA_Abort+0x248>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d031      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a27      	ldr	r2, [pc, #156]	; (80045f0 <HAL_DMA_Abort+0x24c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d02c      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a25      	ldr	r2, [pc, #148]	; (80045f4 <HAL_DMA_Abort+0x250>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d027      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a24      	ldr	r2, [pc, #144]	; (80045f8 <HAL_DMA_Abort+0x254>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d022      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a22      	ldr	r2, [pc, #136]	; (80045fc <HAL_DMA_Abort+0x258>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01d      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a21      	ldr	r2, [pc, #132]	; (8004600 <HAL_DMA_Abort+0x25c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1f      	ldr	r2, [pc, #124]	; (8004604 <HAL_DMA_Abort+0x260>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <HAL_DMA_Abort+0x264>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1c      	ldr	r2, [pc, #112]	; (800460c <HAL_DMA_Abort+0x268>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <HAL_DMA_Abort+0x26c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_DMA_Abort+0x20e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <HAL_DMA_Abort+0x270>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d132      	bne.n	8004618 <HAL_DMA_Abort+0x274>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e031      	b.n	800461a <HAL_DMA_Abort+0x276>
 80045b6:	bf00      	nop
 80045b8:	40020010 	.word	0x40020010
 80045bc:	40020028 	.word	0x40020028
 80045c0:	40020040 	.word	0x40020040
 80045c4:	40020058 	.word	0x40020058
 80045c8:	40020070 	.word	0x40020070
 80045cc:	40020088 	.word	0x40020088
 80045d0:	400200a0 	.word	0x400200a0
 80045d4:	400200b8 	.word	0x400200b8
 80045d8:	40020410 	.word	0x40020410
 80045dc:	40020428 	.word	0x40020428
 80045e0:	40020440 	.word	0x40020440
 80045e4:	40020458 	.word	0x40020458
 80045e8:	40020470 	.word	0x40020470
 80045ec:	40020488 	.word	0x40020488
 80045f0:	400204a0 	.word	0x400204a0
 80045f4:	400204b8 	.word	0x400204b8
 80045f8:	58025408 	.word	0x58025408
 80045fc:	5802541c 	.word	0x5802541c
 8004600:	58025430 	.word	0x58025430
 8004604:	58025444 	.word	0x58025444
 8004608:	58025458 	.word	0x58025458
 800460c:	5802546c 	.word	0x5802546c
 8004610:	58025480 	.word	0x58025480
 8004614:	58025494 	.word	0x58025494
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6d      	ldr	r2, [pc, #436]	; (80047e8 <HAL_DMA_Abort+0x444>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d04a      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a6b      	ldr	r2, [pc, #428]	; (80047ec <HAL_DMA_Abort+0x448>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d045      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6a      	ldr	r2, [pc, #424]	; (80047f0 <HAL_DMA_Abort+0x44c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d040      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a68      	ldr	r2, [pc, #416]	; (80047f4 <HAL_DMA_Abort+0x450>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d03b      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a67      	ldr	r2, [pc, #412]	; (80047f8 <HAL_DMA_Abort+0x454>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d036      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a65      	ldr	r2, [pc, #404]	; (80047fc <HAL_DMA_Abort+0x458>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d031      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a64      	ldr	r2, [pc, #400]	; (8004800 <HAL_DMA_Abort+0x45c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d02c      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a62      	ldr	r2, [pc, #392]	; (8004804 <HAL_DMA_Abort+0x460>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d027      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a61      	ldr	r2, [pc, #388]	; (8004808 <HAL_DMA_Abort+0x464>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5f      	ldr	r2, [pc, #380]	; (800480c <HAL_DMA_Abort+0x468>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5e      	ldr	r2, [pc, #376]	; (8004810 <HAL_DMA_Abort+0x46c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a5c      	ldr	r2, [pc, #368]	; (8004814 <HAL_DMA_Abort+0x470>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_DMA_Abort+0x474>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a59      	ldr	r2, [pc, #356]	; (800481c <HAL_DMA_Abort+0x478>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a58      	ldr	r2, [pc, #352]	; (8004820 <HAL_DMA_Abort+0x47c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_DMA_Abort+0x32a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a56      	ldr	r2, [pc, #344]	; (8004824 <HAL_DMA_Abort+0x480>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <HAL_DMA_Abort+0x33c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e007      	b.n	80046f0 <HAL_DMA_Abort+0x34c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046f0:	e013      	b.n	800471a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046f2:	f7fe f9d7 	bl	8002aa4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d90c      	bls.n	800471a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2203      	movs	r2, #3
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e12d      	b.n	8004976 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2f      	ldr	r2, [pc, #188]	; (80047e8 <HAL_DMA_Abort+0x444>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d04a      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2d      	ldr	r2, [pc, #180]	; (80047ec <HAL_DMA_Abort+0x448>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d045      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <HAL_DMA_Abort+0x44c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d040      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2a      	ldr	r2, [pc, #168]	; (80047f4 <HAL_DMA_Abort+0x450>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d03b      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <HAL_DMA_Abort+0x454>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d036      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a27      	ldr	r2, [pc, #156]	; (80047fc <HAL_DMA_Abort+0x458>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d031      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a26      	ldr	r2, [pc, #152]	; (8004800 <HAL_DMA_Abort+0x45c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d02c      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a24      	ldr	r2, [pc, #144]	; (8004804 <HAL_DMA_Abort+0x460>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d027      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a23      	ldr	r2, [pc, #140]	; (8004808 <HAL_DMA_Abort+0x464>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d022      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a21      	ldr	r2, [pc, #132]	; (800480c <HAL_DMA_Abort+0x468>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01d      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a20      	ldr	r2, [pc, #128]	; (8004810 <HAL_DMA_Abort+0x46c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d018      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <HAL_DMA_Abort+0x470>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_DMA_Abort+0x474>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_DMA_Abort+0x478>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <HAL_DMA_Abort+0x47c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_DMA_Abort+0x422>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_DMA_Abort+0x480>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <HAL_DMA_Abort+0x426>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_DMA_Abort+0x428>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d02b      	beq.n	8004828 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	223f      	movs	r2, #63	; 0x3f
 80047e0:	409a      	lsls	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	609a      	str	r2, [r3, #8]
 80047e6:	e02a      	b.n	800483e <HAL_DMA_Abort+0x49a>
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2201      	movs	r2, #1
 8004838:	409a      	lsls	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a4f      	ldr	r2, [pc, #316]	; (8004980 <HAL_DMA_Abort+0x5dc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d072      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a4d      	ldr	r2, [pc, #308]	; (8004984 <HAL_DMA_Abort+0x5e0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d06d      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a4c      	ldr	r2, [pc, #304]	; (8004988 <HAL_DMA_Abort+0x5e4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d068      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a4a      	ldr	r2, [pc, #296]	; (800498c <HAL_DMA_Abort+0x5e8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d063      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a49      	ldr	r2, [pc, #292]	; (8004990 <HAL_DMA_Abort+0x5ec>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d05e      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a47      	ldr	r2, [pc, #284]	; (8004994 <HAL_DMA_Abort+0x5f0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d059      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a46      	ldr	r2, [pc, #280]	; (8004998 <HAL_DMA_Abort+0x5f4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d054      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a44      	ldr	r2, [pc, #272]	; (800499c <HAL_DMA_Abort+0x5f8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d04f      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a43      	ldr	r2, [pc, #268]	; (80049a0 <HAL_DMA_Abort+0x5fc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d04a      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <HAL_DMA_Abort+0x600>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d045      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <HAL_DMA_Abort+0x604>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d040      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a3e      	ldr	r2, [pc, #248]	; (80049ac <HAL_DMA_Abort+0x608>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d03b      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3d      	ldr	r2, [pc, #244]	; (80049b0 <HAL_DMA_Abort+0x60c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d036      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <HAL_DMA_Abort+0x610>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d031      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <HAL_DMA_Abort+0x614>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d02c      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a38      	ldr	r2, [pc, #224]	; (80049bc <HAL_DMA_Abort+0x618>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d027      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a37      	ldr	r2, [pc, #220]	; (80049c0 <HAL_DMA_Abort+0x61c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a35      	ldr	r2, [pc, #212]	; (80049c4 <HAL_DMA_Abort+0x620>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01d      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a34      	ldr	r2, [pc, #208]	; (80049c8 <HAL_DMA_Abort+0x624>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a32      	ldr	r2, [pc, #200]	; (80049cc <HAL_DMA_Abort+0x628>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a31      	ldr	r2, [pc, #196]	; (80049d0 <HAL_DMA_Abort+0x62c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <HAL_DMA_Abort+0x630>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2e      	ldr	r2, [pc, #184]	; (80049d8 <HAL_DMA_Abort+0x634>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_DMA_Abort+0x58a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <HAL_DMA_Abort+0x638>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <HAL_DMA_Abort+0x58e>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <HAL_DMA_Abort+0x590>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d015      	beq.n	8004964 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004940:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004958:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004962:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40020010 	.word	0x40020010
 8004984:	40020028 	.word	0x40020028
 8004988:	40020040 	.word	0x40020040
 800498c:	40020058 	.word	0x40020058
 8004990:	40020070 	.word	0x40020070
 8004994:	40020088 	.word	0x40020088
 8004998:	400200a0 	.word	0x400200a0
 800499c:	400200b8 	.word	0x400200b8
 80049a0:	40020410 	.word	0x40020410
 80049a4:	40020428 	.word	0x40020428
 80049a8:	40020440 	.word	0x40020440
 80049ac:	40020458 	.word	0x40020458
 80049b0:	40020470 	.word	0x40020470
 80049b4:	40020488 	.word	0x40020488
 80049b8:	400204a0 	.word	0x400204a0
 80049bc:	400204b8 	.word	0x400204b8
 80049c0:	58025408 	.word	0x58025408
 80049c4:	5802541c 	.word	0x5802541c
 80049c8:	58025430 	.word	0x58025430
 80049cc:	58025444 	.word	0x58025444
 80049d0:	58025458 	.word	0x58025458
 80049d4:	5802546c 	.word	0x5802546c
 80049d8:	58025480 	.word	0x58025480
 80049dc:	58025494 	.word	0x58025494

080049e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e205      	b.n	8004dfe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d004      	beq.n	8004a08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e1fa      	b.n	8004dfe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a8c      	ldr	r2, [pc, #560]	; (8004c40 <HAL_DMA_Abort_IT+0x260>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04a      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a8b      	ldr	r2, [pc, #556]	; (8004c44 <HAL_DMA_Abort_IT+0x264>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d045      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a89      	ldr	r2, [pc, #548]	; (8004c48 <HAL_DMA_Abort_IT+0x268>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d040      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a88      	ldr	r2, [pc, #544]	; (8004c4c <HAL_DMA_Abort_IT+0x26c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d03b      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a86      	ldr	r2, [pc, #536]	; (8004c50 <HAL_DMA_Abort_IT+0x270>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d036      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a85      	ldr	r2, [pc, #532]	; (8004c54 <HAL_DMA_Abort_IT+0x274>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d031      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a83      	ldr	r2, [pc, #524]	; (8004c58 <HAL_DMA_Abort_IT+0x278>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d02c      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a82      	ldr	r2, [pc, #520]	; (8004c5c <HAL_DMA_Abort_IT+0x27c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d027      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a80      	ldr	r2, [pc, #512]	; (8004c60 <HAL_DMA_Abort_IT+0x280>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d022      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a7f      	ldr	r2, [pc, #508]	; (8004c64 <HAL_DMA_Abort_IT+0x284>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d01d      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a7d      	ldr	r2, [pc, #500]	; (8004c68 <HAL_DMA_Abort_IT+0x288>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d018      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7c      	ldr	r2, [pc, #496]	; (8004c6c <HAL_DMA_Abort_IT+0x28c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a7a      	ldr	r2, [pc, #488]	; (8004c70 <HAL_DMA_Abort_IT+0x290>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00e      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a79      	ldr	r2, [pc, #484]	; (8004c74 <HAL_DMA_Abort_IT+0x294>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a77      	ldr	r2, [pc, #476]	; (8004c78 <HAL_DMA_Abort_IT+0x298>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a76      	ldr	r2, [pc, #472]	; (8004c7c <HAL_DMA_Abort_IT+0x29c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d101      	bne.n	8004aac <HAL_DMA_Abort_IT+0xcc>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <HAL_DMA_Abort_IT+0xce>
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d065      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a60      	ldr	r2, [pc, #384]	; (8004c40 <HAL_DMA_Abort_IT+0x260>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d04a      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a5e      	ldr	r2, [pc, #376]	; (8004c44 <HAL_DMA_Abort_IT+0x264>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d045      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a5d      	ldr	r2, [pc, #372]	; (8004c48 <HAL_DMA_Abort_IT+0x268>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d040      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5b      	ldr	r2, [pc, #364]	; (8004c4c <HAL_DMA_Abort_IT+0x26c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d03b      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5a      	ldr	r2, [pc, #360]	; (8004c50 <HAL_DMA_Abort_IT+0x270>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d036      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a58      	ldr	r2, [pc, #352]	; (8004c54 <HAL_DMA_Abort_IT+0x274>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d031      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a57      	ldr	r2, [pc, #348]	; (8004c58 <HAL_DMA_Abort_IT+0x278>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d02c      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a55      	ldr	r2, [pc, #340]	; (8004c5c <HAL_DMA_Abort_IT+0x27c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d027      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a54      	ldr	r2, [pc, #336]	; (8004c60 <HAL_DMA_Abort_IT+0x280>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d022      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a52      	ldr	r2, [pc, #328]	; (8004c64 <HAL_DMA_Abort_IT+0x284>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01d      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a51      	ldr	r2, [pc, #324]	; (8004c68 <HAL_DMA_Abort_IT+0x288>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a4f      	ldr	r2, [pc, #316]	; (8004c6c <HAL_DMA_Abort_IT+0x28c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a4e      	ldr	r2, [pc, #312]	; (8004c70 <HAL_DMA_Abort_IT+0x290>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a4c      	ldr	r2, [pc, #304]	; (8004c74 <HAL_DMA_Abort_IT+0x294>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a4b      	ldr	r2, [pc, #300]	; (8004c78 <HAL_DMA_Abort_IT+0x298>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x17a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a49      	ldr	r2, [pc, #292]	; (8004c7c <HAL_DMA_Abort_IT+0x29c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d108      	bne.n	8004b6c <HAL_DMA_Abort_IT+0x18c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e147      	b.n	8004dfc <HAL_DMA_Abort_IT+0x41c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e13e      	b.n	8004dfc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 020e 	bic.w	r2, r2, #14
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2b      	ldr	r2, [pc, #172]	; (8004c40 <HAL_DMA_Abort_IT+0x260>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d04a      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <HAL_DMA_Abort_IT+0x264>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d045      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a28      	ldr	r2, [pc, #160]	; (8004c48 <HAL_DMA_Abort_IT+0x268>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d040      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <HAL_DMA_Abort_IT+0x26c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d03b      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <HAL_DMA_Abort_IT+0x270>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d036      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <HAL_DMA_Abort_IT+0x274>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d031      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a22      	ldr	r2, [pc, #136]	; (8004c58 <HAL_DMA_Abort_IT+0x278>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d02c      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <HAL_DMA_Abort_IT+0x27c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d027      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <HAL_DMA_Abort_IT+0x280>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d022      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <HAL_DMA_Abort_IT+0x284>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01d      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <HAL_DMA_Abort_IT+0x288>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1a      	ldr	r2, [pc, #104]	; (8004c6c <HAL_DMA_Abort_IT+0x28c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <HAL_DMA_Abort_IT+0x290>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <HAL_DMA_Abort_IT+0x294>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_DMA_Abort_IT+0x298>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x24e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <HAL_DMA_Abort_IT+0x29c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d128      	bne.n	8004c80 <HAL_DMA_Abort_IT+0x2a0>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e027      	b.n	8004c90 <HAL_DMA_Abort_IT+0x2b0>
 8004c40:	40020010 	.word	0x40020010
 8004c44:	40020028 	.word	0x40020028
 8004c48:	40020040 	.word	0x40020040
 8004c4c:	40020058 	.word	0x40020058
 8004c50:	40020070 	.word	0x40020070
 8004c54:	40020088 	.word	0x40020088
 8004c58:	400200a0 	.word	0x400200a0
 8004c5c:	400200b8 	.word	0x400200b8
 8004c60:	40020410 	.word	0x40020410
 8004c64:	40020428 	.word	0x40020428
 8004c68:	40020440 	.word	0x40020440
 8004c6c:	40020458 	.word	0x40020458
 8004c70:	40020470 	.word	0x40020470
 8004c74:	40020488 	.word	0x40020488
 8004c78:	400204a0 	.word	0x400204a0
 8004c7c:	400204b8 	.word	0x400204b8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5c      	ldr	r2, [pc, #368]	; (8004e08 <HAL_DMA_Abort_IT+0x428>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d072      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a5b      	ldr	r2, [pc, #364]	; (8004e0c <HAL_DMA_Abort_IT+0x42c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d06d      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a59      	ldr	r2, [pc, #356]	; (8004e10 <HAL_DMA_Abort_IT+0x430>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d068      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a58      	ldr	r2, [pc, #352]	; (8004e14 <HAL_DMA_Abort_IT+0x434>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d063      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a56      	ldr	r2, [pc, #344]	; (8004e18 <HAL_DMA_Abort_IT+0x438>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d05e      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a55      	ldr	r2, [pc, #340]	; (8004e1c <HAL_DMA_Abort_IT+0x43c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d059      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a53      	ldr	r2, [pc, #332]	; (8004e20 <HAL_DMA_Abort_IT+0x440>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d054      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_DMA_Abort_IT+0x444>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d04f      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a50      	ldr	r2, [pc, #320]	; (8004e28 <HAL_DMA_Abort_IT+0x448>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04a      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a4f      	ldr	r2, [pc, #316]	; (8004e2c <HAL_DMA_Abort_IT+0x44c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d045      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a4d      	ldr	r2, [pc, #308]	; (8004e30 <HAL_DMA_Abort_IT+0x450>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d040      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a4c      	ldr	r2, [pc, #304]	; (8004e34 <HAL_DMA_Abort_IT+0x454>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a4a      	ldr	r2, [pc, #296]	; (8004e38 <HAL_DMA_Abort_IT+0x458>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d036      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a49      	ldr	r2, [pc, #292]	; (8004e3c <HAL_DMA_Abort_IT+0x45c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d031      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a47      	ldr	r2, [pc, #284]	; (8004e40 <HAL_DMA_Abort_IT+0x460>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02c      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a46      	ldr	r2, [pc, #280]	; (8004e44 <HAL_DMA_Abort_IT+0x464>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d027      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a44      	ldr	r2, [pc, #272]	; (8004e48 <HAL_DMA_Abort_IT+0x468>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a43      	ldr	r2, [pc, #268]	; (8004e4c <HAL_DMA_Abort_IT+0x46c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a41      	ldr	r2, [pc, #260]	; (8004e50 <HAL_DMA_Abort_IT+0x470>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <HAL_DMA_Abort_IT+0x474>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a3e      	ldr	r2, [pc, #248]	; (8004e58 <HAL_DMA_Abort_IT+0x478>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3d      	ldr	r2, [pc, #244]	; (8004e5c <HAL_DMA_Abort_IT+0x47c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a3b      	ldr	r2, [pc, #236]	; (8004e60 <HAL_DMA_Abort_IT+0x480>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x3a0>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a3a      	ldr	r2, [pc, #232]	; (8004e64 <HAL_DMA_Abort_IT+0x484>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d101      	bne.n	8004d84 <HAL_DMA_Abort_IT+0x3a4>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <HAL_DMA_Abort_IT+0x3a6>
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d028      	beq.n	8004ddc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004db8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00c      	beq.n	8004ddc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40020010 	.word	0x40020010
 8004e0c:	40020028 	.word	0x40020028
 8004e10:	40020040 	.word	0x40020040
 8004e14:	40020058 	.word	0x40020058
 8004e18:	40020070 	.word	0x40020070
 8004e1c:	40020088 	.word	0x40020088
 8004e20:	400200a0 	.word	0x400200a0
 8004e24:	400200b8 	.word	0x400200b8
 8004e28:	40020410 	.word	0x40020410
 8004e2c:	40020428 	.word	0x40020428
 8004e30:	40020440 	.word	0x40020440
 8004e34:	40020458 	.word	0x40020458
 8004e38:	40020470 	.word	0x40020470
 8004e3c:	40020488 	.word	0x40020488
 8004e40:	400204a0 	.word	0x400204a0
 8004e44:	400204b8 	.word	0x400204b8
 8004e48:	58025408 	.word	0x58025408
 8004e4c:	5802541c 	.word	0x5802541c
 8004e50:	58025430 	.word	0x58025430
 8004e54:	58025444 	.word	0x58025444
 8004e58:	58025458 	.word	0x58025458
 8004e5c:	5802546c 	.word	0x5802546c
 8004e60:	58025480 	.word	0x58025480
 8004e64:	58025494 	.word	0x58025494

08004e68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e74:	4b67      	ldr	r3, [pc, #412]	; (8005014 <HAL_DMA_IRQHandler+0x1ac>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a67      	ldr	r2, [pc, #412]	; (8005018 <HAL_DMA_IRQHandler+0x1b0>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	0a9b      	lsrs	r3, r3, #10
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a5f      	ldr	r2, [pc, #380]	; (800501c <HAL_DMA_IRQHandler+0x1b4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d04a      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a5d      	ldr	r2, [pc, #372]	; (8005020 <HAL_DMA_IRQHandler+0x1b8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d045      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a5c      	ldr	r2, [pc, #368]	; (8005024 <HAL_DMA_IRQHandler+0x1bc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d040      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a5a      	ldr	r2, [pc, #360]	; (8005028 <HAL_DMA_IRQHandler+0x1c0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d03b      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a59      	ldr	r2, [pc, #356]	; (800502c <HAL_DMA_IRQHandler+0x1c4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d036      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a57      	ldr	r2, [pc, #348]	; (8005030 <HAL_DMA_IRQHandler+0x1c8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d031      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a56      	ldr	r2, [pc, #344]	; (8005034 <HAL_DMA_IRQHandler+0x1cc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d02c      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a54      	ldr	r2, [pc, #336]	; (8005038 <HAL_DMA_IRQHandler+0x1d0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d027      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a53      	ldr	r2, [pc, #332]	; (800503c <HAL_DMA_IRQHandler+0x1d4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d022      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a51      	ldr	r2, [pc, #324]	; (8005040 <HAL_DMA_IRQHandler+0x1d8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01d      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a50      	ldr	r2, [pc, #320]	; (8005044 <HAL_DMA_IRQHandler+0x1dc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d018      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a4e      	ldr	r2, [pc, #312]	; (8005048 <HAL_DMA_IRQHandler+0x1e0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a4d      	ldr	r2, [pc, #308]	; (800504c <HAL_DMA_IRQHandler+0x1e4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a4b      	ldr	r2, [pc, #300]	; (8005050 <HAL_DMA_IRQHandler+0x1e8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a4a      	ldr	r2, [pc, #296]	; (8005054 <HAL_DMA_IRQHandler+0x1ec>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_DMA_IRQHandler+0xd2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a48      	ldr	r2, [pc, #288]	; (8005058 <HAL_DMA_IRQHandler+0x1f0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_DMA_IRQHandler+0xd6>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_DMA_IRQHandler+0xd8>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 842b 	beq.w	800579c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	2208      	movs	r2, #8
 8004f50:	409a      	lsls	r2, r3
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80a2 	beq.w	80050a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2e      	ldr	r2, [pc, #184]	; (800501c <HAL_DMA_IRQHandler+0x1b4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d04a      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a2d      	ldr	r2, [pc, #180]	; (8005020 <HAL_DMA_IRQHandler+0x1b8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d045      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <HAL_DMA_IRQHandler+0x1bc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d040      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <HAL_DMA_IRQHandler+0x1c0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d03b      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <HAL_DMA_IRQHandler+0x1c4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d036      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a27      	ldr	r2, [pc, #156]	; (8005030 <HAL_DMA_IRQHandler+0x1c8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d031      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <HAL_DMA_IRQHandler+0x1cc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02c      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a24      	ldr	r2, [pc, #144]	; (8005038 <HAL_DMA_IRQHandler+0x1d0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d027      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <HAL_DMA_IRQHandler+0x1d4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d022      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <HAL_DMA_IRQHandler+0x1d8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d01d      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <HAL_DMA_IRQHandler+0x1dc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <HAL_DMA_IRQHandler+0x1e0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1c      	ldr	r2, [pc, #112]	; (800504c <HAL_DMA_IRQHandler+0x1e4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <HAL_DMA_IRQHandler+0x1e8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a19      	ldr	r2, [pc, #100]	; (8005054 <HAL_DMA_IRQHandler+0x1ec>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x194>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a18      	ldr	r2, [pc, #96]	; (8005058 <HAL_DMA_IRQHandler+0x1f0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d12f      	bne.n	800505c <HAL_DMA_IRQHandler+0x1f4>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	e02e      	b.n	8005070 <HAL_DMA_IRQHandler+0x208>
 8005012:	bf00      	nop
 8005014:	24000000 	.word	0x24000000
 8005018:	1b4e81b5 	.word	0x1b4e81b5
 800501c:	40020010 	.word	0x40020010
 8005020:	40020028 	.word	0x40020028
 8005024:	40020040 	.word	0x40020040
 8005028:	40020058 	.word	0x40020058
 800502c:	40020070 	.word	0x40020070
 8005030:	40020088 	.word	0x40020088
 8005034:	400200a0 	.word	0x400200a0
 8005038:	400200b8 	.word	0x400200b8
 800503c:	40020410 	.word	0x40020410
 8005040:	40020428 	.word	0x40020428
 8005044:	40020440 	.word	0x40020440
 8005048:	40020458 	.word	0x40020458
 800504c:	40020470 	.word	0x40020470
 8005050:	40020488 	.word	0x40020488
 8005054:	400204a0 	.word	0x400204a0
 8005058:	400204b8 	.word	0x400204b8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d015      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0204 	bic.w	r2, r2, #4
 8005082:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2208      	movs	r2, #8
 800508e:	409a      	lsls	r2, r3
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f043 0201 	orr.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	fa22 f303 	lsr.w	r3, r2, r3
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d06e      	beq.n	8005194 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a69      	ldr	r2, [pc, #420]	; (8005260 <HAL_DMA_IRQHandler+0x3f8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d04a      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a67      	ldr	r2, [pc, #412]	; (8005264 <HAL_DMA_IRQHandler+0x3fc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d045      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a66      	ldr	r2, [pc, #408]	; (8005268 <HAL_DMA_IRQHandler+0x400>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d040      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a64      	ldr	r2, [pc, #400]	; (800526c <HAL_DMA_IRQHandler+0x404>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d03b      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a63      	ldr	r2, [pc, #396]	; (8005270 <HAL_DMA_IRQHandler+0x408>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d036      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a61      	ldr	r2, [pc, #388]	; (8005274 <HAL_DMA_IRQHandler+0x40c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d031      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a60      	ldr	r2, [pc, #384]	; (8005278 <HAL_DMA_IRQHandler+0x410>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d02c      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a5e      	ldr	r2, [pc, #376]	; (800527c <HAL_DMA_IRQHandler+0x414>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d027      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a5d      	ldr	r2, [pc, #372]	; (8005280 <HAL_DMA_IRQHandler+0x418>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a5b      	ldr	r2, [pc, #364]	; (8005284 <HAL_DMA_IRQHandler+0x41c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01d      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a5a      	ldr	r2, [pc, #360]	; (8005288 <HAL_DMA_IRQHandler+0x420>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d018      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a58      	ldr	r2, [pc, #352]	; (800528c <HAL_DMA_IRQHandler+0x424>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a57      	ldr	r2, [pc, #348]	; (8005290 <HAL_DMA_IRQHandler+0x428>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a55      	ldr	r2, [pc, #340]	; (8005294 <HAL_DMA_IRQHandler+0x42c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a54      	ldr	r2, [pc, #336]	; (8005298 <HAL_DMA_IRQHandler+0x430>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_DMA_IRQHandler+0x2ee>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a52      	ldr	r2, [pc, #328]	; (800529c <HAL_DMA_IRQHandler+0x434>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10a      	bne.n	800516c <HAL_DMA_IRQHandler+0x304>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e003      	b.n	8005174 <HAL_DMA_IRQHandler+0x30c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00d      	beq.n	8005194 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2201      	movs	r2, #1
 8005182:	409a      	lsls	r2, r3
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f043 0202 	orr.w	r2, r3, #2
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2204      	movs	r2, #4
 800519e:	409a      	lsls	r2, r3
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 808f 	beq.w	80052c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <HAL_DMA_IRQHandler+0x3f8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d04a      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <HAL_DMA_IRQHandler+0x3fc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d045      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a29      	ldr	r2, [pc, #164]	; (8005268 <HAL_DMA_IRQHandler+0x400>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d040      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a27      	ldr	r2, [pc, #156]	; (800526c <HAL_DMA_IRQHandler+0x404>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d03b      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a26      	ldr	r2, [pc, #152]	; (8005270 <HAL_DMA_IRQHandler+0x408>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d036      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a24      	ldr	r2, [pc, #144]	; (8005274 <HAL_DMA_IRQHandler+0x40c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d031      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a23      	ldr	r2, [pc, #140]	; (8005278 <HAL_DMA_IRQHandler+0x410>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d02c      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a21      	ldr	r2, [pc, #132]	; (800527c <HAL_DMA_IRQHandler+0x414>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d027      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a20      	ldr	r2, [pc, #128]	; (8005280 <HAL_DMA_IRQHandler+0x418>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d022      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_DMA_IRQHandler+0x41c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01d      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <HAL_DMA_IRQHandler+0x420>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d018      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1b      	ldr	r2, [pc, #108]	; (800528c <HAL_DMA_IRQHandler+0x424>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <HAL_DMA_IRQHandler+0x428>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a18      	ldr	r2, [pc, #96]	; (8005294 <HAL_DMA_IRQHandler+0x42c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <HAL_DMA_IRQHandler+0x430>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_DMA_IRQHandler+0x3e2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <HAL_DMA_IRQHandler+0x434>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d12a      	bne.n	80052a0 <HAL_DMA_IRQHandler+0x438>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e023      	b.n	80052a8 <HAL_DMA_IRQHandler+0x440>
 8005260:	40020010 	.word	0x40020010
 8005264:	40020028 	.word	0x40020028
 8005268:	40020040 	.word	0x40020040
 800526c:	40020058 	.word	0x40020058
 8005270:	40020070 	.word	0x40020070
 8005274:	40020088 	.word	0x40020088
 8005278:	400200a0 	.word	0x400200a0
 800527c:	400200b8 	.word	0x400200b8
 8005280:	40020410 	.word	0x40020410
 8005284:	40020428 	.word	0x40020428
 8005288:	40020440 	.word	0x40020440
 800528c:	40020458 	.word	0x40020458
 8005290:	40020470 	.word	0x40020470
 8005294:	40020488 	.word	0x40020488
 8005298:	400204a0 	.word	0x400204a0
 800529c:	400204b8 	.word	0x400204b8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	2204      	movs	r2, #4
 80052b6:	409a      	lsls	r2, r3
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c0:	f043 0204 	orr.w	r2, r3, #4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	2210      	movs	r2, #16
 80052d2:	409a      	lsls	r2, r3
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a6 	beq.w	800542a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a85      	ldr	r2, [pc, #532]	; (80054f8 <HAL_DMA_IRQHandler+0x690>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d04a      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a83      	ldr	r2, [pc, #524]	; (80054fc <HAL_DMA_IRQHandler+0x694>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d045      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a82      	ldr	r2, [pc, #520]	; (8005500 <HAL_DMA_IRQHandler+0x698>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d040      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a80      	ldr	r2, [pc, #512]	; (8005504 <HAL_DMA_IRQHandler+0x69c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d03b      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a7f      	ldr	r2, [pc, #508]	; (8005508 <HAL_DMA_IRQHandler+0x6a0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d036      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a7d      	ldr	r2, [pc, #500]	; (800550c <HAL_DMA_IRQHandler+0x6a4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d031      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7c      	ldr	r2, [pc, #496]	; (8005510 <HAL_DMA_IRQHandler+0x6a8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d02c      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a7a      	ldr	r2, [pc, #488]	; (8005514 <HAL_DMA_IRQHandler+0x6ac>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d027      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a79      	ldr	r2, [pc, #484]	; (8005518 <HAL_DMA_IRQHandler+0x6b0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d022      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a77      	ldr	r2, [pc, #476]	; (800551c <HAL_DMA_IRQHandler+0x6b4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01d      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a76      	ldr	r2, [pc, #472]	; (8005520 <HAL_DMA_IRQHandler+0x6b8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d018      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a74      	ldr	r2, [pc, #464]	; (8005524 <HAL_DMA_IRQHandler+0x6bc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a73      	ldr	r2, [pc, #460]	; (8005528 <HAL_DMA_IRQHandler+0x6c0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a71      	ldr	r2, [pc, #452]	; (800552c <HAL_DMA_IRQHandler+0x6c4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a70      	ldr	r2, [pc, #448]	; (8005530 <HAL_DMA_IRQHandler+0x6c8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_DMA_IRQHandler+0x516>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a6e      	ldr	r2, [pc, #440]	; (8005534 <HAL_DMA_IRQHandler+0x6cc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d10a      	bne.n	8005394 <HAL_DMA_IRQHandler+0x52c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e009      	b.n	80053a8 <HAL_DMA_IRQHandler+0x540>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d03e      	beq.n	800542a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2210      	movs	r2, #16
 80053b6:	409a      	lsls	r2, r3
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d024      	beq.n	800542a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4798      	blx	r3
 80053e8:	e01f      	b.n	800542a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01b      	beq.n	800542a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
 80053fa:	e016      	b.n	800542a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d107      	bne.n	800541a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0208 	bic.w	r2, r2, #8
 8005418:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2220      	movs	r2, #32
 8005434:	409a      	lsls	r2, r3
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8110 	beq.w	8005660 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2c      	ldr	r2, [pc, #176]	; (80054f8 <HAL_DMA_IRQHandler+0x690>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d04a      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <HAL_DMA_IRQHandler+0x694>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d045      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a29      	ldr	r2, [pc, #164]	; (8005500 <HAL_DMA_IRQHandler+0x698>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d040      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a28      	ldr	r2, [pc, #160]	; (8005504 <HAL_DMA_IRQHandler+0x69c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d03b      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a26      	ldr	r2, [pc, #152]	; (8005508 <HAL_DMA_IRQHandler+0x6a0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d036      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a25      	ldr	r2, [pc, #148]	; (800550c <HAL_DMA_IRQHandler+0x6a4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d031      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a23      	ldr	r2, [pc, #140]	; (8005510 <HAL_DMA_IRQHandler+0x6a8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d02c      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a22      	ldr	r2, [pc, #136]	; (8005514 <HAL_DMA_IRQHandler+0x6ac>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d027      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a20      	ldr	r2, [pc, #128]	; (8005518 <HAL_DMA_IRQHandler+0x6b0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d022      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1f      	ldr	r2, [pc, #124]	; (800551c <HAL_DMA_IRQHandler+0x6b4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d01d      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <HAL_DMA_IRQHandler+0x6b8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d018      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <HAL_DMA_IRQHandler+0x6bc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <HAL_DMA_IRQHandler+0x6c0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a19      	ldr	r2, [pc, #100]	; (800552c <HAL_DMA_IRQHandler+0x6c4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a17      	ldr	r2, [pc, #92]	; (8005530 <HAL_DMA_IRQHandler+0x6c8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x678>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a16      	ldr	r2, [pc, #88]	; (8005534 <HAL_DMA_IRQHandler+0x6cc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d12b      	bne.n	8005538 <HAL_DMA_IRQHandler+0x6d0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e02a      	b.n	800554c <HAL_DMA_IRQHandler+0x6e4>
 80054f6:	bf00      	nop
 80054f8:	40020010 	.word	0x40020010
 80054fc:	40020028 	.word	0x40020028
 8005500:	40020040 	.word	0x40020040
 8005504:	40020058 	.word	0x40020058
 8005508:	40020070 	.word	0x40020070
 800550c:	40020088 	.word	0x40020088
 8005510:	400200a0 	.word	0x400200a0
 8005514:	400200b8 	.word	0x400200b8
 8005518:	40020410 	.word	0x40020410
 800551c:	40020428 	.word	0x40020428
 8005520:	40020440 	.word	0x40020440
 8005524:	40020458 	.word	0x40020458
 8005528:	40020470 	.word	0x40020470
 800552c:	40020488 	.word	0x40020488
 8005530:	400204a0 	.word	0x400204a0
 8005534:	400204b8 	.word	0x400204b8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8087 	beq.w	8005660 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2220      	movs	r2, #32
 800555c:	409a      	lsls	r2, r3
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b04      	cmp	r3, #4
 800556c:	d139      	bne.n	80055e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0216 	bic.w	r2, r2, #22
 800557c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800558c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <HAL_DMA_IRQHandler+0x736>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0208 	bic.w	r2, r2, #8
 80055ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	223f      	movs	r2, #63	; 0x3f
 80055b8:	409a      	lsls	r2, r3
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 834a 	beq.w	8005c6c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
          }
          return;
 80055e0:	e344      	b.n	8005c6c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d018      	beq.n	8005622 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d108      	bne.n	8005610 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	2b00      	cmp	r3, #0
 8005604:	d02c      	beq.n	8005660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
 800560e:	e027      	b.n	8005660 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d023      	beq.n	8005660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
 8005620:	e01e      	b.n	8005660 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10f      	bne.n	8005650 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0210 	bic.w	r2, r2, #16
 800563e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8306 	beq.w	8005c76 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8088 	beq.w	8005788 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2204      	movs	r2, #4
 800567c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a7a      	ldr	r2, [pc, #488]	; (8005870 <HAL_DMA_IRQHandler+0xa08>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d04a      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a79      	ldr	r2, [pc, #484]	; (8005874 <HAL_DMA_IRQHandler+0xa0c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d045      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a77      	ldr	r2, [pc, #476]	; (8005878 <HAL_DMA_IRQHandler+0xa10>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d040      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a76      	ldr	r2, [pc, #472]	; (800587c <HAL_DMA_IRQHandler+0xa14>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d03b      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a74      	ldr	r2, [pc, #464]	; (8005880 <HAL_DMA_IRQHandler+0xa18>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d036      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a73      	ldr	r2, [pc, #460]	; (8005884 <HAL_DMA_IRQHandler+0xa1c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d031      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a71      	ldr	r2, [pc, #452]	; (8005888 <HAL_DMA_IRQHandler+0xa20>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d02c      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a70      	ldr	r2, [pc, #448]	; (800588c <HAL_DMA_IRQHandler+0xa24>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d027      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a6e      	ldr	r2, [pc, #440]	; (8005890 <HAL_DMA_IRQHandler+0xa28>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d022      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6d      	ldr	r2, [pc, #436]	; (8005894 <HAL_DMA_IRQHandler+0xa2c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d01d      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6b      	ldr	r2, [pc, #428]	; (8005898 <HAL_DMA_IRQHandler+0xa30>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d018      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a6a      	ldr	r2, [pc, #424]	; (800589c <HAL_DMA_IRQHandler+0xa34>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a68      	ldr	r2, [pc, #416]	; (80058a0 <HAL_DMA_IRQHandler+0xa38>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00e      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a67      	ldr	r2, [pc, #412]	; (80058a4 <HAL_DMA_IRQHandler+0xa3c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a65      	ldr	r2, [pc, #404]	; (80058a8 <HAL_DMA_IRQHandler+0xa40>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <HAL_DMA_IRQHandler+0x8b8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a64      	ldr	r2, [pc, #400]	; (80058ac <HAL_DMA_IRQHandler+0xa44>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d108      	bne.n	8005732 <HAL_DMA_IRQHandler+0x8ca>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e007      	b.n	8005742 <HAL_DMA_IRQHandler+0x8da>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	429a      	cmp	r2, r3
 800574c:	d307      	bcc.n	800575e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f2      	bne.n	8005742 <HAL_DMA_IRQHandler+0x8da>
 800575c:	e000      	b.n	8005760 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800575e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2203      	movs	r2, #3
 800577a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800577e:	e003      	b.n	8005788 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8272 	beq.w	8005c76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4798      	blx	r3
 800579a:	e26c      	b.n	8005c76 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a43      	ldr	r2, [pc, #268]	; (80058b0 <HAL_DMA_IRQHandler+0xa48>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d022      	beq.n	80057ec <HAL_DMA_IRQHandler+0x984>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a42      	ldr	r2, [pc, #264]	; (80058b4 <HAL_DMA_IRQHandler+0xa4c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d01d      	beq.n	80057ec <HAL_DMA_IRQHandler+0x984>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a40      	ldr	r2, [pc, #256]	; (80058b8 <HAL_DMA_IRQHandler+0xa50>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_DMA_IRQHandler+0x984>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a3f      	ldr	r2, [pc, #252]	; (80058bc <HAL_DMA_IRQHandler+0xa54>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_DMA_IRQHandler+0x984>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a3d      	ldr	r2, [pc, #244]	; (80058c0 <HAL_DMA_IRQHandler+0xa58>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_DMA_IRQHandler+0x984>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a3c      	ldr	r2, [pc, #240]	; (80058c4 <HAL_DMA_IRQHandler+0xa5c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_DMA_IRQHandler+0x984>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a3a      	ldr	r2, [pc, #232]	; (80058c8 <HAL_DMA_IRQHandler+0xa60>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_DMA_IRQHandler+0x984>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a39      	ldr	r2, [pc, #228]	; (80058cc <HAL_DMA_IRQHandler+0xa64>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_DMA_IRQHandler+0x988>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_DMA_IRQHandler+0x98a>
 80057f0:	2300      	movs	r3, #0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 823f 	beq.w	8005c76 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2204      	movs	r2, #4
 800580a:	409a      	lsls	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80cd 	beq.w	80059b0 <HAL_DMA_IRQHandler+0xb48>
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80c7 	beq.w	80059b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	2204      	movs	r2, #4
 800582c:	409a      	lsls	r2, r3
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d049      	beq.n	80058d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8210 	beq.w	8005c70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005858:	e20a      	b.n	8005c70 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 8206 	beq.w	8005c70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800586c:	e200      	b.n	8005c70 <HAL_DMA_IRQHandler+0xe08>
 800586e:	bf00      	nop
 8005870:	40020010 	.word	0x40020010
 8005874:	40020028 	.word	0x40020028
 8005878:	40020040 	.word	0x40020040
 800587c:	40020058 	.word	0x40020058
 8005880:	40020070 	.word	0x40020070
 8005884:	40020088 	.word	0x40020088
 8005888:	400200a0 	.word	0x400200a0
 800588c:	400200b8 	.word	0x400200b8
 8005890:	40020410 	.word	0x40020410
 8005894:	40020428 	.word	0x40020428
 8005898:	40020440 	.word	0x40020440
 800589c:	40020458 	.word	0x40020458
 80058a0:	40020470 	.word	0x40020470
 80058a4:	40020488 	.word	0x40020488
 80058a8:	400204a0 	.word	0x400204a0
 80058ac:	400204b8 	.word	0x400204b8
 80058b0:	58025408 	.word	0x58025408
 80058b4:	5802541c 	.word	0x5802541c
 80058b8:	58025430 	.word	0x58025430
 80058bc:	58025444 	.word	0x58025444
 80058c0:	58025458 	.word	0x58025458
 80058c4:	5802546c 	.word	0x5802546c
 80058c8:	58025480 	.word	0x58025480
 80058cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d160      	bne.n	800599c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a8c      	ldr	r2, [pc, #560]	; (8005b10 <HAL_DMA_IRQHandler+0xca8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d04a      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a8a      	ldr	r2, [pc, #552]	; (8005b14 <HAL_DMA_IRQHandler+0xcac>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d045      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a89      	ldr	r2, [pc, #548]	; (8005b18 <HAL_DMA_IRQHandler+0xcb0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d040      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a87      	ldr	r2, [pc, #540]	; (8005b1c <HAL_DMA_IRQHandler+0xcb4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d03b      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a86      	ldr	r2, [pc, #536]	; (8005b20 <HAL_DMA_IRQHandler+0xcb8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d036      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a84      	ldr	r2, [pc, #528]	; (8005b24 <HAL_DMA_IRQHandler+0xcbc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d031      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a83      	ldr	r2, [pc, #524]	; (8005b28 <HAL_DMA_IRQHandler+0xcc0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d02c      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a81      	ldr	r2, [pc, #516]	; (8005b2c <HAL_DMA_IRQHandler+0xcc4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d027      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a80      	ldr	r2, [pc, #512]	; (8005b30 <HAL_DMA_IRQHandler+0xcc8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d022      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a7e      	ldr	r2, [pc, #504]	; (8005b34 <HAL_DMA_IRQHandler+0xccc>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01d      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a7d      	ldr	r2, [pc, #500]	; (8005b38 <HAL_DMA_IRQHandler+0xcd0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d018      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a7b      	ldr	r2, [pc, #492]	; (8005b3c <HAL_DMA_IRQHandler+0xcd4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a7a      	ldr	r2, [pc, #488]	; (8005b40 <HAL_DMA_IRQHandler+0xcd8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a78      	ldr	r2, [pc, #480]	; (8005b44 <HAL_DMA_IRQHandler+0xcdc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d009      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a77      	ldr	r2, [pc, #476]	; (8005b48 <HAL_DMA_IRQHandler+0xce0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d004      	beq.n	800597a <HAL_DMA_IRQHandler+0xb12>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a75      	ldr	r2, [pc, #468]	; (8005b4c <HAL_DMA_IRQHandler+0xce4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d108      	bne.n	800598c <HAL_DMA_IRQHandler+0xb24>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0208 	bic.w	r2, r2, #8
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e007      	b.n	800599c <HAL_DMA_IRQHandler+0xb34>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8165 	beq.w	8005c70 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059ae:	e15f      	b.n	8005c70 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2202      	movs	r2, #2
 80059ba:	409a      	lsls	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4013      	ands	r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80c5 	beq.w	8005b50 <HAL_DMA_IRQHandler+0xce8>
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80bf 	beq.w	8005b50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	2202      	movs	r2, #2
 80059dc:	409a      	lsls	r2, r3
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d018      	beq.n	8005a1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 813a 	beq.w	8005c74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a08:	e134      	b.n	8005c74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8130 	beq.w	8005c74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a1c:	e12a      	b.n	8005c74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d168      	bne.n	8005afa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <HAL_DMA_IRQHandler+0xca8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d04a      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a37      	ldr	r2, [pc, #220]	; (8005b14 <HAL_DMA_IRQHandler+0xcac>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d045      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a35      	ldr	r2, [pc, #212]	; (8005b18 <HAL_DMA_IRQHandler+0xcb0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d040      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a34      	ldr	r2, [pc, #208]	; (8005b1c <HAL_DMA_IRQHandler+0xcb4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d03b      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a32      	ldr	r2, [pc, #200]	; (8005b20 <HAL_DMA_IRQHandler+0xcb8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d036      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a31      	ldr	r2, [pc, #196]	; (8005b24 <HAL_DMA_IRQHandler+0xcbc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d031      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2f      	ldr	r2, [pc, #188]	; (8005b28 <HAL_DMA_IRQHandler+0xcc0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d02c      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2e      	ldr	r2, [pc, #184]	; (8005b2c <HAL_DMA_IRQHandler+0xcc4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d027      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2c      	ldr	r2, [pc, #176]	; (8005b30 <HAL_DMA_IRQHandler+0xcc8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d022      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2b      	ldr	r2, [pc, #172]	; (8005b34 <HAL_DMA_IRQHandler+0xccc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d01d      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <HAL_DMA_IRQHandler+0xcd0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d018      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a28      	ldr	r2, [pc, #160]	; (8005b3c <HAL_DMA_IRQHandler+0xcd4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <HAL_DMA_IRQHandler+0xcd8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a25      	ldr	r2, [pc, #148]	; (8005b44 <HAL_DMA_IRQHandler+0xcdc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <HAL_DMA_IRQHandler+0xce0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0xc60>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a22      	ldr	r2, [pc, #136]	; (8005b4c <HAL_DMA_IRQHandler+0xce4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d108      	bne.n	8005ada <HAL_DMA_IRQHandler+0xc72>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0214 	bic.w	r2, r2, #20
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e007      	b.n	8005aea <HAL_DMA_IRQHandler+0xc82>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 020a 	bic.w	r2, r2, #10
 8005ae8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80b8 	beq.w	8005c74 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b0c:	e0b2      	b.n	8005c74 <HAL_DMA_IRQHandler+0xe0c>
 8005b0e:	bf00      	nop
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	2208      	movs	r2, #8
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 8088 	beq.w	8005c76 <HAL_DMA_IRQHandler+0xe0e>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8082 	beq.w	8005c76 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a41      	ldr	r2, [pc, #260]	; (8005c7c <HAL_DMA_IRQHandler+0xe14>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d04a      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <HAL_DMA_IRQHandler+0xe18>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d045      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3e      	ldr	r2, [pc, #248]	; (8005c84 <HAL_DMA_IRQHandler+0xe1c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d040      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <HAL_DMA_IRQHandler+0xe20>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d03b      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a3b      	ldr	r2, [pc, #236]	; (8005c8c <HAL_DMA_IRQHandler+0xe24>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d036      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a39      	ldr	r2, [pc, #228]	; (8005c90 <HAL_DMA_IRQHandler+0xe28>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d031      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a38      	ldr	r2, [pc, #224]	; (8005c94 <HAL_DMA_IRQHandler+0xe2c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d02c      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a36      	ldr	r2, [pc, #216]	; (8005c98 <HAL_DMA_IRQHandler+0xe30>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d027      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a35      	ldr	r2, [pc, #212]	; (8005c9c <HAL_DMA_IRQHandler+0xe34>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d022      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a33      	ldr	r2, [pc, #204]	; (8005ca0 <HAL_DMA_IRQHandler+0xe38>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01d      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a32      	ldr	r2, [pc, #200]	; (8005ca4 <HAL_DMA_IRQHandler+0xe3c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d018      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a30      	ldr	r2, [pc, #192]	; (8005ca8 <HAL_DMA_IRQHandler+0xe40>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2f      	ldr	r2, [pc, #188]	; (8005cac <HAL_DMA_IRQHandler+0xe44>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2d      	ldr	r2, [pc, #180]	; (8005cb0 <HAL_DMA_IRQHandler+0xe48>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2c      	ldr	r2, [pc, #176]	; (8005cb4 <HAL_DMA_IRQHandler+0xe4c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xdaa>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2a      	ldr	r2, [pc, #168]	; (8005cb8 <HAL_DMA_IRQHandler+0xe50>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d108      	bne.n	8005c24 <HAL_DMA_IRQHandler+0xdbc>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 021c 	bic.w	r2, r2, #28
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e007      	b.n	8005c34 <HAL_DMA_IRQHandler+0xdcc>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 020e 	bic.w	r2, r2, #14
 8005c32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	4798      	blx	r3
 8005c6a:	e004      	b.n	8005c76 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005c6c:	bf00      	nop
 8005c6e:	e002      	b.n	8005c76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c70:	bf00      	nop
 8005c72:	e000      	b.n	8005c76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c76:	3728      	adds	r7, #40	; 0x28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40020010 	.word	0x40020010
 8005c80:	40020028 	.word	0x40020028
 8005c84:	40020040 	.word	0x40020040
 8005c88:	40020058 	.word	0x40020058
 8005c8c:	40020070 	.word	0x40020070
 8005c90:	40020088 	.word	0x40020088
 8005c94:	400200a0 	.word	0x400200a0
 8005c98:	400200b8 	.word	0x400200b8
 8005c9c:	40020410 	.word	0x40020410
 8005ca0:	40020428 	.word	0x40020428
 8005ca4:	40020440 	.word	0x40020440
 8005ca8:	40020458 	.word	0x40020458
 8005cac:	40020470 	.word	0x40020470
 8005cb0:	40020488 	.word	0x40020488
 8005cb4:	400204a0 	.word	0x400204a0
 8005cb8:	400204b8 	.word	0x400204b8

08005cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a42      	ldr	r2, [pc, #264]	; (8005dd4 <DMA_CalcBaseAndBitshift+0x118>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d04a      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a41      	ldr	r2, [pc, #260]	; (8005dd8 <DMA_CalcBaseAndBitshift+0x11c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d045      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3f      	ldr	r2, [pc, #252]	; (8005ddc <DMA_CalcBaseAndBitshift+0x120>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d040      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a3e      	ldr	r2, [pc, #248]	; (8005de0 <DMA_CalcBaseAndBitshift+0x124>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d03b      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a3c      	ldr	r2, [pc, #240]	; (8005de4 <DMA_CalcBaseAndBitshift+0x128>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d036      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a3b      	ldr	r2, [pc, #236]	; (8005de8 <DMA_CalcBaseAndBitshift+0x12c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d031      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a39      	ldr	r2, [pc, #228]	; (8005dec <DMA_CalcBaseAndBitshift+0x130>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d02c      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a38      	ldr	r2, [pc, #224]	; (8005df0 <DMA_CalcBaseAndBitshift+0x134>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d027      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a36      	ldr	r2, [pc, #216]	; (8005df4 <DMA_CalcBaseAndBitshift+0x138>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d022      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a35      	ldr	r2, [pc, #212]	; (8005df8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d01d      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a33      	ldr	r2, [pc, #204]	; (8005dfc <DMA_CalcBaseAndBitshift+0x140>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d018      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a32      	ldr	r2, [pc, #200]	; (8005e00 <DMA_CalcBaseAndBitshift+0x144>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d013      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a30      	ldr	r2, [pc, #192]	; (8005e04 <DMA_CalcBaseAndBitshift+0x148>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00e      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2f      	ldr	r2, [pc, #188]	; (8005e08 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d009      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2d      	ldr	r2, [pc, #180]	; (8005e0c <DMA_CalcBaseAndBitshift+0x150>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <DMA_CalcBaseAndBitshift+0xa8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a2c      	ldr	r2, [pc, #176]	; (8005e10 <DMA_CalcBaseAndBitshift+0x154>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d101      	bne.n	8005d68 <DMA_CalcBaseAndBitshift+0xac>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <DMA_CalcBaseAndBitshift+0xae>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d024      	beq.n	8005db8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	3b10      	subs	r3, #16
 8005d76:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <DMA_CalcBaseAndBitshift+0x158>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	4a24      	ldr	r2, [pc, #144]	; (8005e18 <DMA_CalcBaseAndBitshift+0x15c>)
 8005d88:	5cd3      	ldrb	r3, [r2, r3]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d908      	bls.n	8005da8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4b1f      	ldr	r3, [pc, #124]	; (8005e1c <DMA_CalcBaseAndBitshift+0x160>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	1d1a      	adds	r2, r3, #4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	659a      	str	r2, [r3, #88]	; 0x58
 8005da6:	e00d      	b.n	8005dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <DMA_CalcBaseAndBitshift+0x160>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6593      	str	r3, [r2, #88]	; 0x58
 8005db6:	e005      	b.n	8005dc4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40020010 	.word	0x40020010
 8005dd8:	40020028 	.word	0x40020028
 8005ddc:	40020040 	.word	0x40020040
 8005de0:	40020058 	.word	0x40020058
 8005de4:	40020070 	.word	0x40020070
 8005de8:	40020088 	.word	0x40020088
 8005dec:	400200a0 	.word	0x400200a0
 8005df0:	400200b8 	.word	0x400200b8
 8005df4:	40020410 	.word	0x40020410
 8005df8:	40020428 	.word	0x40020428
 8005dfc:	40020440 	.word	0x40020440
 8005e00:	40020458 	.word	0x40020458
 8005e04:	40020470 	.word	0x40020470
 8005e08:	40020488 	.word	0x40020488
 8005e0c:	400204a0 	.word	0x400204a0
 8005e10:	400204b8 	.word	0x400204b8
 8005e14:	aaaaaaab 	.word	0xaaaaaaab
 8005e18:	080110cc 	.word	0x080110cc
 8005e1c:	fffffc00 	.word	0xfffffc00

08005e20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d120      	bne.n	8005e76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d858      	bhi.n	8005eee <DMA_CheckFifoParam+0xce>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <DMA_CheckFifoParam+0x24>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e67 	.word	0x08005e67
 8005e4c:	08005e55 	.word	0x08005e55
 8005e50:	08005eef 	.word	0x08005eef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d048      	beq.n	8005ef2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e64:	e045      	b.n	8005ef2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e6e:	d142      	bne.n	8005ef6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e74:	e03f      	b.n	8005ef6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7e:	d123      	bne.n	8005ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d838      	bhi.n	8005efa <DMA_CheckFifoParam+0xda>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <DMA_CheckFifoParam+0x70>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005ea1 	.word	0x08005ea1
 8005e94:	08005ea7 	.word	0x08005ea7
 8005e98:	08005ea1 	.word	0x08005ea1
 8005e9c:	08005eb9 	.word	0x08005eb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ea4:	e030      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d025      	beq.n	8005efe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005eb6:	e022      	b.n	8005efe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ec0:	d11f      	bne.n	8005f02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ec6:	e01c      	b.n	8005f02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d902      	bls.n	8005ed6 <DMA_CheckFifoParam+0xb6>
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d003      	beq.n	8005edc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ed4:	e018      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8005eda:	e015      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00e      	beq.n	8005f06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
    break;
 8005eec:	e00b      	b.n	8005f06 <DMA_CheckFifoParam+0xe6>
        break;
 8005eee:	bf00      	nop
 8005ef0:	e00a      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>
        break;
 8005ef2:	bf00      	nop
 8005ef4:	e008      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>
        break;
 8005ef6:	bf00      	nop
 8005ef8:	e006      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>
        break;
 8005efa:	bf00      	nop
 8005efc:	e004      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>
        break;
 8005efe:	bf00      	nop
 8005f00:	e002      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>
        break;
 8005f02:	bf00      	nop
 8005f04:	e000      	b.n	8005f08 <DMA_CheckFifoParam+0xe8>
    break;
 8005f06:	bf00      	nop
    }
  }

  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop

08005f18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a38      	ldr	r2, [pc, #224]	; (800600c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d022      	beq.n	8005f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a36      	ldr	r2, [pc, #216]	; (8006010 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d01d      	beq.n	8005f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a35      	ldr	r2, [pc, #212]	; (8006014 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d018      	beq.n	8005f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a33      	ldr	r2, [pc, #204]	; (8006018 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a32      	ldr	r2, [pc, #200]	; (800601c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a30      	ldr	r2, [pc, #192]	; (8006020 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2f      	ldr	r2, [pc, #188]	; (8006024 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2d      	ldr	r2, [pc, #180]	; (8006028 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d101      	bne.n	8005f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01a      	beq.n	8005fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	3b08      	subs	r3, #8
 8005f88:	4a28      	ldr	r2, [pc, #160]	; (800602c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4b26      	ldr	r3, [pc, #152]	; (8006030 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a24      	ldr	r2, [pc, #144]	; (8006034 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005fa4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	2201      	movs	r2, #1
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005fb4:	e024      	b.n	8006000 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	3b10      	subs	r3, #16
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d806      	bhi.n	8005fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d902      	bls.n	8005fde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4b18      	ldr	r3, [pc, #96]	; (8006044 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a16      	ldr	r2, [pc, #88]	; (8006048 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ff0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	58025408 	.word	0x58025408
 8006010:	5802541c 	.word	0x5802541c
 8006014:	58025430 	.word	0x58025430
 8006018:	58025444 	.word	0x58025444
 800601c:	58025458 	.word	0x58025458
 8006020:	5802546c 	.word	0x5802546c
 8006024:	58025480 	.word	0x58025480
 8006028:	58025494 	.word	0x58025494
 800602c:	cccccccd 	.word	0xcccccccd
 8006030:	16009600 	.word	0x16009600
 8006034:	58025880 	.word	0x58025880
 8006038:	aaaaaaab 	.word	0xaaaaaaab
 800603c:	400204b8 	.word	0x400204b8
 8006040:	4002040f 	.word	0x4002040f
 8006044:	10008200 	.word	0x10008200
 8006048:	40020880 	.word	0x40020880

0800604c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04a      	beq.n	80060f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d847      	bhi.n	80060f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a25      	ldr	r2, [pc, #148]	; (8006104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d022      	beq.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a24      	ldr	r2, [pc, #144]	; (8006108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d01d      	beq.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a22      	ldr	r2, [pc, #136]	; (800610c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d018      	beq.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a21      	ldr	r2, [pc, #132]	; (8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00e      	beq.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d009      	beq.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1c      	ldr	r2, [pc, #112]	; (800611c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d101      	bne.n	80060bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80060bc:	2300      	movs	r3, #0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4b17      	ldr	r3, [pc, #92]	; (8006124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	461a      	mov	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a15      	ldr	r2, [pc, #84]	; (8006128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80060d4:	671a      	str	r2, [r3, #112]	; 0x70
 80060d6:	e009      	b.n	80060ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4b14      	ldr	r3, [pc, #80]	; (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	461a      	mov	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a11      	ldr	r2, [pc, #68]	; (8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80060ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	2201      	movs	r2, #1
 80060f2:	409a      	lsls	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80060f8:	bf00      	nop
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	58025408 	.word	0x58025408
 8006108:	5802541c 	.word	0x5802541c
 800610c:	58025430 	.word	0x58025430
 8006110:	58025444 	.word	0x58025444
 8006114:	58025458 	.word	0x58025458
 8006118:	5802546c 	.word	0x5802546c
 800611c:	58025480 	.word	0x58025480
 8006120:	58025494 	.word	0x58025494
 8006124:	1600963f 	.word	0x1600963f
 8006128:	58025940 	.word	0x58025940
 800612c:	1000823f 	.word	0x1000823f
 8006130:	40020940 	.word	0x40020940

08006134 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	7a1b      	ldrb	r3, [r3, #8]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d155      	bne.n	80061fa <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a4b      	ldr	r2, [pc, #300]	; (8006280 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d049      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a49      	ldr	r2, [pc, #292]	; (8006284 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d044      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a48      	ldr	r2, [pc, #288]	; (8006288 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d03f      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a46      	ldr	r2, [pc, #280]	; (800628c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d03a      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a45      	ldr	r2, [pc, #276]	; (8006290 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d035      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a43      	ldr	r2, [pc, #268]	; (8006294 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d030      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a42      	ldr	r2, [pc, #264]	; (8006298 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d02b      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a40      	ldr	r2, [pc, #256]	; (800629c <HAL_DMAEx_ConfigMuxSync+0x168>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d026      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a3f      	ldr	r2, [pc, #252]	; (80062a0 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d021      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a3d      	ldr	r2, [pc, #244]	; (80062a4 <HAL_DMAEx_ConfigMuxSync+0x170>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01c      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a3c      	ldr	r2, [pc, #240]	; (80062a8 <HAL_DMAEx_ConfigMuxSync+0x174>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d017      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a3a      	ldr	r2, [pc, #232]	; (80062ac <HAL_DMAEx_ConfigMuxSync+0x178>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d012      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a39      	ldr	r2, [pc, #228]	; (80062b0 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00d      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a37      	ldr	r2, [pc, #220]	; (80062b4 <HAL_DMAEx_ConfigMuxSync+0x180>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d008      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a36      	ldr	r2, [pc, #216]	; (80062b8 <HAL_DMAEx_ConfigMuxSync+0x184>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <HAL_DMAEx_ConfigMuxSync+0xb8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a34      	ldr	r2, [pc, #208]	; (80062bc <HAL_DMAEx_ConfigMuxSync+0x188>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b01      	cmp	r3, #1
 8006204:	d131      	bne.n	800626a <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8006210:	2302      	movs	r3, #2
 8006212:	e02f      	b.n	8006274 <HAL_DMAEx_ConfigMuxSync+0x140>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006226:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 800622a:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	b2d9      	uxtb	r1, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	061a      	lsls	r2, r3, #24
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	3b01      	subs	r3, #1
 800623e:	04db      	lsls	r3, r3, #19
 8006240:	431a      	orrs	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	431a      	orrs	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	7a1b      	ldrb	r3, [r3, #8]
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	431a      	orrs	r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	7a5b      	ldrb	r3, [r3, #9]
 8006252:	025b      	lsls	r3, r3, #9
 8006254:	431a      	orrs	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	430a      	orrs	r2, r1
 800625c:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e004      	b.n	8006274 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006270:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
  }
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40020010 	.word	0x40020010
 8006284:	40020028 	.word	0x40020028
 8006288:	40020040 	.word	0x40020040
 800628c:	40020058 	.word	0x40020058
 8006290:	40020070 	.word	0x40020070
 8006294:	40020088 	.word	0x40020088
 8006298:	400200a0 	.word	0x400200a0
 800629c:	400200b8 	.word	0x400200b8
 80062a0:	40020410 	.word	0x40020410
 80062a4:	40020428 	.word	0x40020428
 80062a8:	40020440 	.word	0x40020440
 80062ac:	40020458 	.word	0x40020458
 80062b0:	40020470 	.word	0x40020470
 80062b4:	40020488 	.word	0x40020488
 80062b8:	400204a0 	.word	0x400204a0
 80062bc:	400204b8 	.word	0x400204b8

080062c0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01a      	beq.n	800630e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d022      	beq.n	800635c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006320:	4013      	ands	r3, r2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d01a      	beq.n	800635c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006334:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800633e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
      }
    }
  }
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e0c6      	b.n	8006504 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fb faa6 	bl	80018d0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2223      	movs	r2, #35	; 0x23
 8006388:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800638a:	4b60      	ldr	r3, [pc, #384]	; (800650c <HAL_ETH_Init+0x1a8>)
 800638c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006390:	4a5e      	ldr	r2, [pc, #376]	; (800650c <HAL_ETH_Init+0x1a8>)
 8006392:	f043 0302 	orr.w	r3, r3, #2
 8006396:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800639a:	4b5c      	ldr	r3, [pc, #368]	; (800650c <HAL_ETH_Init+0x1a8>)
 800639c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7a1b      	ldrb	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d103      	bne.n	80063b8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80063b0:	2000      	movs	r0, #0
 80063b2:	f7fc fbb1 	bl	8002b18 <HAL_SYSCFG_ETHInterfaceSelect>
 80063b6:	e003      	b.n	80063c0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80063b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80063bc:	f7fc fbac 	bl	8002b18 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063d8:	f7fc fb64 	bl	8002aa4 <HAL_GetTick>
 80063dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80063de:	e00f      	b.n	8006400 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80063e0:	f7fc fb60 	bl	8002aa4 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80063ee:	d907      	bls.n	8006400 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2204      	movs	r2, #4
 80063f4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	22e0      	movs	r2, #224	; 0xe0
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e081      	b.n	8006504 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e6      	bne.n	80063e0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fac0 	bl	8006998 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006418:	f002 fede 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 800641c:	4602      	mov	r2, r0
 800641e:	4b3c      	ldr	r3, [pc, #240]	; (8006510 <HAL_ETH_Init+0x1ac>)
 8006420:	fba3 2302 	umull	r2, r3, r3, r2
 8006424:	0c9a      	lsrs	r2, r3, #18
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3a01      	subs	r2, #1
 800642c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fa13 	bl	800685c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800644c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006450:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	22e0      	movs	r2, #224	; 0xe0
 8006468:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e04a      	b.n	8006504 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	f241 1308 	movw	r3, #4360	; 0x1108
 8006476:	4413      	add	r3, r2
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b26      	ldr	r3, [pc, #152]	; (8006514 <HAL_ETH_Init+0x1b0>)
 800647c:	4013      	ands	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6952      	ldr	r2, [r2, #20]
 8006482:	0052      	lsls	r2, r2, #1
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	6809      	ldr	r1, [r1, #0]
 8006488:	431a      	orrs	r2, r3
 800648a:	f241 1308 	movw	r3, #4360	; 0x1108
 800648e:	440b      	add	r3, r1
 8006490:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fad8 	bl	8006a48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fb1c 	bl	8006ad6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	3305      	adds	r3, #5
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	021a      	lsls	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	3304      	adds	r3, #4
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	4619      	mov	r1, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	3303      	adds	r3, #3
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	061a      	lsls	r2, r3, #24
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	3302      	adds	r3, #2
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	041b      	lsls	r3, r3, #16
 80064d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	3301      	adds	r3, #1
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80064ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2210      	movs	r2, #16
 80064fa:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2210      	movs	r2, #16
 8006500:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	58024400 	.word	0x58024400
 8006510:	431bde83 	.word	0x431bde83
 8006514:	ffff8001 	.word	0xffff8001

08006518 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800652a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	791b      	ldrb	r3, [r3, #4]
 8006530:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8006532:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	7b1b      	ldrb	r3, [r3, #12]
 8006538:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800653a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	7b5b      	ldrb	r3, [r3, #13]
 8006540:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006542:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	7b9b      	ldrb	r3, [r3, #14]
 8006548:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800654a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	7bdb      	ldrb	r3, [r3, #15]
 8006550:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006552:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	7c12      	ldrb	r2, [r2, #16]
 8006558:	2a00      	cmp	r2, #0
 800655a:	d102      	bne.n	8006562 <ETH_SetMACConfig+0x4a>
 800655c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006560:	e000      	b.n	8006564 <ETH_SetMACConfig+0x4c>
 8006562:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006564:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	7c52      	ldrb	r2, [r2, #17]
 800656a:	2a00      	cmp	r2, #0
 800656c:	d102      	bne.n	8006574 <ETH_SetMACConfig+0x5c>
 800656e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006572:	e000      	b.n	8006576 <ETH_SetMACConfig+0x5e>
 8006574:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006576:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	7c9b      	ldrb	r3, [r3, #18]
 800657c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800657e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8006584:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800658a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	7f1b      	ldrb	r3, [r3, #28]
 8006590:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8006592:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	7f5b      	ldrb	r3, [r3, #29]
 8006598:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800659a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	7f92      	ldrb	r2, [r2, #30]
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	d102      	bne.n	80065aa <ETH_SetMACConfig+0x92>
 80065a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a8:	e000      	b.n	80065ac <ETH_SetMACConfig+0x94>
 80065aa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80065ac:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	7fdb      	ldrb	r3, [r3, #31]
 80065b2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80065b4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80065bc:	2a00      	cmp	r2, #0
 80065be:	d102      	bne.n	80065c6 <ETH_SetMACConfig+0xae>
 80065c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065c4:	e000      	b.n	80065c8 <ETH_SetMACConfig+0xb0>
 80065c6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80065c8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80065ce:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80065d8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	4b56      	ldr	r3, [pc, #344]	; (8006744 <ETH_SetMACConfig+0x22c>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	68f9      	ldr	r1, [r7, #12]
 80065f2:	430b      	orrs	r3, r1
 80065f4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006602:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006604:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800660c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800660e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006616:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006618:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006620:	2a00      	cmp	r2, #0
 8006622:	d102      	bne.n	800662a <ETH_SetMACConfig+0x112>
 8006624:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006628:	e000      	b.n	800662c <ETH_SetMACConfig+0x114>
 800662a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800662c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b42      	ldr	r3, [pc, #264]	; (8006748 <ETH_SetMACConfig+0x230>)
 800663e:	4013      	ands	r3, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	68f9      	ldr	r1, [r7, #12]
 8006646:	430b      	orrs	r3, r1
 8006648:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006650:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	4b3a      	ldr	r3, [pc, #232]	; (800674c <ETH_SetMACConfig+0x234>)
 8006662:	4013      	ands	r3, r2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	430b      	orrs	r3, r1
 800666c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006674:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800667a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006682:	2a00      	cmp	r2, #0
 8006684:	d101      	bne.n	800668a <ETH_SetMACConfig+0x172>
 8006686:	2280      	movs	r2, #128	; 0x80
 8006688:	e000      	b.n	800668c <ETH_SetMACConfig+0x174>
 800668a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800668c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800669e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80066a2:	4013      	ands	r3, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	68f9      	ldr	r1, [r7, #12]
 80066aa:	430b      	orrs	r3, r1
 80066ac:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80066b4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80066bc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ca:	f023 0103 	bic.w	r1, r3, #3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80066e2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80066fe:	2a00      	cmp	r2, #0
 8006700:	d101      	bne.n	8006706 <ETH_SetMACConfig+0x1ee>
 8006702:	2240      	movs	r2, #64	; 0x40
 8006704:	e000      	b.n	8006708 <ETH_SetMACConfig+0x1f0>
 8006706:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006708:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006710:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006712:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800671a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006728:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	430a      	orrs	r2, r1
 8006734:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	00048083 	.word	0x00048083
 8006748:	c0f88000 	.word	0xc0f88000
 800674c:	fffffef0 	.word	0xfffffef0

08006750 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b38      	ldr	r3, [pc, #224]	; (8006848 <ETH_SetDMAConfig+0xf8>)
 8006766:	4013      	ands	r3, r2
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	6809      	ldr	r1, [r1, #0]
 8006770:	431a      	orrs	r2, r3
 8006772:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8006776:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	791b      	ldrb	r3, [r3, #4]
 800677c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006782:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	7b1b      	ldrb	r3, [r3, #12]
 8006788:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	f241 0304 	movw	r3, #4100	; 0x1004
 8006796:	4413      	add	r3, r2
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b2c      	ldr	r3, [pc, #176]	; (800684c <ETH_SetDMAConfig+0xfc>)
 800679c:	4013      	ands	r3, r2
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6811      	ldr	r1, [r2, #0]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	f241 0304 	movw	r3, #4100	; 0x1004
 80067aa:	440b      	add	r3, r1
 80067ac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	7b5b      	ldrb	r3, [r3, #13]
 80067b2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b22      	ldr	r3, [pc, #136]	; (8006850 <ETH_SetDMAConfig+0x100>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6811      	ldr	r1, [r2, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	431a      	orrs	r2, r3
 80067d2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80067d6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	7d1b      	ldrb	r3, [r3, #20]
 80067e0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80067e2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	7f5b      	ldrb	r3, [r3, #29]
 80067e8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	f241 1304 	movw	r3, #4356	; 0x1104
 80067f6:	4413      	add	r3, r2
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b16      	ldr	r3, [pc, #88]	; (8006854 <ETH_SetDMAConfig+0x104>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6811      	ldr	r1, [r2, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	431a      	orrs	r2, r3
 8006806:	f241 1304 	movw	r3, #4356	; 0x1104
 800680a:	440b      	add	r3, r1
 800680c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	7f1b      	ldrb	r3, [r3, #28]
 8006812:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	f241 1308 	movw	r3, #4360	; 0x1108
 8006824:	4413      	add	r3, r2
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <ETH_SetDMAConfig+0x108>)
 800682a:	4013      	ands	r3, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6811      	ldr	r1, [r2, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	431a      	orrs	r2, r3
 8006834:	f241 1308 	movw	r3, #4360	; 0x1108
 8006838:	440b      	add	r3, r1
 800683a:	601a      	str	r2, [r3, #0]
}
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	ffff87fd 	.word	0xffff87fd
 800684c:	ffff2ffe 	.word	0xffff2ffe
 8006850:	fffec000 	.word	0xfffec000
 8006854:	ffc0efef 	.word	0xffc0efef
 8006858:	7fc0ffff 	.word	0x7fc0ffff

0800685c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0a4      	sub	sp, #144	; 0x90
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800686a:	2300      	movs	r3, #0
 800686c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800686e:	2300      	movs	r3, #0
 8006870:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006874:	2300      	movs	r3, #0
 8006876:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006886:	2301      	movs	r3, #1
 8006888:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800688c:	2300      	movs	r3, #0
 800688e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800689c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80068b4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80068b8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80068c0:	2300      	movs	r3, #0
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80068d6:	2300      	movs	r3, #0
 80068d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80068da:	2300      	movs	r3, #0
 80068dc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80068de:	2300      	movs	r3, #0
 80068e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80068e2:	2300      	movs	r3, #0
 80068e4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80068f4:	2320      	movs	r3, #32
 80068f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006900:	2300      	movs	r3, #0
 8006902:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006906:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800690c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006910:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006912:	2300      	movs	r3, #0
 8006914:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006918:	2302      	movs	r3, #2
 800691a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800692a:	2300      	movs	r3, #0
 800692c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006936:	2300      	movs	r3, #0
 8006938:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fde6 	bl	8006518 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800694c:	2301      	movs	r3, #1
 800694e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006950:	2301      	movs	r3, #1
 8006952:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006954:	2300      	movs	r3, #0
 8006956:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006958:	2300      	movs	r3, #0
 800695a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800695e:	2300      	movs	r3, #0
 8006960:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006962:	2300      	movs	r3, #0
 8006964:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006966:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800696a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800696c:	2300      	movs	r3, #0
 800696e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006970:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006974:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006976:	2300      	movs	r3, #0
 8006978:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800697c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006980:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fee1 	bl	8006750 <ETH_SetDMAConfig>
}
 800698e:	bf00      	nop
 8006990:	3790      	adds	r7, #144	; 0x90
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80069b2:	f002 fc11 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 80069b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d908      	bls.n	80069d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4a1d      	ldr	r2, [pc, #116]	; (8006a38 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d804      	bhi.n	80069d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	e027      	b.n	8006a22 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d908      	bls.n	80069ec <ETH_MAC_MDIO_ClkConfig+0x54>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a17      	ldr	r2, [pc, #92]	; (8006a3c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d804      	bhi.n	80069ec <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e01a      	b.n	8006a22 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d903      	bls.n	80069fc <ETH_MAC_MDIO_ClkConfig+0x64>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4a12      	ldr	r2, [pc, #72]	; (8006a40 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d911      	bls.n	8006a20 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d908      	bls.n	8006a16 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4a0f      	ldr	r2, [pc, #60]	; (8006a44 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d804      	bhi.n	8006a16 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e005      	b.n	8006a22 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e000      	b.n	8006a22 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006a20:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	01312cff 	.word	0x01312cff
 8006a38:	02160ebf 	.word	0x02160ebf
 8006a3c:	039386ff 	.word	0x039386ff
 8006a40:	05f5e0ff 	.word	0x05f5e0ff
 8006a44:	08f0d17f 	.word	0x08f0d17f

08006a48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e01d      	b.n	8006a92 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68d9      	ldr	r1, [r3, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4413      	add	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	440b      	add	r3, r1
 8006a66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2200      	movs	r2, #0
 8006a72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	3206      	adds	r2, #6
 8006a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d9de      	bls.n	8006a56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	f241 132c 	movw	r3, #4396	; 0x112c
 8006aa6:	4413      	add	r3, r2
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68d9      	ldr	r1, [r3, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	f241 1314 	movw	r3, #4372	; 0x1114
 8006ab8:	4413      	add	r3, r2
 8006aba:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006ac8:	601a      	str	r2, [r3, #0]
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e024      	b.n	8006b2e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6919      	ldr	r1, [r3, #16]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4613      	mov	r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	4413      	add	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	440b      	add	r3, r1
 8006af4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2200      	movs	r2, #0
 8006b00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2200      	movs	r2, #0
 8006b06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2200      	movs	r2, #0
 8006b12:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2200      	movs	r2, #0
 8006b18:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	330a      	adds	r3, #10
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d9d7      	bls.n	8006ae4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	f241 1330 	movw	r3, #4400	; 0x1130
 8006b5a:	4413      	add	r3, r2
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6919      	ldr	r1, [r3, #16]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	f241 131c 	movw	r3, #4380	; 0x111c
 8006b6c:	4413      	add	r3, r2
 8006b6e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	f241 1328 	movw	r3, #4392	; 0x1128
 8006b80:	4413      	add	r3, r2
 8006b82:	6019      	str	r1, [r3, #0]
}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b089      	sub	sp, #36	; 0x24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b9e:	4b89      	ldr	r3, [pc, #548]	; (8006dc4 <HAL_GPIO_Init+0x234>)
 8006ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ba2:	e194      	b.n	8006ece <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	2101      	movs	r1, #1
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 8186 	beq.w	8006ec8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d003      	beq.n	8006bcc <HAL_GPIO_Init+0x3c>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b12      	cmp	r3, #18
 8006bca:	d123      	bne.n	8006c14 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	08da      	lsrs	r2, r3, #3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3208      	adds	r2, #8
 8006bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	220f      	movs	r2, #15
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	43db      	mvns	r3, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4013      	ands	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	08da      	lsrs	r2, r3, #3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3208      	adds	r2, #8
 8006c0e:	69b9      	ldr	r1, [r7, #24]
 8006c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	2203      	movs	r2, #3
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	43db      	mvns	r3, r3
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 0203 	and.w	r2, r3, #3
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d00b      	beq.n	8006c68 <HAL_GPIO_Init+0xd8>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d007      	beq.n	8006c68 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c5c:	2b11      	cmp	r3, #17
 8006c5e:	d003      	beq.n	8006c68 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b12      	cmp	r3, #18
 8006c66:	d130      	bne.n	8006cca <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	2203      	movs	r2, #3
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	4013      	ands	r3, r2
 8006cac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	f003 0201 	and.w	r2, r3, #1
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	2203      	movs	r2, #3
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	fa02 f303 	lsl.w	r3, r2, r3
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80e0 	beq.w	8006ec8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d08:	4b2f      	ldr	r3, [pc, #188]	; (8006dc8 <HAL_GPIO_Init+0x238>)
 8006d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d0e:	4a2e      	ldr	r2, [pc, #184]	; (8006dc8 <HAL_GPIO_Init+0x238>)
 8006d10:	f043 0302 	orr.w	r3, r3, #2
 8006d14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d18:	4b2b      	ldr	r3, [pc, #172]	; (8006dc8 <HAL_GPIO_Init+0x238>)
 8006d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d26:	4a29      	ldr	r2, [pc, #164]	; (8006dcc <HAL_GPIO_Init+0x23c>)
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	089b      	lsrs	r3, r3, #2
 8006d2c:	3302      	adds	r3, #2
 8006d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	220f      	movs	r2, #15
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	43db      	mvns	r3, r3
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	4013      	ands	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a20      	ldr	r2, [pc, #128]	; (8006dd0 <HAL_GPIO_Init+0x240>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d052      	beq.n	8006df8 <HAL_GPIO_Init+0x268>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <HAL_GPIO_Init+0x244>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d031      	beq.n	8006dbe <HAL_GPIO_Init+0x22e>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a1e      	ldr	r2, [pc, #120]	; (8006dd8 <HAL_GPIO_Init+0x248>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d02b      	beq.n	8006dba <HAL_GPIO_Init+0x22a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <HAL_GPIO_Init+0x24c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d025      	beq.n	8006db6 <HAL_GPIO_Init+0x226>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <HAL_GPIO_Init+0x250>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01f      	beq.n	8006db2 <HAL_GPIO_Init+0x222>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <HAL_GPIO_Init+0x254>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d019      	beq.n	8006dae <HAL_GPIO_Init+0x21e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a1a      	ldr	r2, [pc, #104]	; (8006de8 <HAL_GPIO_Init+0x258>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <HAL_GPIO_Init+0x21a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a19      	ldr	r2, [pc, #100]	; (8006dec <HAL_GPIO_Init+0x25c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00d      	beq.n	8006da6 <HAL_GPIO_Init+0x216>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <HAL_GPIO_Init+0x260>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d007      	beq.n	8006da2 <HAL_GPIO_Init+0x212>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a17      	ldr	r2, [pc, #92]	; (8006df4 <HAL_GPIO_Init+0x264>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d101      	bne.n	8006d9e <HAL_GPIO_Init+0x20e>
 8006d9a:	2309      	movs	r3, #9
 8006d9c:	e02d      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006d9e:	230a      	movs	r3, #10
 8006da0:	e02b      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006da2:	2308      	movs	r3, #8
 8006da4:	e029      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006da6:	2307      	movs	r3, #7
 8006da8:	e027      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006daa:	2306      	movs	r3, #6
 8006dac:	e025      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006dae:	2305      	movs	r3, #5
 8006db0:	e023      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006db2:	2304      	movs	r3, #4
 8006db4:	e021      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006db6:	2303      	movs	r3, #3
 8006db8:	e01f      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e01d      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e01b      	b.n	8006dfa <HAL_GPIO_Init+0x26a>
 8006dc2:	bf00      	nop
 8006dc4:	58000080 	.word	0x58000080
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	58000400 	.word	0x58000400
 8006dd0:	58020000 	.word	0x58020000
 8006dd4:	58020400 	.word	0x58020400
 8006dd8:	58020800 	.word	0x58020800
 8006ddc:	58020c00 	.word	0x58020c00
 8006de0:	58021000 	.word	0x58021000
 8006de4:	58021400 	.word	0x58021400
 8006de8:	58021800 	.word	0x58021800
 8006dec:	58021c00 	.word	0x58021c00
 8006df0:	58022000 	.word	0x58022000
 8006df4:	58022400 	.word	0x58022400
 8006df8:	2300      	movs	r3, #0
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	f002 0203 	and.w	r2, r2, #3
 8006e00:	0092      	lsls	r2, r2, #2
 8006e02:	4093      	lsls	r3, r2
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e0a:	4938      	ldr	r1, [pc, #224]	; (8006eec <HAL_GPIO_Init+0x35c>)
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	089b      	lsrs	r3, r3, #2
 8006e10:	3302      	adds	r3, #2
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	4013      	ands	r3, r2
 8006e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	43db      	mvns	r3, r3
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f47f ae63 	bne.w	8006ba4 <HAL_GPIO_Init+0x14>
  }
}
 8006ede:	bf00      	nop
 8006ee0:	3724      	adds	r7, #36	; 0x24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	58000400 	.word	0x58000400

08006ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	807b      	strh	r3, [r7, #2]
 8006efc:	4613      	mov	r3, r2
 8006efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f00:	787b      	ldrb	r3, [r7, #1]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f06:	887a      	ldrh	r2, [r7, #2]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006f0c:	e003      	b.n	8006f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f0e:	887b      	ldrh	r3, [r7, #2]
 8006f10:	041a      	lsls	r2, r3, #16
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	619a      	str	r2, [r3, #24]
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e07f      	b.n	8007036 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fa fd6c 	bl	8001a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2224      	movs	r2, #36	; 0x24
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d107      	bne.n	8006f9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f9a:	609a      	str	r2, [r3, #8]
 8006f9c:	e006      	b.n	8006fac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d104      	bne.n	8006fbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6859      	ldr	r1, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <HAL_I2C_Init+0x11c>)
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	ea42 0103 	orr.w	r1, r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	021a      	lsls	r2, r3, #8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69d9      	ldr	r1, [r3, #28]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1a      	ldr	r2, [r3, #32]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	02008000 	.word	0x02008000

08007044 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
  }
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d010      	beq.n	80070be <HAL_I2C_ER_IRQHandler+0x46>
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	09db      	lsrs	r3, r3, #7
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ac:	f043 0201 	orr.w	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	0a9b      	lsrs	r3, r3, #10
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d010      	beq.n	80070ec <HAL_I2C_ER_IRQHandler+0x74>
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	09db      	lsrs	r3, r3, #7
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	f043 0208 	orr.w	r2, r3, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	0a5b      	lsrs	r3, r3, #9
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d010      	beq.n	800711a <HAL_I2C_ER_IRQHandler+0xa2>
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	09db      	lsrs	r3, r3, #7
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007108:	f043 0202 	orr.w	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007118:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f003 030b 	and.w	r3, r3, #11
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800712a:	68f9      	ldr	r1, [r7, #12]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fc21 	bl	8007974 <I2C_ITError>
  }
}
 8007132:	bf00      	nop
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
 800716e:	4613      	mov	r3, r2
 8007170:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b086      	sub	sp, #24
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <I2C_Slave_ISR_IT+0x24>
 80071da:	2302      	movs	r3, #2
 80071dc:	e0ec      	b.n	80073b8 <I2C_Slave_ISR_IT+0x1fe>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	095b      	lsrs	r3, r3, #5
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <I2C_Slave_ISR_IT+0x4c>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80071fe:	6939      	ldr	r1, [r7, #16]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 f99d 	bl	8007540 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	091b      	lsrs	r3, r3, #4
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d04d      	beq.n	80072ae <I2C_Slave_ISR_IT+0xf4>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	091b      	lsrs	r3, r3, #4
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d047      	beq.n	80072ae <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d128      	bne.n	800727a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b28      	cmp	r3, #40	; 0x28
 8007232:	d108      	bne.n	8007246 <I2C_Slave_ISR_IT+0x8c>
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800723a:	d104      	bne.n	8007246 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800723c:	6939      	ldr	r1, [r7, #16]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fb44 	bl	80078cc <I2C_ITListenCplt>
 8007244:	e032      	b.n	80072ac <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b29      	cmp	r3, #41	; 0x29
 8007250:	d10e      	bne.n	8007270 <I2C_Slave_ISR_IT+0xb6>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007258:	d00a      	beq.n	8007270 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2210      	movs	r2, #16
 8007260:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fc46 	bl	8007af4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f92b 	bl	80074c4 <I2C_ITSlaveSeqCplt>
 800726e:	e01d      	b.n	80072ac <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2210      	movs	r2, #16
 8007276:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007278:	e096      	b.n	80073a8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2210      	movs	r2, #16
 8007280:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	f043 0204 	orr.w	r2, r3, #4
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <I2C_Slave_ISR_IT+0xe4>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800729a:	f040 8085 	bne.w	80073a8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a2:	4619      	mov	r1, r3
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fb65 	bl	8007974 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80072aa:	e07d      	b.n	80073a8 <I2C_Slave_ISR_IT+0x1ee>
 80072ac:	e07c      	b.n	80073a8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	089b      	lsrs	r3, r3, #2
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d030      	beq.n	800731c <I2C_Slave_ISR_IT+0x162>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	089b      	lsrs	r3, r3, #2
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d02a      	beq.n	800731c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d018      	beq.n	8007302 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d14f      	bne.n	80073ac <I2C_Slave_ISR_IT+0x1f2>
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007312:	d04b      	beq.n	80073ac <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f8d5 	bl	80074c4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800731a:	e047      	b.n	80073ac <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	08db      	lsrs	r3, r3, #3
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <I2C_Slave_ISR_IT+0x184>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	08db      	lsrs	r3, r3, #3
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007334:	6939      	ldr	r1, [r7, #16]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 f842 	bl	80073c0 <I2C_ITAddrCplt>
 800733c:	e037      	b.n	80073ae <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d031      	beq.n	80073ae <I2C_Slave_ISR_IT+0x1f4>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d02b      	beq.n	80073ae <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d018      	beq.n	8007392 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007390:	e00d      	b.n	80073ae <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007398:	d002      	beq.n	80073a0 <I2C_Slave_ISR_IT+0x1e6>
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d106      	bne.n	80073ae <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f88f 	bl	80074c4 <I2C_ITSlaveSeqCplt>
 80073a6:	e002      	b.n	80073ae <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80073a8:	bf00      	nop
 80073aa:	e000      	b.n	80073ae <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80073ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073d6:	2b28      	cmp	r3, #40	; 0x28
 80073d8:	d168      	bne.n	80074ac <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80073f8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007406:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007414:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d137      	bne.n	800748e <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800741e:	897b      	ldrh	r3, [r7, #10]
 8007420:	09db      	lsrs	r3, r3, #7
 8007422:	b29a      	uxth	r2, r3
 8007424:	89bb      	ldrh	r3, [r7, #12]
 8007426:	4053      	eors	r3, r2
 8007428:	b29b      	uxth	r3, r3
 800742a:	f003 0306 	and.w	r3, r3, #6
 800742e:	2b00      	cmp	r3, #0
 8007430:	d11c      	bne.n	800746c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007432:	897b      	ldrh	r3, [r7, #10]
 8007434:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007444:	2b02      	cmp	r3, #2
 8007446:	d139      	bne.n	80074bc <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2208      	movs	r2, #8
 8007454:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800745e:	89ba      	ldrh	r2, [r7, #12]
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff fe7c 	bl	8007162 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800746a:	e027      	b.n	80074bc <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800746c:	893b      	ldrh	r3, [r7, #8]
 800746e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007470:	2104      	movs	r1, #4
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fb86 	bl	8007b84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007480:	89ba      	ldrh	r2, [r7, #12]
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff fe6b 	bl	8007162 <HAL_I2C_AddrCallback>
}
 800748c:	e016      	b.n	80074bc <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800748e:	2104      	movs	r1, #4
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fb77 	bl	8007b84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800749e:	89ba      	ldrh	r2, [r7, #12]
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fe5c 	bl	8007162 <HAL_I2C_AddrCallback>
}
 80074aa:	e007      	b.n	80074bc <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2208      	movs	r2, #8
 80074b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80074bc:	bf00      	nop
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b29      	cmp	r3, #41	; 0x29
 80074de:	d112      	bne.n	8007506 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2228      	movs	r2, #40	; 0x28
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2221      	movs	r2, #33	; 0x21
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80074ee:	2101      	movs	r1, #1
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb47 	bl	8007b84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff fe1b 	bl	800713a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007504:	e017      	b.n	8007536 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b2a      	cmp	r3, #42	; 0x2a
 8007510:	d111      	bne.n	8007536 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2228      	movs	r2, #40	; 0x28
 8007516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2222      	movs	r2, #34	; 0x22
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007520:	2102      	movs	r1, #2
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fb2e 	bl	8007b84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff fe0c 	bl	800714e <HAL_I2C_SlaveRxCpltCallback>
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2220      	movs	r2, #32
 800755c:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800755e:	2107      	movs	r1, #7
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb0f 	bl	8007b84 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007574:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6859      	ldr	r1, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	4b78      	ldr	r3, [pc, #480]	; (8007764 <I2C_ITSlaveCplt+0x224>)
 8007582:	400b      	ands	r3, r1
 8007584:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fab4 	bl	8007af4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	0b9b      	lsrs	r3, r3, #14
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d072      	beq.n	800767e <I2C_ITSlaveCplt+0x13e>
  {
    if (hi2c->hdmatx != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 810a 	beq.w	80077b6 <I2C_ITSlaveCplt+0x276>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a6f      	ldr	r2, [pc, #444]	; (8007768 <I2C_ITSlaveCplt+0x228>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d059      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a6d      	ldr	r2, [pc, #436]	; (800776c <I2C_ITSlaveCplt+0x22c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d053      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a6b      	ldr	r2, [pc, #428]	; (8007770 <I2C_ITSlaveCplt+0x230>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d04d      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a69      	ldr	r2, [pc, #420]	; (8007774 <I2C_ITSlaveCplt+0x234>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d047      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a67      	ldr	r2, [pc, #412]	; (8007778 <I2C_ITSlaveCplt+0x238>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d041      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a65      	ldr	r2, [pc, #404]	; (800777c <I2C_ITSlaveCplt+0x23c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d03b      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a63      	ldr	r2, [pc, #396]	; (8007780 <I2C_ITSlaveCplt+0x240>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d035      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a61      	ldr	r2, [pc, #388]	; (8007784 <I2C_ITSlaveCplt+0x244>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d02f      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5f      	ldr	r2, [pc, #380]	; (8007788 <I2C_ITSlaveCplt+0x248>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d029      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a5d      	ldr	r2, [pc, #372]	; (800778c <I2C_ITSlaveCplt+0x24c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d023      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a5b      	ldr	r2, [pc, #364]	; (8007790 <I2C_ITSlaveCplt+0x250>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01d      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a59      	ldr	r2, [pc, #356]	; (8007794 <I2C_ITSlaveCplt+0x254>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d017      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a57      	ldr	r2, [pc, #348]	; (8007798 <I2C_ITSlaveCplt+0x258>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d011      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a55      	ldr	r2, [pc, #340]	; (800779c <I2C_ITSlaveCplt+0x25c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00b      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a53      	ldr	r2, [pc, #332]	; (80077a0 <I2C_ITSlaveCplt+0x260>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d005      	beq.n	8007662 <I2C_ITSlaveCplt+0x122>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a51      	ldr	r2, [pc, #324]	; (80077a4 <I2C_ITSlaveCplt+0x264>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d105      	bne.n	800766e <I2C_ITSlaveCplt+0x12e>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	b29b      	uxth	r3, r3
 800766c:	e004      	b.n	8007678 <I2C_ITSlaveCplt+0x138>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	b29b      	uxth	r3, r3
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	8553      	strh	r3, [r2, #42]	; 0x2a
 800767c:	e09b      	b.n	80077b6 <I2C_ITSlaveCplt+0x276>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	0bdb      	lsrs	r3, r3, #15
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8095 	beq.w	80077b6 <I2C_ITSlaveCplt+0x276>
  {
    if (hi2c->hdmarx != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8090 	beq.w	80077b6 <I2C_ITSlaveCplt+0x276>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a32      	ldr	r2, [pc, #200]	; (8007768 <I2C_ITSlaveCplt+0x228>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d059      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a30      	ldr	r2, [pc, #192]	; (800776c <I2C_ITSlaveCplt+0x22c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d053      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a2e      	ldr	r2, [pc, #184]	; (8007770 <I2C_ITSlaveCplt+0x230>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d04d      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a2c      	ldr	r2, [pc, #176]	; (8007774 <I2C_ITSlaveCplt+0x234>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d047      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a2a      	ldr	r2, [pc, #168]	; (8007778 <I2C_ITSlaveCplt+0x238>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d041      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a28      	ldr	r2, [pc, #160]	; (800777c <I2C_ITSlaveCplt+0x23c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d03b      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a26      	ldr	r2, [pc, #152]	; (8007780 <I2C_ITSlaveCplt+0x240>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d035      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a24      	ldr	r2, [pc, #144]	; (8007784 <I2C_ITSlaveCplt+0x244>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d02f      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a22      	ldr	r2, [pc, #136]	; (8007788 <I2C_ITSlaveCplt+0x248>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d029      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a20      	ldr	r2, [pc, #128]	; (800778c <I2C_ITSlaveCplt+0x24c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d023      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <I2C_ITSlaveCplt+0x250>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01d      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1c      	ldr	r2, [pc, #112]	; (8007794 <I2C_ITSlaveCplt+0x254>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d017      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a1a      	ldr	r2, [pc, #104]	; (8007798 <I2C_ITSlaveCplt+0x258>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d011      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a18      	ldr	r2, [pc, #96]	; (800779c <I2C_ITSlaveCplt+0x25c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a16      	ldr	r2, [pc, #88]	; (80077a0 <I2C_ITSlaveCplt+0x260>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d005      	beq.n	8007756 <I2C_ITSlaveCplt+0x216>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a14      	ldr	r2, [pc, #80]	; (80077a4 <I2C_ITSlaveCplt+0x264>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d128      	bne.n	80077a8 <I2C_ITSlaveCplt+0x268>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b29b      	uxth	r3, r3
 8007760:	e027      	b.n	80077b2 <I2C_ITSlaveCplt+0x272>
 8007762:	bf00      	nop
 8007764:	fe00e800 	.word	0xfe00e800
 8007768:	40020010 	.word	0x40020010
 800776c:	40020028 	.word	0x40020028
 8007770:	40020040 	.word	0x40020040
 8007774:	40020058 	.word	0x40020058
 8007778:	40020070 	.word	0x40020070
 800777c:	40020088 	.word	0x40020088
 8007780:	400200a0 	.word	0x400200a0
 8007784:	400200b8 	.word	0x400200b8
 8007788:	40020410 	.word	0x40020410
 800778c:	40020428 	.word	0x40020428
 8007790:	40020440 	.word	0x40020440
 8007794:	40020458 	.word	0x40020458
 8007798:	40020470 	.word	0x40020470
 800779c:	40020488 	.word	0x40020488
 80077a0:	400204a0 	.word	0x400204a0
 80077a4:	400204b8 	.word	0x400204b8
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	089b      	lsrs	r3, r3, #2
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d020      	beq.n	8007804 <I2C_ITSlaveCplt+0x2c4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f023 0304 	bic.w	r3, r3, #4
 80077c8:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	b2d2      	uxtb	r2, r2
 80077d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <I2C_ITSlaveCplt+0x2c4>
    {
      hi2c->XferSize--;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <I2C_ITSlaveCplt+0x2da>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	f043 0204 	orr.w	r2, r3, #4
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007832:	2b00      	cmp	r3, #0
 8007834:	d010      	beq.n	8007858 <I2C_ITSlaveCplt+0x318>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f899 	bl	8007974 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b28      	cmp	r3, #40	; 0x28
 800784c:	d138      	bne.n	80078c0 <I2C_ITSlaveCplt+0x380>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800784e:	68f9      	ldr	r1, [r7, #12]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f83b 	bl	80078cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007856:	e033      	b.n	80078c0 <I2C_ITSlaveCplt+0x380>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007860:	d011      	beq.n	8007886 <I2C_ITSlaveCplt+0x346>
    I2C_ITSlaveSeqCplt(hi2c);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fe2e 	bl	80074c4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <I2C_ITSlaveCplt+0x388>)
 800786c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fc7d 	bl	800717e <HAL_I2C_ListenCpltCallback>
}
 8007884:	e01c      	b.n	80078c0 <I2C_ITSlaveCplt+0x380>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b22      	cmp	r3, #34	; 0x22
 8007890:	d10b      	bne.n	80078aa <I2C_ITSlaveCplt+0x36a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff fc53 	bl	800714e <HAL_I2C_SlaveRxCpltCallback>
}
 80078a8:	e00a      	b.n	80078c0 <I2C_ITSlaveCplt+0x380>
    hi2c->State = HAL_I2C_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff fc3d 	bl	800713a <HAL_I2C_SlaveTxCpltCallback>
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	ffff0000 	.word	0xffff0000

080078cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a25      	ldr	r2, [pc, #148]	; (8007970 <I2C_ITListenCplt+0xa4>)
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	089b      	lsrs	r3, r3, #2
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d022      	beq.n	800794a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007920:	2b00      	cmp	r3, #0
 8007922:	d012      	beq.n	800794a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007942:	f043 0204 	orr.w	r2, r3, #4
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800794a:	2107      	movs	r1, #7
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f919 	bl	8007b84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2210      	movs	r2, #16
 8007958:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fc0b 	bl	800717e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	ffff0000 	.word	0xffff0000

08007974 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007984:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a55      	ldr	r2, [pc, #340]	; (8007ae8 <I2C_ITError+0x174>)
 8007992:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	2b28      	cmp	r3, #40	; 0x28
 80079aa:	d005      	beq.n	80079b8 <I2C_ITError+0x44>
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	2b29      	cmp	r3, #41	; 0x29
 80079b0:	d002      	beq.n	80079b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	2b2a      	cmp	r3, #42	; 0x2a
 80079b6:	d10e      	bne.n	80079d6 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80079b8:	2103      	movs	r1, #3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8e2 	bl	8007b84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2228      	movs	r2, #40	; 0x28
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a46      	ldr	r2, [pc, #280]	; (8007aec <I2C_ITError+0x178>)
 80079d2:	635a      	str	r2, [r3, #52]	; 0x34
 80079d4:	e013      	b.n	80079fe <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80079d6:	2107      	movs	r1, #7
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8d3 	bl	8007b84 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b60      	cmp	r3, #96	; 0x60
 80079e8:	d003      	beq.n	80079f2 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a0c:	d123      	bne.n	8007a56 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d05c      	beq.n	8007ae0 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	4a31      	ldr	r2, [pc, #196]	; (8007af0 <I2C_ITError+0x17c>)
 8007a2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fc ffd0 	bl	80049e0 <HAL_DMA_Abort_IT>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d04c      	beq.n	8007ae0 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007a54:	e044      	b.n	8007ae0 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a64:	d123      	bne.n	8007aae <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a74:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d030      	beq.n	8007ae0 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	4a1b      	ldr	r2, [pc, #108]	; (8007af0 <I2C_ITError+0x17c>)
 8007a84:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fc ffa4 	bl	80049e0 <HAL_DMA_Abort_IT>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d020      	beq.n	8007ae0 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
}
 8007aac:	e018      	b.n	8007ae0 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b60      	cmp	r3, #96	; 0x60
 8007ab8:	d10b      	bne.n	8007ad2 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fb6b 	bl	80071a6 <HAL_I2C_AbortCpltCallback>
}
 8007ad0:	e006      	b.n	8007ae0 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff fb59 	bl	8007192 <HAL_I2C_ErrorCallback>
}
 8007ae0:	bf00      	nop
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	ffff0000 	.word	0xffff0000
 8007aec:	080071bb 	.word	0x080071bb
 8007af0:	08007b3d 	.word	0x08007b3d

08007af4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d103      	bne.n	8007b12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d007      	beq.n	8007b30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	619a      	str	r2, [r3, #24]
  }
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	2200      	movs	r2, #0
 8007b50:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b56:	2200      	movs	r2, #0
 8007b58:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b60      	cmp	r3, #96	; 0x60
 8007b64:	d107      	bne.n	8007b76 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7ff fb19 	bl	80071a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b74:	e002      	b.n	8007b7c <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fb0b 	bl	8007192 <HAL_I2C_ErrorCallback>
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b94:	887b      	ldrh	r3, [r7, #2]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007ba4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bb2:	2b28      	cmp	r3, #40	; 0x28
 8007bb4:	d003      	beq.n	8007bbe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007bbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007bbe:	887b      	ldrh	r3, [r7, #2]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00f      	beq.n	8007be8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007bce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bdc:	2b28      	cmp	r3, #40	; 0x28
 8007bde:	d003      	beq.n	8007be8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007be6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007be8:	887b      	ldrh	r3, [r7, #2]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007bf8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8007bfa:	887b      	ldrh	r3, [r7, #2]
 8007bfc:	f003 0311 	and.w	r3, r3, #17
 8007c00:	2b11      	cmp	r3, #17
 8007c02:	d103      	bne.n	8007c0c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007c0a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8007c0c:	887b      	ldrh	r3, [r7, #2]
 8007c0e:	f003 0312 	and.w	r3, r3, #18
 8007c12:	2b12      	cmp	r3, #18
 8007c14:	d103      	bne.n	8007c1e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f043 0320 	orr.w	r3, r3, #32
 8007c1c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8007c1e:	887b      	ldrh	r3, [r7, #2]
 8007c20:	f003 0312 	and.w	r3, r3, #18
 8007c24:	2b12      	cmp	r3, #18
 8007c26:	d103      	bne.n	8007c30 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	43da      	mvns	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	400a      	ands	r2, r1
 8007c40:	601a      	str	r2, [r3, #0]
}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d138      	bne.n	8007cd6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e032      	b.n	8007cd8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2224      	movs	r2, #36	; 0x24
 8007c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ca0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6819      	ldr	r1, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0201 	orr.w	r2, r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e000      	b.n	8007cd8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cd6:	2302      	movs	r3, #2
  }
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d139      	bne.n	8007d6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e033      	b.n	8007d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2224      	movs	r2, #36	; 0x24
 8007d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0201 	bic.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e000      	b.n	8007d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d6e:	2302      	movs	r3, #2
  }
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e10b      	b.n	8007fa6 <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7f9 fed0 	bl	8001b48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d107      	bne.n	8007dce <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0201 	bic.w	r2, r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d008      	beq.n	8007df0 <HAL_I2S_Init+0x74>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b06      	cmp	r3, #6
 8007de4:	d004      	beq.n	8007df0 <HAL_I2S_Init+0x74>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b0a      	cmp	r3, #10
 8007dec:	f040 8085 	bne.w	8007efa <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d058      	beq.n	8007eaa <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8007e00:	2302      	movs	r3, #2
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e001      	b.n	8007e0a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8007e06:	2301      	movs	r3, #1
 8007e08:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b30      	cmp	r3, #48	; 0x30
 8007e10:	d003      	beq.n	8007e1a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8007e16:	2bb0      	cmp	r3, #176	; 0xb0
 8007e18:	d102      	bne.n	8007e20 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	e001      	b.n	8007e24 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8007e24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e28:	f002 f93e 	bl	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e2c:	60b8      	str	r0, [r7, #8]
#endif

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e36:	d113      	bne.n	8007e60 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8007e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	461a      	mov	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5a:	3305      	adds	r3, #5
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	e014      	b.n	8007e8a <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8007e60:	2220      	movs	r2, #32
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	fa22 f303 	lsr.w	r3, r2, r3
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	fb02 f303 	mul.w	r3, r2, r3
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	3305      	adds	r3, #5
 8007e88:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4a48      	ldr	r2, [pc, #288]	; (8007fb0 <HAL_I2S_Init+0x234>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	08db      	lsrs	r3, r3, #3
 8007e94:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	e003      	b.n	8007eb2 <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d102      	bne.n	8007ebe <HAL_I2S_Init+0x142>
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d002      	beq.n	8007ec4 <HAL_I2S_Init+0x148>
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	2bff      	cmp	r3, #255	; 0xff
 8007ec2:	d907      	bls.n	8007ed4 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec8:	f043 0210 	orr.w	r2, r3, #16
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e068      	b.n	8007fa6 <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ee4:	4b33      	ldr	r3, [pc, #204]	; (8007fb4 <HAL_I2S_Init+0x238>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	0411      	lsls	r1, r2, #16
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	0612      	lsls	r2, r2, #24
 8007ef0:	4311      	orrs	r1, r2
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6812      	ldr	r2, [r2, #0]
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f00:	4b2d      	ldr	r3, [pc, #180]	; (8007fb8 <HAL_I2S_Init+0x23c>)
 8007f02:	4013      	ands	r3, r2
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6851      	ldr	r1, [r2, #4]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6892      	ldr	r2, [r2, #8]
 8007f0c:	4311      	orrs	r1, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	68d2      	ldr	r2, [r2, #12]
 8007f12:	4311      	orrs	r1, r2
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6992      	ldr	r2, [r2, #24]
 8007f18:	4311      	orrs	r1, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6a12      	ldr	r2, [r2, #32]
 8007f1e:	4311      	orrs	r1, r2
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f24:	4311      	orrs	r1, r2
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6912      	ldr	r2, [r2, #16]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	651a      	str	r2, [r3, #80]	; 0x50
                                      (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
                                       hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
                                       hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
                                       hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f640 72f8 	movw	r2, #4088	; 0xff8
 8007f40:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f50:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	69da      	ldr	r2, [r3, #28]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d007      	beq.n	8007f80 <HAL_I2S_Init+0x204>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b06      	cmp	r3, #6
 8007f76:	d003      	beq.n	8007f80 <HAL_I2S_Init+0x204>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b0a      	cmp	r3, #10
 8007f7e:	d10a      	bne.n	8007f96 <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	cccccccd 	.word	0xcccccccd
 8007fb4:	fe00ffff 	.word	0xfe00ffff
 8007fb8:	fdff9040 	.word	0xfdff9040

08007fbc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->IER;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hi2s->Instance->SR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = itsource & itflag;
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) && HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP))
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	099b      	lsrs	r3, r3, #6
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d108      	bne.n	8007ffa <HAL_I2S_IRQHandler+0x3e>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_I2S_IRQHandler+0x3e>
  {
    hi2s->RxISR(hi2s);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4798      	blx	r3
  }

  /* I2S in mode Transmitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) == RESET) && HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP))
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d108      	bne.n	8008018 <HAL_I2S_IRQHandler+0x5c>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_I2S_IRQHandler+0x5c>
  {
    hi2s->TxISR(hi2s);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
  }

  /* I2S interrupt error ----------------------------------------------------*/
  if ((trigger & (I2S_FLAG_OVR| I2S_FLAG_UDR | I2S_FLAG_FRE)) != 0UL)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 800801e:	2b00      	cmp	r3, #0
 8008020:	d05a      	beq.n	80080d8 <HAL_I2S_IRQHandler+0x11c>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	099b      	lsrs	r3, r3, #6
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d015      	beq.n	800805a <HAL_I2S_IRQHandler+0x9e>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6919      	ldr	r1, [r3, #16]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	4b29      	ldr	r3, [pc, #164]	; (80080e0 <HAL_I2S_IRQHandler+0x124>)
 800803a:	400b      	ands	r3, r1
 800803c:	6113      	str	r3, [r2, #16]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008042:	f043 0202 	orr.w	r2, r3, #2
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	699a      	ldr	r2, [r3, #24]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008058:	619a      	str	r2, [r3, #24]
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d015      	beq.n	8008092 <HAL_I2S_IRQHandler+0xd6>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 72b1 	bic.w	r2, r2, #354	; 0x162
 8008074:	611a      	str	r2, [r3, #16]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807a:	f043 0204 	orr.w	r2, r3, #4
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0220 	orr.w	r2, r2, #32
 8008090:	619a      	str	r2, [r3, #24]
    }

    /* I2S Frame error interrupt occurred -----------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_FRE) != RESET)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	0a1b      	lsrs	r3, r3, #8
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d015      	beq.n	80080ca <HAL_I2S_IRQHandler+0x10e>
    {
      /* Disable FRE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_FRE | I2S_IT_ERR));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	691a      	ldr	r2, [r3, #16]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 72b0 	bic.w	r2, r2, #352	; 0x160
 80080ac:	611a      	str	r2, [r3, #16]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_FRE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b2:	f043 0220 	orr.w	r2, r3, #32
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_I2S_CLEAR_FREFLAG(hi2s);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080c8:	619a      	str	r2, [r3, #24]
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f806 	bl	80080e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80080d8:	bf00      	nop
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	fffffe9e 	.word	0xfffffe9e

080080e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a04      	ldr	r2, [pc, #16]	; (8008114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008106:	6013      	str	r3, [r2, #0]
}
 8008108:	bf00      	nop
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	58024800 	.word	0x58024800

08008118 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008120:	4b19      	ldr	r3, [pc, #100]	; (8008188 <HAL_PWREx_ConfigSupply+0x70>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b04      	cmp	r3, #4
 800812a:	d00a      	beq.n	8008142 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800812c:	4b16      	ldr	r3, [pc, #88]	; (8008188 <HAL_PWREx_ConfigSupply+0x70>)
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	429a      	cmp	r2, r3
 8008138:	d001      	beq.n	800813e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e01f      	b.n	800817e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	e01d      	b.n	800817e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008142:	4b11      	ldr	r3, [pc, #68]	; (8008188 <HAL_PWREx_ConfigSupply+0x70>)
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f023 0207 	bic.w	r2, r3, #7
 800814a:	490f      	ldr	r1, [pc, #60]	; (8008188 <HAL_PWREx_ConfigSupply+0x70>)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4313      	orrs	r3, r2
 8008150:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008152:	f7fa fca7 	bl	8002aa4 <HAL_GetTick>
 8008156:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008158:	e009      	b.n	800816e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800815a:	f7fa fca3 	bl	8002aa4 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008168:	d901      	bls.n	800816e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e007      	b.n	800817e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800816e:	4b06      	ldr	r3, [pc, #24]	; (8008188 <HAL_PWREx_ConfigSupply+0x70>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800817a:	d1ee      	bne.n	800815a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	58024800 	.word	0x58024800

0800818c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi: QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af02      	add	r7, sp, #8
 8008192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008194:	f7fa fc86 	bl	8002aa4 <HAL_GetTick>
 8008198:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e073      	b.n	800828c <HAL_QSPI_Init+0x100>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <HAL_QSPI_Init+0x28>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e06b      	b.n	800828c <HAL_QSPI_Init+0x100>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10b      	bne.n	80081e0 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7f9 fd8d 	bl	8001cf0 <HAL_QSPI_MspInit>
#endif
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80081d6:	f241 3188 	movw	r1, #5000	; 0x1388
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f85e 	bl	800829c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	021a      	lsls	r2, r3, #8
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	2120      	movs	r1, #32
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f856 	bl	80082b8 <QSPI_WaitFlagStateUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d135      	bne.n	8008282 <HAL_QSPI_Init+0xf6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_QSPI_Init+0x108>)
 800821e:	4013      	ands	r3, r2
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6852      	ldr	r2, [r2, #4]
 8008224:	0611      	lsls	r1, r2, #24
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	68d2      	ldr	r2, [r2, #12]
 800822a:	4311      	orrs	r1, r2
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	69d2      	ldr	r2, [r2, #28]
 8008230:	4311      	orrs	r1, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6a12      	ldr	r2, [r2, #32]
 8008236:	4311      	orrs	r1, r2
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	430b      	orrs	r3, r1
 800823e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <HAL_QSPI_Init+0x10c>)
 8008248:	4013      	ands	r3, r2
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6912      	ldr	r2, [r2, #16]
 800824e:	0411      	lsls	r1, r2, #16
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6952      	ldr	r2, [r2, #20]
 8008254:	4311      	orrs	r1, r2
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6992      	ldr	r2, [r2, #24]
 800825a:	4311      	orrs	r1, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	430b      	orrs	r3, r1
 8008262:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f042 0201 	orr.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800828a:	7afb      	ldrb	r3, [r7, #11]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	00ffff2f 	.word	0x00ffff2f
 8008298:	ffe0f8fe 	.word	0xffe0f8fe

0800829c <HAL_QSPI_SetTimeout>:
  * @param  hqspi: QSPI handle.
  * @param  Timeout: Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout: Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	4613      	mov	r3, r2
 80082c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80082c8:	e01a      	b.n	8008300 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082d0:	d016      	beq.n	8008300 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082d2:	f7fa fbe7 	bl	8002aa4 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d302      	bcc.n	80082e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2204      	movs	r2, #4
 80082ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f4:	f043 0201 	orr.w	r2, r3, #1
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e00e      	b.n	800831e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	4013      	ands	r3, r2
 800830a:	2b00      	cmp	r3, #0
 800830c:	bf14      	ite	ne
 800830e:	2301      	movne	r3, #1
 8008310:	2300      	moveq	r3, #0
 8008312:	b2db      	uxtb	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	429a      	cmp	r2, r3
 800831a:	d1d6      	bne.n	80082ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08c      	sub	sp, #48	; 0x30
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e3c4      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 8087 	beq.w	8008456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008348:	4ba2      	ldr	r3, [pc, #648]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008352:	4ba0      	ldr	r3, [pc, #640]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2b10      	cmp	r3, #16
 800835c:	d007      	beq.n	800836e <HAL_RCC_OscConfig+0x46>
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	2b18      	cmp	r3, #24
 8008362:	d110      	bne.n	8008386 <HAL_RCC_OscConfig+0x5e>
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d10b      	bne.n	8008386 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800836e:	4b99      	ldr	r3, [pc, #612]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d06c      	beq.n	8008454 <HAL_RCC_OscConfig+0x12c>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d168      	bne.n	8008454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e39e      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800838e:	d106      	bne.n	800839e <HAL_RCC_OscConfig+0x76>
 8008390:	4b90      	ldr	r3, [pc, #576]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a8f      	ldr	r2, [pc, #572]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	e02e      	b.n	80083fc <HAL_RCC_OscConfig+0xd4>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10c      	bne.n	80083c0 <HAL_RCC_OscConfig+0x98>
 80083a6:	4b8b      	ldr	r3, [pc, #556]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a8a      	ldr	r2, [pc, #552]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	4b88      	ldr	r3, [pc, #544]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a87      	ldr	r2, [pc, #540]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	e01d      	b.n	80083fc <HAL_RCC_OscConfig+0xd4>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083c8:	d10c      	bne.n	80083e4 <HAL_RCC_OscConfig+0xbc>
 80083ca:	4b82      	ldr	r3, [pc, #520]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a81      	ldr	r2, [pc, #516]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	4b7f      	ldr	r3, [pc, #508]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a7e      	ldr	r2, [pc, #504]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	e00b      	b.n	80083fc <HAL_RCC_OscConfig+0xd4>
 80083e4:	4b7b      	ldr	r3, [pc, #492]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a7a      	ldr	r2, [pc, #488]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	4b78      	ldr	r3, [pc, #480]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a77      	ldr	r2, [pc, #476]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80083f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d013      	beq.n	800842c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008404:	f7fa fb4e 	bl	8002aa4 <HAL_GetTick>
 8008408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800840c:	f7fa fb4a 	bl	8002aa4 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b64      	cmp	r3, #100	; 0x64
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e352      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800841e:	4b6d      	ldr	r3, [pc, #436]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0f0      	beq.n	800840c <HAL_RCC_OscConfig+0xe4>
 800842a:	e014      	b.n	8008456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842c:	f7fa fb3a 	bl	8002aa4 <HAL_GetTick>
 8008430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008434:	f7fa fb36 	bl	8002aa4 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b64      	cmp	r3, #100	; 0x64
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e33e      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008446:	4b63      	ldr	r3, [pc, #396]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f0      	bne.n	8008434 <HAL_RCC_OscConfig+0x10c>
 8008452:	e000      	b.n	8008456 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 8092 	beq.w	8008588 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008464:	4b5b      	ldr	r3, [pc, #364]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800846c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800846e:	4b59      	ldr	r3, [pc, #356]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d007      	beq.n	800848a <HAL_RCC_OscConfig+0x162>
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	2b18      	cmp	r3, #24
 800847e:	d12d      	bne.n	80084dc <HAL_RCC_OscConfig+0x1b4>
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d128      	bne.n	80084dc <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800848a:	4b52      	ldr	r3, [pc, #328]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <HAL_RCC_OscConfig+0x17a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e310      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a2:	f7fa fb2d 	bl	8002b00 <HAL_GetREVID>
 80084a6:	4602      	mov	r2, r0
 80084a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d80a      	bhi.n	80084c6 <HAL_RCC_OscConfig+0x19e>
 80084b0:	4b48      	ldr	r3, [pc, #288]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	031b      	lsls	r3, r3, #12
 80084be:	4945      	ldr	r1, [pc, #276]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084c4:	e060      	b.n	8008588 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c6:	4b43      	ldr	r3, [pc, #268]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	061b      	lsls	r3, r3, #24
 80084d4:	493f      	ldr	r1, [pc, #252]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084da:	e055      	b.n	8008588 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d038      	beq.n	8008556 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084e4:	4b3b      	ldr	r3, [pc, #236]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f023 0219 	bic.w	r2, r3, #25
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	4938      	ldr	r1, [pc, #224]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f6:	f7fa fad5 	bl	8002aa4 <HAL_GetTick>
 80084fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084fc:	e008      	b.n	8008510 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084fe:	f7fa fad1 	bl	8002aa4 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d901      	bls.n	8008510 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e2d9      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008510:	4b30      	ldr	r3, [pc, #192]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0f0      	beq.n	80084fe <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800851c:	f7fa faf0 	bl	8002b00 <HAL_GetREVID>
 8008520:	4602      	mov	r2, r0
 8008522:	f241 0303 	movw	r3, #4099	; 0x1003
 8008526:	429a      	cmp	r2, r3
 8008528:	d80a      	bhi.n	8008540 <HAL_RCC_OscConfig+0x218>
 800852a:	4b2a      	ldr	r3, [pc, #168]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	031b      	lsls	r3, r3, #12
 8008538:	4926      	ldr	r1, [pc, #152]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 800853a:	4313      	orrs	r3, r2
 800853c:	604b      	str	r3, [r1, #4]
 800853e:	e023      	b.n	8008588 <HAL_RCC_OscConfig+0x260>
 8008540:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	061b      	lsls	r3, r3, #24
 800854e:	4921      	ldr	r1, [pc, #132]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008550:	4313      	orrs	r3, r2
 8008552:	604b      	str	r3, [r1, #4]
 8008554:	e018      	b.n	8008588 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008556:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a1e      	ldr	r2, [pc, #120]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008562:	f7fa fa9f 	bl	8002aa4 <HAL_GetTick>
 8008566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008568:	e008      	b.n	800857c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800856a:	f7fa fa9b 	bl	8002aa4 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d901      	bls.n	800857c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e2a3      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800857c:	4b15      	ldr	r3, [pc, #84]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1f0      	bne.n	800856a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0310 	and.w	r3, r3, #16
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 8091 	beq.w	80086b8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800859e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d007      	beq.n	80085bc <HAL_RCC_OscConfig+0x294>
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	2b18      	cmp	r3, #24
 80085b0:	d12f      	bne.n	8008612 <HAL_RCC_OscConfig+0x2ea>
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d12a      	bne.n	8008612 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085bc:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <HAL_RCC_OscConfig+0x2ac>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <HAL_RCC_OscConfig+0x2b0>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	2b80      	cmp	r3, #128	; 0x80
 80085ce:	d003      	beq.n	80085d8 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e277      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
 80085d4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085d8:	f7fa fa92 	bl	8002b00 <HAL_GetREVID>
 80085dc:	4602      	mov	r2, r0
 80085de:	f241 0303 	movw	r3, #4099	; 0x1003
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d80a      	bhi.n	80085fc <HAL_RCC_OscConfig+0x2d4>
 80085e6:	4ba2      	ldr	r3, [pc, #648]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	069b      	lsls	r3, r3, #26
 80085f4:	499e      	ldr	r1, [pc, #632]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085fa:	e05d      	b.n	80086b8 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085fc:	4b9c      	ldr	r3, [pc, #624]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	061b      	lsls	r3, r3, #24
 800860a:	4999      	ldr	r1, [pc, #612]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800860c:	4313      	orrs	r3, r2
 800860e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008610:	e052      	b.n	80086b8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d035      	beq.n	8008686 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800861a:	4b95      	ldr	r3, [pc, #596]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a94      	ldr	r2, [pc, #592]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008626:	f7fa fa3d 	bl	8002aa4 <HAL_GetTick>
 800862a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800862c:	e008      	b.n	8008640 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800862e:	f7fa fa39 	bl	8002aa4 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b02      	cmp	r3, #2
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e241      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008640:	4b8b      	ldr	r3, [pc, #556]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0f0      	beq.n	800862e <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800864c:	f7fa fa58 	bl	8002b00 <HAL_GetREVID>
 8008650:	4602      	mov	r2, r0
 8008652:	f241 0303 	movw	r3, #4099	; 0x1003
 8008656:	429a      	cmp	r2, r3
 8008658:	d80a      	bhi.n	8008670 <HAL_RCC_OscConfig+0x348>
 800865a:	4b85      	ldr	r3, [pc, #532]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	069b      	lsls	r3, r3, #26
 8008668:	4981      	ldr	r1, [pc, #516]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800866a:	4313      	orrs	r3, r2
 800866c:	604b      	str	r3, [r1, #4]
 800866e:	e023      	b.n	80086b8 <HAL_RCC_OscConfig+0x390>
 8008670:	4b7f      	ldr	r3, [pc, #508]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	061b      	lsls	r3, r3, #24
 800867e:	497c      	ldr	r1, [pc, #496]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008680:	4313      	orrs	r3, r2
 8008682:	60cb      	str	r3, [r1, #12]
 8008684:	e018      	b.n	80086b8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008686:	4b7a      	ldr	r3, [pc, #488]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a79      	ldr	r2, [pc, #484]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800868c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008692:	f7fa fa07 	bl	8002aa4 <HAL_GetTick>
 8008696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008698:	e008      	b.n	80086ac <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800869a:	f7fa fa03 	bl	8002aa4 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e20b      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086ac:	4b70      	ldr	r3, [pc, #448]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1f0      	bne.n	800869a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d036      	beq.n	8008732 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d019      	beq.n	8008700 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086cc:	4b68      	ldr	r3, [pc, #416]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80086ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d0:	4a67      	ldr	r2, [pc, #412]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d8:	f7fa f9e4 	bl	8002aa4 <HAL_GetTick>
 80086dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086e0:	f7fa f9e0 	bl	8002aa4 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e1e8      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086f2:	4b5f      	ldr	r3, [pc, #380]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80086f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0f0      	beq.n	80086e0 <HAL_RCC_OscConfig+0x3b8>
 80086fe:	e018      	b.n	8008732 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008700:	4b5b      	ldr	r3, [pc, #364]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008704:	4a5a      	ldr	r2, [pc, #360]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008706:	f023 0301 	bic.w	r3, r3, #1
 800870a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800870c:	f7fa f9ca 	bl	8002aa4 <HAL_GetTick>
 8008710:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008714:	f7fa f9c6 	bl	8002aa4 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e1ce      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008726:	4b52      	ldr	r3, [pc, #328]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f0      	bne.n	8008714 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d036      	beq.n	80087ac <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d019      	beq.n	800877a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008746:	4b4a      	ldr	r3, [pc, #296]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a49      	ldr	r2, [pc, #292]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800874c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008750:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008752:	f7fa f9a7 	bl	8002aa4 <HAL_GetTick>
 8008756:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800875a:	f7fa f9a3 	bl	8002aa4 <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e1ab      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800876c:	4b40      	ldr	r3, [pc, #256]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0f0      	beq.n	800875a <HAL_RCC_OscConfig+0x432>
 8008778:	e018      	b.n	80087ac <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800877a:	4b3d      	ldr	r3, [pc, #244]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a3c      	ldr	r2, [pc, #240]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008784:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008786:	f7fa f98d 	bl	8002aa4 <HAL_GetTick>
 800878a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800878c:	e008      	b.n	80087a0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800878e:	f7fa f989 	bl	8002aa4 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e191      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087a0:	4b33      	ldr	r3, [pc, #204]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1f0      	bne.n	800878e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8086 	beq.w	80088c6 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80087ba:	4b2e      	ldr	r3, [pc, #184]	; (8008874 <HAL_RCC_OscConfig+0x54c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a2d      	ldr	r2, [pc, #180]	; (8008874 <HAL_RCC_OscConfig+0x54c>)
 80087c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087c6:	f7fa f96d 	bl	8002aa4 <HAL_GetTick>
 80087ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80087ce:	f7fa f969 	bl	8002aa4 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b64      	cmp	r3, #100	; 0x64
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e171      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087e0:	4b24      	ldr	r3, [pc, #144]	; (8008874 <HAL_RCC_OscConfig+0x54c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d106      	bne.n	8008802 <HAL_RCC_OscConfig+0x4da>
 80087f4:	4b1e      	ldr	r3, [pc, #120]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80087f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f8:	4a1d      	ldr	r2, [pc, #116]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 80087fa:	f043 0301 	orr.w	r3, r3, #1
 80087fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008800:	e02d      	b.n	800885e <HAL_RCC_OscConfig+0x536>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10c      	bne.n	8008824 <HAL_RCC_OscConfig+0x4fc>
 800880a:	4b19      	ldr	r3, [pc, #100]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	4a18      	ldr	r2, [pc, #96]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008810:	f023 0301 	bic.w	r3, r3, #1
 8008814:	6713      	str	r3, [r2, #112]	; 0x70
 8008816:	4b16      	ldr	r3, [pc, #88]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881a:	4a15      	ldr	r2, [pc, #84]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800881c:	f023 0304 	bic.w	r3, r3, #4
 8008820:	6713      	str	r3, [r2, #112]	; 0x70
 8008822:	e01c      	b.n	800885e <HAL_RCC_OscConfig+0x536>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2b05      	cmp	r3, #5
 800882a:	d10c      	bne.n	8008846 <HAL_RCC_OscConfig+0x51e>
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800882e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008830:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008832:	f043 0304 	orr.w	r3, r3, #4
 8008836:	6713      	str	r3, [r2, #112]	; 0x70
 8008838:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800883a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883c:	4a0c      	ldr	r2, [pc, #48]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800883e:	f043 0301 	orr.w	r3, r3, #1
 8008842:	6713      	str	r3, [r2, #112]	; 0x70
 8008844:	e00b      	b.n	800885e <HAL_RCC_OscConfig+0x536>
 8008846:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884a:	4a09      	ldr	r2, [pc, #36]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 800884c:	f023 0301 	bic.w	r3, r3, #1
 8008850:	6713      	str	r3, [r2, #112]	; 0x70
 8008852:	4b07      	ldr	r3, [pc, #28]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008856:	4a06      	ldr	r2, [pc, #24]	; (8008870 <HAL_RCC_OscConfig+0x548>)
 8008858:	f023 0304 	bic.w	r3, r3, #4
 800885c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d01a      	beq.n	800889c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008866:	f7fa f91d 	bl	8002aa4 <HAL_GetTick>
 800886a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800886c:	e00f      	b.n	800888e <HAL_RCC_OscConfig+0x566>
 800886e:	bf00      	nop
 8008870:	58024400 	.word	0x58024400
 8008874:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008878:	f7fa f914 	bl	8002aa4 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	f241 3288 	movw	r2, #5000	; 0x1388
 8008886:	4293      	cmp	r3, r2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e11a      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800888e:	4b8f      	ldr	r3, [pc, #572]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0ee      	beq.n	8008878 <HAL_RCC_OscConfig+0x550>
 800889a:	e014      	b.n	80088c6 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889c:	f7fa f902 	bl	8002aa4 <HAL_GetTick>
 80088a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088a2:	e00a      	b.n	80088ba <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088a4:	f7fa f8fe 	bl	8002aa4 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d901      	bls.n	80088ba <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e104      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088ba:	4b84      	ldr	r3, [pc, #528]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80088bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1ee      	bne.n	80088a4 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 80f9 	beq.w	8008ac2 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80088d0:	4b7e      	ldr	r3, [pc, #504]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088d8:	2b18      	cmp	r3, #24
 80088da:	f000 80b4 	beq.w	8008a46 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	f040 8095 	bne.w	8008a12 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088e8:	4b78      	ldr	r3, [pc, #480]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a77      	ldr	r2, [pc, #476]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80088ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f4:	f7fa f8d6 	bl	8002aa4 <HAL_GetTick>
 80088f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088fc:	f7fa f8d2 	bl	8002aa4 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e0da      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800890e:	4b6f      	ldr	r3, [pc, #444]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f0      	bne.n	80088fc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800891a:	4b6c      	ldr	r3, [pc, #432]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 800891c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800891e:	4b6c      	ldr	r3, [pc, #432]	; (8008ad0 <HAL_RCC_OscConfig+0x7a8>)
 8008920:	4013      	ands	r3, r2
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800892a:	0112      	lsls	r2, r2, #4
 800892c:	430a      	orrs	r2, r1
 800892e:	4967      	ldr	r1, [pc, #412]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008930:	4313      	orrs	r3, r2
 8008932:	628b      	str	r3, [r1, #40]	; 0x28
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	3b01      	subs	r3, #1
 800893a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008942:	3b01      	subs	r3, #1
 8008944:	025b      	lsls	r3, r3, #9
 8008946:	b29b      	uxth	r3, r3
 8008948:	431a      	orrs	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	3b01      	subs	r3, #1
 8008950:	041b      	lsls	r3, r3, #16
 8008952:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008956:	431a      	orrs	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895c:	3b01      	subs	r3, #1
 800895e:	061b      	lsls	r3, r3, #24
 8008960:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008964:	4959      	ldr	r1, [pc, #356]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008966:	4313      	orrs	r3, r2
 8008968:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800896a:	4b58      	ldr	r3, [pc, #352]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	4a57      	ldr	r2, [pc, #348]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008970:	f023 0301 	bic.w	r3, r3, #1
 8008974:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008976:	4b55      	ldr	r3, [pc, #340]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800897a:	4b56      	ldr	r3, [pc, #344]	; (8008ad4 <HAL_RCC_OscConfig+0x7ac>)
 800897c:	4013      	ands	r3, r2
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008982:	00d2      	lsls	r2, r2, #3
 8008984:	4951      	ldr	r1, [pc, #324]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008986:	4313      	orrs	r3, r2
 8008988:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800898a:	4b50      	ldr	r3, [pc, #320]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	f023 020c 	bic.w	r2, r3, #12
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	494d      	ldr	r1, [pc, #308]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008998:	4313      	orrs	r3, r2
 800899a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800899c:	4b4b      	ldr	r3, [pc, #300]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	f023 0202 	bic.w	r2, r3, #2
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a8:	4948      	ldr	r1, [pc, #288]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089ae:	4b47      	ldr	r3, [pc, #284]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b2:	4a46      	ldr	r2, [pc, #280]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ba:	4b44      	ldr	r3, [pc, #272]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	4a43      	ldr	r2, [pc, #268]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80089c6:	4b41      	ldr	r3, [pc, #260]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	4a40      	ldr	r2, [pc, #256]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80089d2:	4b3e      	ldr	r3, [pc, #248]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	4a3d      	ldr	r2, [pc, #244]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089d8:	f043 0301 	orr.w	r3, r3, #1
 80089dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089de:	4b3b      	ldr	r3, [pc, #236]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a3a      	ldr	r2, [pc, #232]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 80089e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ea:	f7fa f85b 	bl	8002aa4 <HAL_GetTick>
 80089ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089f0:	e008      	b.n	8008a04 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089f2:	f7fa f857 	bl	8002aa4 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d901      	bls.n	8008a04 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e05f      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a04:	4b31      	ldr	r3, [pc, #196]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0f0      	beq.n	80089f2 <HAL_RCC_OscConfig+0x6ca>
 8008a10:	e057      	b.n	8008ac2 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a12:	4b2e      	ldr	r3, [pc, #184]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a2d      	ldr	r2, [pc, #180]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1e:	f7fa f841 	bl	8002aa4 <HAL_GetTick>
 8008a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a24:	e008      	b.n	8008a38 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a26:	f7fa f83d 	bl	8002aa4 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e045      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a38:	4b24      	ldr	r3, [pc, #144]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f0      	bne.n	8008a26 <HAL_RCC_OscConfig+0x6fe>
 8008a44:	e03d      	b.n	8008ac2 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a4c:	4b1f      	ldr	r3, [pc, #124]	; (8008acc <HAL_RCC_OscConfig+0x7a4>)
 8008a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a50:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d031      	beq.n	8008abe <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f003 0203 	and.w	r2, r3, #3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d12a      	bne.n	8008abe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	091b      	lsrs	r3, r3, #4
 8008a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d122      	bne.n	8008abe <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a82:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d11a      	bne.n	8008abe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	0a5b      	lsrs	r3, r3, #9
 8008a8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a94:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d111      	bne.n	8008abe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	0c1b      	lsrs	r3, r3, #16
 8008a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d108      	bne.n	8008abe <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	0e1b      	lsrs	r3, r3, #24
 8008ab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d001      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3730      	adds	r7, #48	; 0x30
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	fffffc0c 	.word	0xfffffc0c
 8008ad4:	ffff0007 	.word	0xffff0007

08008ad8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e18d      	b.n	8008e08 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008aec:	4b8a      	ldr	r3, [pc, #552]	; (8008d18 <HAL_RCC_ClockConfig+0x240>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d910      	bls.n	8008b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008afa:	4b87      	ldr	r3, [pc, #540]	; (8008d18 <HAL_RCC_ClockConfig+0x240>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f023 020f 	bic.w	r2, r3, #15
 8008b02:	4985      	ldr	r1, [pc, #532]	; (8008d18 <HAL_RCC_ClockConfig+0x240>)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b0a:	4b83      	ldr	r3, [pc, #524]	; (8008d18 <HAL_RCC_ClockConfig+0x240>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d001      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e175      	b.n	8008e08 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d010      	beq.n	8008b4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	4b7b      	ldr	r3, [pc, #492]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d908      	bls.n	8008b4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b38:	4b78      	ldr	r3, [pc, #480]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	4975      	ldr	r1, [pc, #468]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d010      	beq.n	8008b78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	695a      	ldr	r2, [r3, #20]
 8008b5a:	4b70      	ldr	r3, [pc, #448]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d908      	bls.n	8008b78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b66:	4b6d      	ldr	r3, [pc, #436]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	496a      	ldr	r1, [pc, #424]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d010      	beq.n	8008ba6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	4b64      	ldr	r3, [pc, #400]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d908      	bls.n	8008ba6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b94:	4b61      	ldr	r3, [pc, #388]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	495e      	ldr	r1, [pc, #376]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d010      	beq.n	8008bd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69da      	ldr	r2, [r3, #28]
 8008bb6:	4b59      	ldr	r3, [pc, #356]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d908      	bls.n	8008bd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008bc2:	4b56      	ldr	r3, [pc, #344]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	4953      	ldr	r1, [pc, #332]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d010      	beq.n	8008c02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	4b4d      	ldr	r3, [pc, #308]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d908      	bls.n	8008c02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bf0:	4b4a      	ldr	r3, [pc, #296]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	f023 020f 	bic.w	r2, r3, #15
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	4947      	ldr	r1, [pc, #284]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d055      	beq.n	8008cba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008c0e:	4b43      	ldr	r3, [pc, #268]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	4940      	ldr	r1, [pc, #256]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d107      	bne.n	8008c38 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c28:	4b3c      	ldr	r3, [pc, #240]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d121      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e0e7      	b.n	8008e08 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b03      	cmp	r3, #3
 8008c3e:	d107      	bne.n	8008c50 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c40:	4b36      	ldr	r3, [pc, #216]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d115      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e0db      	b.n	8008e08 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d107      	bne.n	8008c68 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c58:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e0cf      	b.n	8008e08 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c68:	4b2c      	ldr	r3, [pc, #176]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e0c7      	b.n	8008e08 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c78:	4b28      	ldr	r3, [pc, #160]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	f023 0207 	bic.w	r2, r3, #7
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	4925      	ldr	r1, [pc, #148]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c8a:	f7f9 ff0b 	bl	8002aa4 <HAL_GetTick>
 8008c8e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c90:	e00a      	b.n	8008ca8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c92:	f7f9 ff07 	bl	8002aa4 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e0af      	b.n	8008e08 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ca8:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d1eb      	bne.n	8008c92 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d010      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	f003 030f 	and.w	r3, r3, #15
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d208      	bcs.n	8008ce8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cd6:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	f023 020f 	bic.w	r2, r3, #15
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	490e      	ldr	r1, [pc, #56]	; (8008d1c <HAL_RCC_ClockConfig+0x244>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <HAL_RCC_ClockConfig+0x240>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d214      	bcs.n	8008d20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cf6:	4b08      	ldr	r3, [pc, #32]	; (8008d18 <HAL_RCC_ClockConfig+0x240>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f023 020f 	bic.w	r2, r3, #15
 8008cfe:	4906      	ldr	r1, [pc, #24]	; (8008d18 <HAL_RCC_ClockConfig+0x240>)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d06:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <HAL_RCC_ClockConfig+0x240>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d005      	beq.n	8008d20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e077      	b.n	8008e08 <HAL_RCC_ClockConfig+0x330>
 8008d18:	52002000 	.word	0x52002000
 8008d1c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d010      	beq.n	8008d4e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691a      	ldr	r2, [r3, #16]
 8008d30:	4b37      	ldr	r3, [pc, #220]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d208      	bcs.n	8008d4e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d3c:	4b34      	ldr	r3, [pc, #208]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	4931      	ldr	r1, [pc, #196]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0308 	and.w	r3, r3, #8
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d010      	beq.n	8008d7c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	695a      	ldr	r2, [r3, #20]
 8008d5e:	4b2c      	ldr	r3, [pc, #176]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d208      	bcs.n	8008d7c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d6a:	4b29      	ldr	r3, [pc, #164]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	4926      	ldr	r1, [pc, #152]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0310 	and.w	r3, r3, #16
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d010      	beq.n	8008daa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	699a      	ldr	r2, [r3, #24]
 8008d8c:	4b20      	ldr	r3, [pc, #128]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d208      	bcs.n	8008daa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d98:	4b1d      	ldr	r3, [pc, #116]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	491a      	ldr	r1, [pc, #104]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d010      	beq.n	8008dd8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	69da      	ldr	r2, [r3, #28]
 8008dba:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d208      	bcs.n	8008dd8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008dc6:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	490f      	ldr	r1, [pc, #60]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008dd8:	f000 f88c 	bl	8008ef4 <HAL_RCC_GetSysClockFreq>
 8008ddc:	4601      	mov	r1, r0
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <HAL_RCC_ClockConfig+0x338>)
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	0a1b      	lsrs	r3, r3, #8
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	4a0a      	ldr	r2, [pc, #40]	; (8008e14 <HAL_RCC_ClockConfig+0x33c>)
 8008dea:	5cd3      	ldrb	r3, [r2, r3]
 8008dec:	f003 031f 	and.w	r3, r3, #31
 8008df0:	fa21 f303 	lsr.w	r3, r1, r3
 8008df4:	4a08      	ldr	r2, [pc, #32]	; (8008e18 <HAL_RCC_ClockConfig+0x340>)
 8008df6:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008df8:	4b08      	ldr	r3, [pc, #32]	; (8008e1c <HAL_RCC_ClockConfig+0x344>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7f9 fb27 	bl	8002450 <HAL_InitTick>
 8008e02:	4603      	mov	r3, r0
 8008e04:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8008e06:	7afb      	ldrb	r3, [r7, #11]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	58024400 	.word	0x58024400
 8008e14:	080110bc 	.word	0x080110bc
 8008e18:	24000000 	.word	0x24000000
 8008e1c:	24000008 	.word	0x24000008

08008e20 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08c      	sub	sp, #48	; 0x30
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d12a      	bne.n	8008e88 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008e32:	4b2d      	ldr	r3, [pc, #180]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e38:	4a2b      	ldr	r2, [pc, #172]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008e42:	4b29      	ldr	r3, [pc, #164]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	61bb      	str	r3, [r7, #24]
 8008e4e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e56:	2302      	movs	r3, #2
 8008e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008e62:	2300      	movs	r3, #0
 8008e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008e66:	f107 031c 	add.w	r3, r7, #28
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	481f      	ldr	r0, [pc, #124]	; (8008eec <HAL_RCC_MCOConfig+0xcc>)
 8008e6e:	f7fd fe8f 	bl	8006b90 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008e72:	4b1d      	ldr	r3, [pc, #116]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	4919      	ldr	r1, [pc, #100]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008e86:	e02a      	b.n	8008ede <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008e88:	4b17      	ldr	r3, [pc, #92]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e8e:	4a16      	ldr	r2, [pc, #88]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008e90:	f043 0304 	orr.w	r3, r3, #4
 8008e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008e98:	4b13      	ldr	r3, [pc, #76]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	617b      	str	r3, [r7, #20]
 8008ea4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eac:	2302      	movs	r3, #2
 8008eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008ebc:	f107 031c 	add.w	r3, r7, #28
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	480b      	ldr	r0, [pc, #44]	; (8008ef0 <HAL_RCC_MCOConfig+0xd0>)
 8008ec4:	f7fd fe64 	bl	8006b90 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008ec8:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	01d9      	lsls	r1, r3, #7
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	430b      	orrs	r3, r1
 8008ed8:	4903      	ldr	r1, [pc, #12]	; (8008ee8 <HAL_RCC_MCOConfig+0xc8>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	610b      	str	r3, [r1, #16]
}
 8008ede:	bf00      	nop
 8008ee0:	3730      	adds	r7, #48	; 0x30
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	58020000 	.word	0x58020000
 8008ef0:	58020800 	.word	0x58020800

08008ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b089      	sub	sp, #36	; 0x24
 8008ef8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008efa:	4baf      	ldr	r3, [pc, #700]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f02:	2b18      	cmp	r3, #24
 8008f04:	f200 814e 	bhi.w	80091a4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008f08:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f75 	.word	0x08008f75
 8008f14:	080091a5 	.word	0x080091a5
 8008f18:	080091a5 	.word	0x080091a5
 8008f1c:	080091a5 	.word	0x080091a5
 8008f20:	080091a5 	.word	0x080091a5
 8008f24:	080091a5 	.word	0x080091a5
 8008f28:	080091a5 	.word	0x080091a5
 8008f2c:	080091a5 	.word	0x080091a5
 8008f30:	08008f9b 	.word	0x08008f9b
 8008f34:	080091a5 	.word	0x080091a5
 8008f38:	080091a5 	.word	0x080091a5
 8008f3c:	080091a5 	.word	0x080091a5
 8008f40:	080091a5 	.word	0x080091a5
 8008f44:	080091a5 	.word	0x080091a5
 8008f48:	080091a5 	.word	0x080091a5
 8008f4c:	080091a5 	.word	0x080091a5
 8008f50:	08008fa1 	.word	0x08008fa1
 8008f54:	080091a5 	.word	0x080091a5
 8008f58:	080091a5 	.word	0x080091a5
 8008f5c:	080091a5 	.word	0x080091a5
 8008f60:	080091a5 	.word	0x080091a5
 8008f64:	080091a5 	.word	0x080091a5
 8008f68:	080091a5 	.word	0x080091a5
 8008f6c:	080091a5 	.word	0x080091a5
 8008f70:	08008fa7 	.word	0x08008fa7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f74:	4b90      	ldr	r3, [pc, #576]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d009      	beq.n	8008f94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f80:	4b8d      	ldr	r3, [pc, #564]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	08db      	lsrs	r3, r3, #3
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	4a8c      	ldr	r2, [pc, #560]	; (80091bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008f92:	e10a      	b.n	80091aa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f94:	4b89      	ldr	r3, [pc, #548]	; (80091bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008f96:	61bb      	str	r3, [r7, #24]
    break;
 8008f98:	e107      	b.n	80091aa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008f9a:	4b89      	ldr	r3, [pc, #548]	; (80091c0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008f9c:	61bb      	str	r3, [r7, #24]
    break;
 8008f9e:	e104      	b.n	80091aa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008fa0:	4b88      	ldr	r3, [pc, #544]	; (80091c4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8008fa2:	61bb      	str	r3, [r7, #24]
    break;
 8008fa4:	e101      	b.n	80091aa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa6:	4b84      	ldr	r3, [pc, #528]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008fb0:	4b81      	ldr	r3, [pc, #516]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	091b      	lsrs	r3, r3, #4
 8008fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fbc:	4b7e      	ldr	r3, [pc, #504]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008fc6:	4b7c      	ldr	r3, [pc, #496]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fca:	08db      	lsrs	r3, r3, #3
 8008fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f000 80da 	beq.w	800919e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d05a      	beq.n	80090a6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d302      	bcc.n	8008ffa <HAL_RCC_GetSysClockFreq+0x106>
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d078      	beq.n	80090ea <HAL_RCC_GetSysClockFreq+0x1f6>
 8008ff8:	e099      	b.n	800912e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ffa:	4b6f      	ldr	r3, [pc, #444]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b00      	cmp	r3, #0
 8009004:	d02d      	beq.n	8009062 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009006:	4b6c      	ldr	r3, [pc, #432]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	08db      	lsrs	r3, r3, #3
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	4a6a      	ldr	r2, [pc, #424]	; (80091bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009012:	fa22 f303 	lsr.w	r3, r2, r3
 8009016:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	ee07 3a90 	vmov	s15, r3
 8009028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009030:	4b61      	ldr	r3, [pc, #388]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009040:	ed97 6a02 	vldr	s12, [r7, #8]
 8009044:	eddf 5a60 	vldr	s11, [pc, #384]	; 80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800904c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009060:	e087      	b.n	8009172 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80091cc <HAL_RCC_GetSysClockFreq+0x2d8>
 8009070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009074:	4b50      	ldr	r3, [pc, #320]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907c:	ee07 3a90 	vmov	s15, r3
 8009080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009084:	ed97 6a02 	vldr	s12, [r7, #8]
 8009088:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800908c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090a4:	e065      	b.n	8009172 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80091d0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80090b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b8:	4b3f      	ldr	r3, [pc, #252]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c0:	ee07 3a90 	vmov	s15, r3
 80090c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80090cc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80090d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090e8:	e043      	b.n	8009172 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	ee07 3a90 	vmov	s15, r3
 80090f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80091d4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80090f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fc:	4b2e      	ldr	r3, [pc, #184]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009104:	ee07 3a90 	vmov	s15, r3
 8009108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009110:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800912c:	e021      	b.n	8009172 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009138:	eddf 6a25 	vldr	s13, [pc, #148]	; 80091d0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800913c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009140:	4b1d      	ldr	r3, [pc, #116]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009150:	ed97 6a02 	vldr	s12, [r7, #8]
 8009154:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80091c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009170:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009172:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	0a5b      	lsrs	r3, r3, #9
 8009178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800917c:	3301      	adds	r3, #1
 800917e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800918a:	edd7 6a07 	vldr	s13, [r7, #28]
 800918e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009196:	ee17 3a90 	vmov	r3, s15
 800919a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800919c:	e005      	b.n	80091aa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	61bb      	str	r3, [r7, #24]
    break;
 80091a2:	e002      	b.n	80091aa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80091a4:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80091a6:	61bb      	str	r3, [r7, #24]
    break;
 80091a8:	bf00      	nop
  }

  return sysclockfreq;
 80091aa:	69bb      	ldr	r3, [r7, #24]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3724      	adds	r7, #36	; 0x24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	58024400 	.word	0x58024400
 80091bc:	03d09000 	.word	0x03d09000
 80091c0:	003d0900 	.word	0x003d0900
 80091c4:	017d7840 	.word	0x017d7840
 80091c8:	46000000 	.word	0x46000000
 80091cc:	4c742400 	.word	0x4c742400
 80091d0:	4a742400 	.word	0x4a742400
 80091d4:	4bbebc20 	.word	0x4bbebc20

080091d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091dc:	f001 fdd6 	bl	800ad8c <HAL_RCCEx_GetD1SysClockFreq>
 80091e0:	4601      	mov	r1, r0
 80091e2:	4b08      	ldr	r3, [pc, #32]	; (8009204 <HAL_RCC_GetHCLKFreq+0x2c>)
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	4a07      	ldr	r2, [pc, #28]	; (8009208 <HAL_RCC_GetHCLKFreq+0x30>)
 80091ec:	5cd3      	ldrb	r3, [r2, r3]
 80091ee:	f003 031f 	and.w	r3, r3, #31
 80091f2:	fa21 f303 	lsr.w	r3, r1, r3
 80091f6:	4a05      	ldr	r2, [pc, #20]	; (800920c <HAL_RCC_GetHCLKFreq+0x34>)
 80091f8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 80091fa:	4b04      	ldr	r3, [pc, #16]	; (800920c <HAL_RCC_GetHCLKFreq+0x34>)
 80091fc:	681b      	ldr	r3, [r3, #0]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	58024400 	.word	0x58024400
 8009208:	080110bc 	.word	0x080110bc
 800920c:	24000004 	.word	0x24000004

08009210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009214:	f7ff ffe0 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 8009218:	4601      	mov	r1, r0
 800921a:	4b06      	ldr	r3, [pc, #24]	; (8009234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	091b      	lsrs	r3, r3, #4
 8009220:	f003 0307 	and.w	r3, r3, #7
 8009224:	4a04      	ldr	r2, [pc, #16]	; (8009238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009226:	5cd3      	ldrb	r3, [r2, r3]
 8009228:	f003 031f 	and.w	r3, r3, #31
 800922c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> POSITION_VAL(RCC_CDCFGR2_CDPPRE1_0)]);
#endif
}
 8009230:	4618      	mov	r0, r3
 8009232:	bd80      	pop	{r7, pc}
 8009234:	58024400 	.word	0x58024400
 8009238:	080110bc 	.word	0x080110bc

0800923c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009240:	f7ff ffca 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 8009244:	4601      	mov	r1, r0
 8009246:	4b06      	ldr	r3, [pc, #24]	; (8009260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	0a1b      	lsrs	r3, r3, #8
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	4a04      	ldr	r2, [pc, #16]	; (8009264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009252:	5cd3      	ldrb	r3, [r2, r3]
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800925c:	4618      	mov	r0, r3
 800925e:	bd80      	pop	{r7, pc}
 8009260:	58024400 	.word	0x58024400
 8009264:	080110bc 	.word	0x080110bc

08009268 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	223f      	movs	r2, #63	; 0x3f
 8009276:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009278:	4b1a      	ldr	r3, [pc, #104]	; (80092e4 <HAL_RCC_GetClockConfig+0x7c>)
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f003 0207 	and.w	r2, r3, #7
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009284:	4b17      	ldr	r3, [pc, #92]	; (80092e4 <HAL_RCC_GetClockConfig+0x7c>)
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009290:	4b14      	ldr	r3, [pc, #80]	; (80092e4 <HAL_RCC_GetClockConfig+0x7c>)
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f003 020f 	and.w	r2, r3, #15
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800929c:	4b11      	ldr	r3, [pc, #68]	; (80092e4 <HAL_RCC_GetClockConfig+0x7c>)
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80092a8:	4b0e      	ldr	r3, [pc, #56]	; (80092e4 <HAL_RCC_GetClockConfig+0x7c>)
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80092b4:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <HAL_RCC_GetClockConfig+0x7c>)
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80092c0:	4b08      	ldr	r3, [pc, #32]	; (80092e4 <HAL_RCC_GetClockConfig+0x7c>)
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80092cc:	4b06      	ldr	r3, [pc, #24]	; (80092e8 <HAL_RCC_GetClockConfig+0x80>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 020f 	and.w	r2, r3, #15
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	601a      	str	r2, [r3, #0]
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	58024400 	.word	0x58024400
 80092e8:	52002000 	.word	0x52002000

080092ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092f4:	2300      	movs	r3, #0
 80092f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092f8:	2300      	movs	r3, #0
 80092fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d03d      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800930c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009310:	d013      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009316:	d802      	bhi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800931c:	e01f      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800931e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009322:	d013      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009324:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009328:	d01c      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800932a:	e018      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800932c:	4baf      	ldr	r3, [pc, #700]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	4aae      	ldr	r2, [pc, #696]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009336:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009338:	e015      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3304      	adds	r3, #4
 800933e:	2102      	movs	r1, #2
 8009340:	4618      	mov	r0, r3
 8009342:	f001 fd95 	bl	800ae70 <RCCEx_PLL2_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800934a:	e00c      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3324      	adds	r3, #36	; 0x24
 8009350:	2102      	movs	r1, #2
 8009352:	4618      	mov	r0, r3
 8009354:	f001 fe3e 	bl	800afd4 <RCCEx_PLL3_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800935c:	e003      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	75fb      	strb	r3, [r7, #23]
      break;
 8009362:	e000      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d109      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800936c:	4b9f      	ldr	r3, [pc, #636]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800936e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009378:	499c      	ldr	r1, [pc, #624]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800937a:	4313      	orrs	r3, r2
 800937c:	650b      	str	r3, [r1, #80]	; 0x50
 800937e:	e001      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938c:	2b00      	cmp	r3, #0
 800938e:	d03d      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009394:	2b04      	cmp	r3, #4
 8009396:	d826      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093b5 	.word	0x080093b5
 80093a4:	080093c3 	.word	0x080093c3
 80093a8:	080093d5 	.word	0x080093d5
 80093ac:	080093ed 	.word	0x080093ed
 80093b0:	080093ed 	.word	0x080093ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b4:	4b8d      	ldr	r3, [pc, #564]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a8c      	ldr	r2, [pc, #560]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093c0:	e015      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 fd51 	bl	800ae70 <RCCEx_PLL2_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d2:	e00c      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3324      	adds	r3, #36	; 0x24
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fdfa 	bl	800afd4 <RCCEx_PLL3_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093e4:	e003      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ea:	e000      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80093ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d109      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093f4:	4b7d      	ldr	r3, [pc, #500]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f8:	f023 0207 	bic.w	r2, r3, #7
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009400:	497a      	ldr	r1, [pc, #488]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009402:	4313      	orrs	r3, r2
 8009404:	650b      	str	r3, [r1, #80]	; 0x50
 8009406:	e001      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009414:	2b00      	cmp	r3, #0
 8009416:	d03e      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941c:	2b80      	cmp	r3, #128	; 0x80
 800941e:	d01c      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009420:	2b80      	cmp	r3, #128	; 0x80
 8009422:	d804      	bhi.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8009424:	2b00      	cmp	r3, #0
 8009426:	d008      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d00d      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800942c:	e01e      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800942e:	2bc0      	cmp	r3, #192	; 0xc0
 8009430:	d01f      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8009432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009436:	d01e      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009438:	e018      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800943a:	4b6c      	ldr	r3, [pc, #432]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800943c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943e:	4a6b      	ldr	r2, [pc, #428]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009444:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009446:	e017      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	2100      	movs	r1, #0
 800944e:	4618      	mov	r0, r3
 8009450:	f001 fd0e 	bl	800ae70 <RCCEx_PLL2_Config>
 8009454:	4603      	mov	r3, r0
 8009456:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009458:	e00e      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3324      	adds	r3, #36	; 0x24
 800945e:	2100      	movs	r1, #0
 8009460:	4618      	mov	r0, r3
 8009462:	f001 fdb7 	bl	800afd4 <RCCEx_PLL3_Config>
 8009466:	4603      	mov	r3, r0
 8009468:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800946a:	e005      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	75fb      	strb	r3, [r7, #23]
      break;
 8009470:	e002      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009472:	bf00      	nop
 8009474:	e000      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800947e:	4b5b      	ldr	r3, [pc, #364]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009482:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948a:	4958      	ldr	r1, [pc, #352]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800948c:	4313      	orrs	r3, r2
 800948e:	650b      	str	r3, [r1, #80]	; 0x50
 8009490:	e001      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d044      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094ac:	d01f      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 80094ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094b2:	d805      	bhi.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00a      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094bc:	d00e      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80094be:	e01f      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80094c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094c4:	d01f      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80094c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094ca:	d01e      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80094cc:	e018      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ce:	4b47      	ldr	r3, [pc, #284]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	4a46      	ldr	r2, [pc, #280]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094da:	e017      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	3304      	adds	r3, #4
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 fcc4 	bl	800ae70 <RCCEx_PLL2_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80094ec:	e00e      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3324      	adds	r3, #36	; 0x24
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 fd6d 	bl	800afd4 <RCCEx_PLL3_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80094fe:	e005      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
      break;
 8009504:	e002      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009506:	bf00      	nop
 8009508:	e000      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800950a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800950c:	7dfb      	ldrb	r3, [r7, #23]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10a      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009512:	4b36      	ldr	r3, [pc, #216]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009516:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009520:	4932      	ldr	r1, [pc, #200]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009522:	4313      	orrs	r3, r2
 8009524:	658b      	str	r3, [r1, #88]	; 0x58
 8009526:	e001      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009534:	2b00      	cmp	r3, #0
 8009536:	d044      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800953e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009542:	d01f      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009548:	d805      	bhi.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800954e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009552:	d00e      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009554:	e01f      	b.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800955a:	d01f      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800955c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009560:	d01e      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009562:	e018      	b.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009564:	4b21      	ldr	r3, [pc, #132]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	4a20      	ldr	r2, [pc, #128]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800956a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800956e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009570:	e017      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3304      	adds	r3, #4
 8009576:	2100      	movs	r1, #0
 8009578:	4618      	mov	r0, r3
 800957a:	f001 fc79 	bl	800ae70 <RCCEx_PLL2_Config>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009582:	e00e      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3324      	adds	r3, #36	; 0x24
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fd22 	bl	800afd4 <RCCEx_PLL3_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009594:	e005      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	75fb      	strb	r3, [r7, #23]
      break;
 800959a:	e002      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800959c:	bf00      	nop
 800959e:	e000      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80095a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10a      	bne.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095a8:	4b10      	ldr	r3, [pc, #64]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80095aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095b6:	490d      	ldr	r1, [pc, #52]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	658b      	str	r3, [r1, #88]	; 0x58
 80095bc:	e001      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d035      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d00c      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80095d6:	2b10      	cmp	r3, #16
 80095d8:	d802      	bhi.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d01b      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80095de:	e017      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d00c      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x312>
 80095e4:	2b30      	cmp	r3, #48	; 0x30
 80095e6:	d018      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80095e8:	e012      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80095ea:	bf00      	nop
 80095ec:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f0:	4baf      	ldr	r3, [pc, #700]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	4aae      	ldr	r2, [pc, #696]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80095fc:	e00e      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3304      	adds	r3, #4
 8009602:	2102      	movs	r1, #2
 8009604:	4618      	mov	r0, r3
 8009606:	f001 fc33 	bl	800ae70 <RCCEx_PLL2_Config>
 800960a:	4603      	mov	r3, r0
 800960c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800960e:	e005      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	75fb      	strb	r3, [r7, #23]
      break;
 8009614:	e002      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009616:	bf00      	nop
 8009618:	e000      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800961a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d109      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009622:	4ba3      	ldr	r3, [pc, #652]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009626:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800962e:	49a0      	ldr	r1, [pc, #640]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009630:	4313      	orrs	r3, r2
 8009632:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009634:	e001      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d042      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800964a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800964e:	d01f      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8009650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009654:	d805      	bhi.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800965a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800965e:	d00e      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009660:	e01f      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8009662:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009666:	d01f      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800966c:	d01e      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800966e:	e018      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009670:	4b8f      	ldr	r3, [pc, #572]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	4a8e      	ldr	r2, [pc, #568]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800967a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800967c:	e017      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3304      	adds	r3, #4
 8009682:	2100      	movs	r1, #0
 8009684:	4618      	mov	r0, r3
 8009686:	f001 fbf3 	bl	800ae70 <RCCEx_PLL2_Config>
 800968a:	4603      	mov	r3, r0
 800968c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800968e:	e00e      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3324      	adds	r3, #36	; 0x24
 8009694:	2100      	movs	r1, #0
 8009696:	4618      	mov	r0, r3
 8009698:	f001 fc9c 	bl	800afd4 <RCCEx_PLL3_Config>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096a0:	e005      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	75fb      	strb	r3, [r7, #23]
      break;
 80096a6:	e002      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80096a8:	bf00      	nop
 80096aa:	e000      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80096ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d109      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096b4:	4b7e      	ldr	r3, [pc, #504]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c0:	497b      	ldr	r1, [pc, #492]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	650b      	str	r3, [r1, #80]	; 0x50
 80096c6:	e001      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c8:	7dfb      	ldrb	r3, [r7, #23]
 80096ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d042      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e0:	d01b      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80096e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e6:	d805      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d022      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80096ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096f0:	d00a      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80096f2:	e01b      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x440>
 80096f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096f8:	d01d      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80096fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096fe:	d01c      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009704:	d01b      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009706:	e011      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3304      	adds	r3, #4
 800970c:	2101      	movs	r1, #1
 800970e:	4618      	mov	r0, r3
 8009710:	f001 fbae 	bl	800ae70 <RCCEx_PLL2_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009718:	e012      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3324      	adds	r3, #36	; 0x24
 800971e:	2101      	movs	r1, #1
 8009720:	4618      	mov	r0, r3
 8009722:	f001 fc57 	bl	800afd4 <RCCEx_PLL3_Config>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800972a:	e009      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	75fb      	strb	r3, [r7, #23]
      break;
 8009730:	e006      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009732:	bf00      	nop
 8009734:	e004      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800973e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d109      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009746:	4b5a      	ldr	r3, [pc, #360]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800974a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009752:	4957      	ldr	r1, [pc, #348]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009754:	4313      	orrs	r3, r2
 8009756:	650b      	str	r3, [r1, #80]	; 0x50
 8009758:	e001      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d044      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009774:	d01b      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800977a:	d805      	bhi.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d022      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009784:	d00a      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009786:	e01b      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978c:	d01d      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800978e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009792:	d01c      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009794:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009798:	d01b      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800979a:	e011      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3304      	adds	r3, #4
 80097a0:	2101      	movs	r1, #1
 80097a2:	4618      	mov	r0, r3
 80097a4:	f001 fb64 	bl	800ae70 <RCCEx_PLL2_Config>
 80097a8:	4603      	mov	r3, r0
 80097aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097ac:	e012      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3324      	adds	r3, #36	; 0x24
 80097b2:	2101      	movs	r1, #1
 80097b4:	4618      	mov	r0, r3
 80097b6:	f001 fc0d 	bl	800afd4 <RCCEx_PLL3_Config>
 80097ba:	4603      	mov	r3, r0
 80097bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097be:	e009      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	75fb      	strb	r3, [r7, #23]
      break;
 80097c4:	e006      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097c6:	bf00      	nop
 80097c8:	e004      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097ca:	bf00      	nop
 80097cc:	e002      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097ce:	bf00      	nop
 80097d0:	e000      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10a      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80097da:	4b35      	ldr	r3, [pc, #212]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80097dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80097e8:	4931      	ldr	r1, [pc, #196]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	658b      	str	r3, [r1, #88]	; 0x58
 80097ee:	e001      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d02d      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009808:	d005      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800980a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800980e:	d009      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d013      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009814:	e00f      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009816:	4b26      	ldr	r3, [pc, #152]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	4a25      	ldr	r2, [pc, #148]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800981c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009822:	e00c      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3304      	adds	r3, #4
 8009828:	2101      	movs	r1, #1
 800982a:	4618      	mov	r0, r3
 800982c:	f001 fb20 	bl	800ae70 <RCCEx_PLL2_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009834:	e003      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]
      break;
 800983a:	e000      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800983c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009844:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009850:	4917      	ldr	r1, [pc, #92]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009852:	4313      	orrs	r3, r2
 8009854:	650b      	str	r3, [r1, #80]	; 0x50
 8009856:	e001      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d035      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986c:	2b03      	cmp	r3, #3
 800986e:	d81b      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009870:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	080098b5 	.word	0x080098b5
 800987c:	08009889 	.word	0x08009889
 8009880:	08009897 	.word	0x08009897
 8009884:	080098b5 	.word	0x080098b5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009888:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	4a08      	ldr	r2, [pc, #32]	; (80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800988e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009894:	e00f      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3304      	adds	r3, #4
 800989a:	2102      	movs	r1, #2
 800989c:	4618      	mov	r0, r3
 800989e:	f001 fae7 	bl	800ae70 <RCCEx_PLL2_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098a6:	e006      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	75fb      	strb	r3, [r7, #23]
      break;
 80098ac:	e003      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80098ae:	bf00      	nop
 80098b0:	58024400 	.word	0x58024400
      break;
 80098b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d109      	bne.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098bc:	4bba      	ldr	r3, [pc, #744]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c0:	f023 0203 	bic.w	r2, r3, #3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c8:	49b7      	ldr	r1, [pc, #732]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098ce:	e001      	b.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 8086 	beq.w	80099ee <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098e2:	4bb2      	ldr	r3, [pc, #712]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4ab1      	ldr	r2, [pc, #708]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80098e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098ee:	f7f9 f8d9 	bl	8002aa4 <HAL_GetTick>
 80098f2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098f4:	e009      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098f6:	f7f9 f8d5 	bl	8002aa4 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b64      	cmp	r3, #100	; 0x64
 8009902:	d902      	bls.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	75fb      	strb	r3, [r7, #23]
        break;
 8009908:	e005      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800990a:	4ba8      	ldr	r3, [pc, #672]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0ef      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d166      	bne.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800991c:	4ba2      	ldr	r3, [pc, #648]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800991e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009926:	4053      	eors	r3, r2
 8009928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992c:	2b00      	cmp	r3, #0
 800992e:	d013      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009930:	4b9d      	ldr	r3, [pc, #628]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009938:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800993a:	4b9b      	ldr	r3, [pc, #620]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800993c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993e:	4a9a      	ldr	r2, [pc, #616]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009944:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009946:	4b98      	ldr	r3, [pc, #608]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994a:	4a97      	ldr	r2, [pc, #604]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800994c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009950:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009952:	4a95      	ldr	r2, [pc, #596]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800995e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009962:	d115      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009964:	f7f9 f89e 	bl	8002aa4 <HAL_GetTick>
 8009968:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800996a:	e00b      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800996c:	f7f9 f89a 	bl	8002aa4 <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	f241 3288 	movw	r2, #5000	; 0x1388
 800997a:	4293      	cmp	r3, r2
 800997c:	d902      	bls.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	75fb      	strb	r3, [r7, #23]
            break;
 8009982:	e005      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009984:	4b88      	ldr	r3, [pc, #544]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0ed      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d126      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800999c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099a4:	d10d      	bne.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80099a6:	4b80      	ldr	r3, [pc, #512]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099b4:	0919      	lsrs	r1, r3, #4
 80099b6:	4b7e      	ldr	r3, [pc, #504]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80099b8:	400b      	ands	r3, r1
 80099ba:	497b      	ldr	r1, [pc, #492]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	610b      	str	r3, [r1, #16]
 80099c0:	e005      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80099c2:	4b79      	ldr	r3, [pc, #484]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	4a78      	ldr	r2, [pc, #480]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099cc:	6113      	str	r3, [r2, #16]
 80099ce:	4b76      	ldr	r3, [pc, #472]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099dc:	4972      	ldr	r1, [pc, #456]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	670b      	str	r3, [r1, #112]	; 0x70
 80099e2:	e004      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
 80099e6:	75bb      	strb	r3, [r7, #22]
 80099e8:	e001      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
 80099ec:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d07d      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099fe:	2b28      	cmp	r3, #40	; 0x28
 8009a00:	d866      	bhi.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009ad7 	.word	0x08009ad7
 8009a0c:	08009ad1 	.word	0x08009ad1
 8009a10:	08009ad1 	.word	0x08009ad1
 8009a14:	08009ad1 	.word	0x08009ad1
 8009a18:	08009ad1 	.word	0x08009ad1
 8009a1c:	08009ad1 	.word	0x08009ad1
 8009a20:	08009ad1 	.word	0x08009ad1
 8009a24:	08009ad1 	.word	0x08009ad1
 8009a28:	08009aad 	.word	0x08009aad
 8009a2c:	08009ad1 	.word	0x08009ad1
 8009a30:	08009ad1 	.word	0x08009ad1
 8009a34:	08009ad1 	.word	0x08009ad1
 8009a38:	08009ad1 	.word	0x08009ad1
 8009a3c:	08009ad1 	.word	0x08009ad1
 8009a40:	08009ad1 	.word	0x08009ad1
 8009a44:	08009ad1 	.word	0x08009ad1
 8009a48:	08009abf 	.word	0x08009abf
 8009a4c:	08009ad1 	.word	0x08009ad1
 8009a50:	08009ad1 	.word	0x08009ad1
 8009a54:	08009ad1 	.word	0x08009ad1
 8009a58:	08009ad1 	.word	0x08009ad1
 8009a5c:	08009ad1 	.word	0x08009ad1
 8009a60:	08009ad1 	.word	0x08009ad1
 8009a64:	08009ad1 	.word	0x08009ad1
 8009a68:	08009ad7 	.word	0x08009ad7
 8009a6c:	08009ad1 	.word	0x08009ad1
 8009a70:	08009ad1 	.word	0x08009ad1
 8009a74:	08009ad1 	.word	0x08009ad1
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	08009ad1 	.word	0x08009ad1
 8009a80:	08009ad1 	.word	0x08009ad1
 8009a84:	08009ad1 	.word	0x08009ad1
 8009a88:	08009ad7 	.word	0x08009ad7
 8009a8c:	08009ad1 	.word	0x08009ad1
 8009a90:	08009ad1 	.word	0x08009ad1
 8009a94:	08009ad1 	.word	0x08009ad1
 8009a98:	08009ad1 	.word	0x08009ad1
 8009a9c:	08009ad1 	.word	0x08009ad1
 8009aa0:	08009ad1 	.word	0x08009ad1
 8009aa4:	08009ad1 	.word	0x08009ad1
 8009aa8:	08009ad7 	.word	0x08009ad7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 f9dc 	bl	800ae70 <RCCEx_PLL2_Config>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009abc:	e00c      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	3324      	adds	r3, #36	; 0x24
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 fa85 	bl	800afd4 <RCCEx_PLL3_Config>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ace:	e003      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad4:	e000      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ade:	4b32      	ldr	r3, [pc, #200]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aea:	492f      	ldr	r1, [pc, #188]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009aec:	4313      	orrs	r3, r2
 8009aee:	654b      	str	r3, [r1, #84]	; 0x54
 8009af0:	e001      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af2:	7dfb      	ldrb	r3, [r7, #23]
 8009af4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d037      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d820      	bhi.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009b0a:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b53 	.word	0x08009b53
 8009b14:	08009b29 	.word	0x08009b29
 8009b18:	08009b3b 	.word	0x08009b3b
 8009b1c:	08009b53 	.word	0x08009b53
 8009b20:	08009b53 	.word	0x08009b53
 8009b24:	08009b53 	.word	0x08009b53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f001 f99e 	bl	800ae70 <RCCEx_PLL2_Config>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b38:	e00c      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3324      	adds	r3, #36	; 0x24
 8009b3e:	2101      	movs	r1, #1
 8009b40:	4618      	mov	r0, r3
 8009b42:	f001 fa47 	bl	800afd4 <RCCEx_PLL3_Config>
 8009b46:	4603      	mov	r3, r0
 8009b48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b4a:	e003      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b50:	e000      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d109      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b5a:	4b13      	ldr	r3, [pc, #76]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5e:	f023 0207 	bic.w	r2, r3, #7
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b66:	4910      	ldr	r1, [pc, #64]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	654b      	str	r3, [r1, #84]	; 0x54
 8009b6c:	e001      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0304 	and.w	r3, r3, #4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d040      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b84:	2b05      	cmp	r3, #5
 8009b86:	d827      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009bdf 	.word	0x08009bdf
 8009b94:	08009bb5 	.word	0x08009bb5
 8009b98:	08009bc7 	.word	0x08009bc7
 8009b9c:	08009bdf 	.word	0x08009bdf
 8009ba0:	08009bdf 	.word	0x08009bdf
 8009ba4:	08009bdf 	.word	0x08009bdf
 8009ba8:	58024400 	.word	0x58024400
 8009bac:	58024800 	.word	0x58024800
 8009bb0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	2101      	movs	r1, #1
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 f958 	bl	800ae70 <RCCEx_PLL2_Config>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bc4:	e00c      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3324      	adds	r3, #36	; 0x24
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 fa01 	bl	800afd4 <RCCEx_PLL3_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bd6:	e003      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	75fb      	strb	r3, [r7, #23]
      break;
 8009bdc:	e000      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009be6:	4bb2      	ldr	r3, [pc, #712]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bea:	f023 0207 	bic.w	r2, r3, #7
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf4:	49ae      	ldr	r1, [pc, #696]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	658b      	str	r3, [r1, #88]	; 0x58
 8009bfa:	e001      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0320 	and.w	r3, r3, #32
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d044      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c16:	d01b      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c1c:	d805      	bhi.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d022      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c26:	d00a      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009c28:	e01b      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c2e:	d01d      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c34:	d01c      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009c36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c3a:	d01b      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009c3c:	e011      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3304      	adds	r3, #4
 8009c42:	2100      	movs	r1, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 f913 	bl	800ae70 <RCCEx_PLL2_Config>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c4e:	e012      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3324      	adds	r3, #36	; 0x24
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 f9bc 	bl	800afd4 <RCCEx_PLL3_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c60:	e009      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	75fb      	strb	r3, [r7, #23]
      break;
 8009c66:	e006      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c68:	bf00      	nop
 8009c6a:	e004      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e002      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c7c:	4b8c      	ldr	r3, [pc, #560]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c80:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c8a:	4989      	ldr	r1, [pc, #548]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	654b      	str	r3, [r1, #84]	; 0x54
 8009c90:	e001      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d044      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cac:	d01b      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cb2:	d805      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d022      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cbc:	d00a      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009cbe:	e01b      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc4:	d01d      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009cc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cca:	d01c      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009ccc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cd0:	d01b      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009cd2:	e011      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 f8c8 	bl	800ae70 <RCCEx_PLL2_Config>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009ce4:	e012      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3324      	adds	r3, #36	; 0x24
 8009cea:	2102      	movs	r1, #2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 f971 	bl	800afd4 <RCCEx_PLL3_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009cf6:	e009      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfc:	e006      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009cfe:	bf00      	nop
 8009d00:	e004      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009d02:	bf00      	nop
 8009d04:	e002      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d12:	4b67      	ldr	r3, [pc, #412]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d20:	4963      	ldr	r1, [pc, #396]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	658b      	str	r3, [r1, #88]	; 0x58
 8009d26:	e001      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d044      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d42:	d01b      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d48:	d805      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d022      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d52:	d00a      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d54:	e01b      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8009d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d5a:	d01d      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009d5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d60:	d01c      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009d62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d66:	d01b      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009d68:	e011      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	2100      	movs	r1, #0
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 f87d 	bl	800ae70 <RCCEx_PLL2_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009d7a:	e012      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3324      	adds	r3, #36	; 0x24
 8009d80:	2102      	movs	r1, #2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f001 f926 	bl	800afd4 <RCCEx_PLL3_Config>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009d8c:	e009      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	75fb      	strb	r3, [r7, #23]
      break;
 8009d92:	e006      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009d94:	bf00      	nop
 8009d96:	e004      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009d98:	bf00      	nop
 8009d9a:	e002      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009d9c:	bf00      	nop
 8009d9e:	e000      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10a      	bne.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009da8:	4b41      	ldr	r3, [pc, #260]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009db6:	493e      	ldr	r1, [pc, #248]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	658b      	str	r3, [r1, #88]	; 0x58
 8009dbc:	e001      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0308 	and.w	r3, r3, #8
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d01a      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dd8:	d10a      	bne.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3324      	adds	r3, #36	; 0x24
 8009dde:	2102      	movs	r1, #2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 f8f7 	bl	800afd4 <RCCEx_PLL3_Config>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009df0:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dfe:	492c      	ldr	r1, [pc, #176]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01a      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1a:	d10a      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3324      	adds	r3, #36	; 0x24
 8009e20:	2102      	movs	r1, #2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 f8d6 	bl	800afd4 <RCCEx_PLL3_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e32:	4b1f      	ldr	r3, [pc, #124]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e40:	491b      	ldr	r1, [pc, #108]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d032      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e5c:	d00d      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e62:	d016      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d111      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fffe 	bl	800ae70 <RCCEx_PLL2_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009e78:	e00c      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3324      	adds	r3, #36	; 0x24
 8009e7e:	2102      	movs	r1, #2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f001 f8a7 	bl	800afd4 <RCCEx_PLL3_Config>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009e8a:	e003      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e90:	e000      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e94:	7dfb      	ldrb	r3, [r7, #23]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10c      	bne.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ea8:	4901      	ldr	r1, [pc, #4]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	658b      	str	r3, [r1, #88]	; 0x58
 8009eae:	e003      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009eb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d02f      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ece:	d00c      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009ed0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ed4:	d015      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eda:	d10f      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009edc:	4b71      	ldr	r3, [pc, #452]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	4a70      	ldr	r2, [pc, #448]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ee8:	e00c      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3324      	adds	r3, #36	; 0x24
 8009eee:	2101      	movs	r1, #1
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 f86f 	bl	800afd4 <RCCEx_PLL3_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009efa:	e003      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	75fb      	strb	r3, [r7, #23]
      break;
 8009f00:	e000      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f0a:	4b66      	ldr	r3, [pc, #408]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f18:	4962      	ldr	r1, [pc, #392]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	654b      	str	r3, [r1, #84]	; 0x54
 8009f1e:	e001      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d029      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f3c:	d007      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009f3e:	e00f      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f40:	4b58      	ldr	r3, [pc, #352]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	4a57      	ldr	r2, [pc, #348]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f4c:	e00b      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	3304      	adds	r3, #4
 8009f52:	2102      	movs	r1, #2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 ff8b 	bl	800ae70 <RCCEx_PLL2_Config>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f5e:	e002      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	75fb      	strb	r3, [r7, #23]
      break;
 8009f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d109      	bne.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f6c:	4b4d      	ldr	r3, [pc, #308]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f78:	494a      	ldr	r1, [pc, #296]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f7e:	e001      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00a      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3324      	adds	r3, #36	; 0x24
 8009f94:	2102      	movs	r1, #2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 f81c 	bl	800afd4 <RCCEx_PLL3_Config>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d02f      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fba:	d00c      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc0:	d802      	bhi.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d011      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009fc6:	e00d      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8009fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fcc:	d00f      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fd2:	d00e      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009fd4:	e006      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fd6:	4b33      	ldr	r3, [pc, #204]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	4a32      	ldr	r2, [pc, #200]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009fe2:	e007      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe8:	e004      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009fea:	bf00      	nop
 8009fec:	e002      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009fee:	bf00      	nop
 8009ff0:	e000      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d109      	bne.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ffa:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a006:	4927      	ldr	r1, [pc, #156]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	654b      	str	r3, [r1, #84]	; 0x54
 800a00c:	e001      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d008      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a01e:	4b21      	ldr	r3, [pc, #132]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02a:	491e      	ldr	r1, [pc, #120]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a02c:	4313      	orrs	r3, r2
 800a02e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d008      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a03c:	4b19      	ldr	r3, [pc, #100]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a040:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a048:	4916      	ldr	r1, [pc, #88]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00d      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a05a:	4b12      	ldr	r3, [pc, #72]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	4a11      	ldr	r2, [pc, #68]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a064:	6113      	str	r3, [r2, #16]
 800a066:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a070:	490c      	ldr	r1, [pc, #48]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a072:	4313      	orrs	r3, r2
 800a074:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	da08      	bge.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a07e:	4b09      	ldr	r3, [pc, #36]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a082:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08a:	4906      	ldr	r1, [pc, #24]	; (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a090:	7dbb      	ldrb	r3, [r7, #22]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	e000      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	58024400 	.word	0x58024400

0800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b090      	sub	sp, #64	; 0x40
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0b6:	d150      	bne.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a0b8:	4ba1      	ldr	r3, [pc, #644]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0bc:	f003 0307 	and.w	r3, r3, #7
 800a0c0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	2b04      	cmp	r3, #4
 800a0c6:	d844      	bhi.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a0c8:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a0e5 	.word	0x0800a0e5
 800a0d4:	0800a0f5 	.word	0x0800a0f5
 800a0d8:	0800a105 	.word	0x0800a105
 800a0dc:	0800a14d 	.word	0x0800a14d
 800a0e0:	0800a115 	.word	0x0800a115
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fd03 	bl	800aaf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0f2:	e241      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0f4:	f107 0318 	add.w	r3, r7, #24
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fa63 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a102:	e239      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a104:	f107 030c 	add.w	r3, r7, #12
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fba7 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a112:	e231      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a114:	4b8a      	ldr	r3, [pc, #552]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a118:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a11c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a124:	4b87      	ldr	r3, [pc, #540]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a126:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a128:	e226      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a130:	d102      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a132:	4b85      	ldr	r3, [pc, #532]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a136:	e21f      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a13e:	d102      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a140:	4b82      	ldr	r3, [pc, #520]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a144:	e218      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a14a:	e215      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a14c:	4b80      	ldr	r3, [pc, #512]	; (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a14e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a150:	e212      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a156:	bf00      	nop
 800a158:	e20e      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a160:	d14f      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a162:	4b77      	ldr	r3, [pc, #476]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a166:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a16a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	2b80      	cmp	r3, #128	; 0x80
 800a170:	d01c      	beq.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a172:	2b80      	cmp	r3, #128	; 0x80
 800a174:	d804      	bhi.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d008      	beq.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a17a:	2b40      	cmp	r3, #64	; 0x40
 800a17c:	d00e      	beq.n	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a17e:	e03c      	b.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a180:	2bc0      	cmp	r3, #192	; 0xc0
 800a182:	d037      	beq.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a188:	d018      	beq.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a18a:	e036      	b.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a18c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fcaf 	bl	800aaf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a19a:	e1ed      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a19c:	f107 0318 	add.w	r3, r7, #24
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 fa0f 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1aa:	e1e5      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1ac:	f107 030c 	add.w	r3, r7, #12
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 fb53 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ba:	e1dd      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a1bc:	4b60      	ldr	r3, [pc, #384]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a1cc:	4b5d      	ldr	r3, [pc, #372]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a1d0:	e1d2      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1d8:	d102      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a1da:	4b5b      	ldr	r3, [pc, #364]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1de:	e1cb      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1e6:	d102      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a1e8:	4b58      	ldr	r3, [pc, #352]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ec:	e1c4      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f2:	e1c1      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a1f4:	4b56      	ldr	r3, [pc, #344]	; (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f8:	e1be      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1fe:	bf00      	nop
 800a200:	e1ba      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a208:	d153      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a20a:	4b4d      	ldr	r3, [pc, #308]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a212:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a21a:	d01f      	beq.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a21c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a220:	d805      	bhi.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a22a:	d00f      	beq.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a22c:	e03d      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a22e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a232:	d037      	beq.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a234:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a238:	d018      	beq.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a23a:	e036      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a23c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a240:	4618      	mov	r0, r3
 800a242:	f000 fc57 	bl	800aaf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a24a:	e195      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a24c:	f107 0318 	add.w	r3, r7, #24
 800a250:	4618      	mov	r0, r3
 800a252:	f000 f9b7 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a25a:	e18d      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a25c:	f107 030c 	add.w	r3, r7, #12
 800a260:	4618      	mov	r0, r3
 800a262:	f000 fafb 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a26a:	e185      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a26c:	4b34      	ldr	r3, [pc, #208]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a26e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a274:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a27c:	4b31      	ldr	r3, [pc, #196]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a280:	e17a      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a288:	d102      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a28a:	4b2f      	ldr	r3, [pc, #188]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a28c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a28e:	e173      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a296:	d102      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a298:	4b2c      	ldr	r3, [pc, #176]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a29c:	e16c      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a2:	e169      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a2a4:	4b2a      	ldr	r3, [pc, #168]	; (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a8:	e166      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ae:	bf00      	nop
 800a2b0:	e162      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2b8:	d15d      	bne.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a2ba:	4b21      	ldr	r3, [pc, #132]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2be:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a2c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2ca:	d01f      	beq.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2d0:	d805      	bhi.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a2d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2da:	d00f      	beq.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a2dc:	e047      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a2de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2e2:	d041      	beq.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a2e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2e8:	d018      	beq.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a2ea:	e040      	b.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 fbff 	bl	800aaf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2fa:	e13d      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fc:	f107 0318 	add.w	r3, r7, #24
 800a300:	4618      	mov	r0, r3
 800a302:	f000 f95f 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a30a:	e135      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a30c:	f107 030c 	add.w	r3, r7, #12
 800a310:	4618      	mov	r0, r3
 800a312:	f000 faa3 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a31a:	e12d      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a31c:	4b08      	ldr	r3, [pc, #32]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a31e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a324:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a32c:	4b05      	ldr	r3, [pc, #20]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a32e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a330:	e122      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a338:	d10c      	bne.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a33a:	4b03      	ldr	r3, [pc, #12]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a33e:	e11b      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a340:	58024400 	.word	0x58024400
 800a344:	03d09000 	.word	0x03d09000
 800a348:	003d0900 	.word	0x003d0900
 800a34c:	017d7840 	.word	0x017d7840
 800a350:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a35a:	d102      	bne.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a35c:	4b89      	ldr	r3, [pc, #548]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a35e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a360:	e10a      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a366:	e107      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a368:	4b87      	ldr	r3, [pc, #540]	; (800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a36a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a36c:	e104      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a36e:	2300      	movs	r3, #0
 800a370:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a372:	bf00      	nop
 800a374:	e100      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37c:	d153      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a37e:	4b83      	ldr	r3, [pc, #524]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a382:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a386:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a38e:	d01f      	beq.n	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a394:	d805      	bhi.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a39e:	d00f      	beq.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a3a0:	e03d      	b.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a3a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3a6:	d037      	beq.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a3a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ac:	d018      	beq.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a3ae:	e036      	b.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fb9d 	bl	800aaf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3be:	e0db      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3c0:	f107 0318 	add.w	r3, r7, #24
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 f8fd 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ce:	e0d3      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3d0:	f107 030c 	add.w	r3, r7, #12
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fa41 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3de:	e0cb      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a3e0:	4b6a      	ldr	r3, [pc, #424]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a3e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a3f0:	4b67      	ldr	r3, [pc, #412]	; (800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a3f4:	e0c0      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3fc:	d102      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a3fe:	4b65      	ldr	r3, [pc, #404]	; (800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a402:	e0b9      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a40a:	d102      	bne.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a40c:	4b5d      	ldr	r3, [pc, #372]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a40e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a410:	e0b2      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a412:	2300      	movs	r3, #0
 800a414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a416:	e0af      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a418:	4b5b      	ldr	r3, [pc, #364]	; (800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a41a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a41c:	e0ac      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a422:	bf00      	nop
 800a424:	e0a8      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a42c:	d13d      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a42e:	4b57      	ldr	r3, [pc, #348]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a436:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a43e:	d00c      	beq.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a444:	d011      	beq.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a446:	2b00      	cmp	r3, #0
 800a448:	d12b      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a44a:	f107 0318 	add.w	r3, r7, #24
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 f8b8 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a458:	e08e      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45a:	f107 030c 	add.w	r3, r7, #12
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 f9fc 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a468:	e086      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a46a:	4b48      	ldr	r3, [pc, #288]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a46e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a472:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a47a:	4b45      	ldr	r3, [pc, #276]	; (800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a47c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a47e:	e07b      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a486:	d102      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a488:	4b42      	ldr	r3, [pc, #264]	; (800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a48c:	e074      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a494:	d102      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a496:	4b3b      	ldr	r3, [pc, #236]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a49a:	e06d      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4a0:	e06a      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4a6:	bf00      	nop
 800a4a8:	e066      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b0:	d11f      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a4b2:	4b36      	ldr	r3, [pc, #216]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a4c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c6:	d008      	beq.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a4c8:	e00f      	b.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 fb10 	bl	800aaf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d8:	e04e      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4da:	f107 0318 	add.w	r3, r7, #24
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 f870 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a4e4:	6a3b      	ldr	r3, [r7, #32]
 800a4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4e8:	e046      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ee:	bf00      	nop
 800a4f0:	e042      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4f8:	d13c      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a4fa:	4b24      	ldr	r3, [pc, #144]	; (800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a502:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a50a:	d01e      	beq.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a50c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a510:	d805      	bhi.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00d      	beq.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a51a:	d00e      	beq.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a51c:	e026      	b.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a522:	d01d      	beq.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a528:	d01d      	beq.n	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a52a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a52e:	d014      	beq.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a530:	e01c      	b.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a532:	f000 f831 	bl	800a598 <HAL_RCCEx_GetD3PCLK1Freq>
 800a536:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a538:	e01e      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a53a:	f107 0318 	add.w	r3, r7, #24
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 f840 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a548:	e016      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a54a:	f107 030c 	add.w	r3, r7, #12
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 f984 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a558:	e00e      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a55a:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a55c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a55e:	e00b      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a560:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a564:	e008      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a566:	4b07      	ldr	r3, [pc, #28]	; (800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a56a:	e005      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a570:	bf00      	nop
 800a572:	e001      	b.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3740      	adds	r7, #64	; 0x40
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	017d7840 	.word	0x017d7840
 800a588:	00bb8000 	.word	0x00bb8000
 800a58c:	58024400 	.word	0x58024400
 800a590:	03d09000 	.word	0x03d09000
 800a594:	003d0900 	.word	0x003d0900

0800a598 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a59c:	f7fe fe1c 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 800a5a0:	4601      	mov	r1, r0
 800a5a2:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	091b      	lsrs	r3, r3, #4
 800a5a8:	f003 0307 	and.w	r3, r3, #7
 800a5ac:	4a04      	ldr	r2, [pc, #16]	; (800a5c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a5ae:	5cd3      	ldrb	r3, [r2, r3]
 800a5b0:	f003 031f 	and.w	r3, r3, #31
 800a5b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	58024400 	.word	0x58024400
 800a5c0:	080110bc 	.word	0x080110bc

0800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b089      	sub	sp, #36	; 0x24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5cc:	4b9d      	ldr	r3, [pc, #628]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a5d6:	4b9b      	ldr	r3, [pc, #620]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	0b1b      	lsrs	r3, r3, #12
 800a5dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a5e2:	4b98      	ldr	r3, [pc, #608]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	091b      	lsrs	r3, r3, #4
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a5ee:	4b95      	ldr	r3, [pc, #596]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f2:	08db      	lsrs	r3, r3, #3
 800a5f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	fb02 f303 	mul.w	r3, r2, r3
 800a5fe:	ee07 3a90 	vmov	s15, r3
 800a602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a606:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 810a 	beq.w	800a826 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d05a      	beq.n	800a6ce <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d302      	bcc.n	800a622 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d078      	beq.n	800a712 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a620:	e099      	b.n	800a756 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a622:	4b88      	ldr	r3, [pc, #544]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d02d      	beq.n	800a68a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a62e:	4b85      	ldr	r3, [pc, #532]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	08db      	lsrs	r3, r3, #3
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	4a83      	ldr	r2, [pc, #524]	; (800a848 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800a63a:	fa22 f303 	lsr.w	r3, r2, r3
 800a63e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	ee07 3a90 	vmov	s15, r3
 800a650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a658:	4b7a      	ldr	r3, [pc, #488]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a660:	ee07 3a90 	vmov	s15, r3
 800a664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a668:	ed97 6a03 	vldr	s12, [r7, #12]
 800a66c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a67c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a680:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a684:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a688:	e087      	b.n	800a79a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	ee07 3a90 	vmov	s15, r3
 800a690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a694:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a850 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a69c:	4b69      	ldr	r3, [pc, #420]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a6b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6cc:	e065      	b.n	800a79a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	ee07 3a90 	vmov	s15, r3
 800a6d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a6dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6e0:	4b58      	ldr	r3, [pc, #352]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e8:	ee07 3a90 	vmov	s15, r3
 800a6ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a6f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a710:	e043      	b.n	800a79a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	ee07 3a90 	vmov	s15, r3
 800a718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a858 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a724:	4b47      	ldr	r3, [pc, #284]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72c:	ee07 3a90 	vmov	s15, r3
 800a730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a734:	ed97 6a03 	vldr	s12, [r7, #12]
 800a738:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a73c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a754:	e021      	b.n	800a79a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	ee07 3a90 	vmov	s15, r3
 800a75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a760:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a768:	4b36      	ldr	r3, [pc, #216]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a770:	ee07 3a90 	vmov	s15, r3
 800a774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a778:	ed97 6a03 	vldr	s12, [r7, #12]
 800a77c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a84c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a78c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a798:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a79a:	4b2a      	ldr	r3, [pc, #168]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79e:	0a5b      	lsrs	r3, r3, #9
 800a7a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7a4:	ee07 3a90 	vmov	s15, r3
 800a7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7c0:	ee17 2a90 	vmov	r2, s15
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a7c8:	4b1e      	ldr	r3, [pc, #120]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7cc:	0c1b      	lsrs	r3, r3, #16
 800a7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7ee:	ee17 2a90 	vmov	r2, s15
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	; (800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fa:	0e1b      	lsrs	r3, r3, #24
 800a7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a800:	ee07 3a90 	vmov	s15, r3
 800a804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a80c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a810:	edd7 6a07 	vldr	s13, [r7, #28]
 800a814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a81c:	ee17 2a90 	vmov	r2, s15
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a824:	e008      	b.n	800a838 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	609a      	str	r2, [r3, #8]
}
 800a838:	bf00      	nop
 800a83a:	3724      	adds	r7, #36	; 0x24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	58024400 	.word	0x58024400
 800a848:	03d09000 	.word	0x03d09000
 800a84c:	46000000 	.word	0x46000000
 800a850:	4c742400 	.word	0x4c742400
 800a854:	4a742400 	.word	0x4a742400
 800a858:	4bbebc20 	.word	0x4bbebc20

0800a85c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b089      	sub	sp, #36	; 0x24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a864:	4b9d      	ldr	r3, [pc, #628]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a86e:	4b9b      	ldr	r3, [pc, #620]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a872:	0d1b      	lsrs	r3, r3, #20
 800a874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a878:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a87a:	4b98      	ldr	r3, [pc, #608]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a886:	4b95      	ldr	r3, [pc, #596]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a88a:	08db      	lsrs	r3, r3, #3
 800a88c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	fb02 f303 	mul.w	r3, r2, r3
 800a896:	ee07 3a90 	vmov	s15, r3
 800a89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a89e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 810a 	beq.w	800aabe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d05a      	beq.n	800a966 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d302      	bcc.n	800a8ba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d078      	beq.n	800a9aa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a8b8:	e099      	b.n	800a9ee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8ba:	4b88      	ldr	r3, [pc, #544]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0320 	and.w	r3, r3, #32
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d02d      	beq.n	800a922 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8c6:	4b85      	ldr	r3, [pc, #532]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	08db      	lsrs	r3, r3, #3
 800a8cc:	f003 0303 	and.w	r3, r3, #3
 800a8d0:	4a83      	ldr	r2, [pc, #524]	; (800aae0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	ee07 3a90 	vmov	s15, r3
 800a8e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8f0:	4b7a      	ldr	r3, [pc, #488]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f8:	ee07 3a90 	vmov	s15, r3
 800a8fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a900:	ed97 6a03 	vldr	s12, [r7, #12]
 800a904:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a90c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a920:	e087      	b.n	800aa32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	ee07 3a90 	vmov	s15, r3
 800a928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aae8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a934:	4b69      	ldr	r3, [pc, #420]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93c:	ee07 3a90 	vmov	s15, r3
 800a940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a944:	ed97 6a03 	vldr	s12, [r7, #12]
 800a948:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a94c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a960:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a964:	e065      	b.n	800aa32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	ee07 3a90 	vmov	s15, r3
 800a96c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a970:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a978:	4b58      	ldr	r3, [pc, #352]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a980:	ee07 3a90 	vmov	s15, r3
 800a984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a988:	ed97 6a03 	vldr	s12, [r7, #12]
 800a98c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a99c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9a8:	e043      	b.n	800aa32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	ee07 3a90 	vmov	s15, r3
 800a9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aaf0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a9b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9bc:	4b47      	ldr	r3, [pc, #284]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c4:	ee07 3a90 	vmov	s15, r3
 800a9c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a9d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9ec:	e021      	b.n	800aa32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	ee07 3a90 	vmov	s15, r3
 800a9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800aaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a9fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa00:	4b36      	ldr	r3, [pc, #216]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa08:	ee07 3a90 	vmov	s15, r3
 800aa0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa10:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa14:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800aa18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa30:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aa32:	4b2a      	ldr	r3, [pc, #168]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa36:	0a5b      	lsrs	r3, r3, #9
 800aa38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3c:	ee07 3a90 	vmov	s15, r3
 800aa40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa58:	ee17 2a90 	vmov	r2, s15
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aa60:	4b1e      	ldr	r3, [pc, #120]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa64:	0c1b      	lsrs	r3, r3, #16
 800aa66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa86:	ee17 2a90 	vmov	r2, s15
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aa8e:	4b13      	ldr	r3, [pc, #76]	; (800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	0e1b      	lsrs	r3, r3, #24
 800aa94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaa8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aab4:	ee17 2a90 	vmov	r2, s15
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aabc:	e008      	b.n	800aad0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	609a      	str	r2, [r3, #8]
}
 800aad0:	bf00      	nop
 800aad2:	3724      	adds	r7, #36	; 0x24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	58024400 	.word	0x58024400
 800aae0:	03d09000 	.word	0x03d09000
 800aae4:	46000000 	.word	0x46000000
 800aae8:	4c742400 	.word	0x4c742400
 800aaec:	4a742400 	.word	0x4a742400
 800aaf0:	4bbebc20 	.word	0x4bbebc20

0800aaf4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b089      	sub	sp, #36	; 0x24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aafc:	4b9d      	ldr	r3, [pc, #628]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab00:	f003 0303 	and.w	r3, r3, #3
 800ab04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800ab06:	4b9b      	ldr	r3, [pc, #620]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0a:	091b      	lsrs	r3, r3, #4
 800ab0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ab12:	4b98      	ldr	r3, [pc, #608]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ab1c:	4b95      	ldr	r3, [pc, #596]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab20:	08db      	lsrs	r3, r3, #3
 800ab22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	fb02 f303 	mul.w	r3, r2, r3
 800ab2c:	ee07 3a90 	vmov	s15, r3
 800ab30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 810a 	beq.w	800ad54 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d05a      	beq.n	800abfc <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d302      	bcc.n	800ab50 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d078      	beq.n	800ac40 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800ab4e:	e099      	b.n	800ac84 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab50:	4b88      	ldr	r3, [pc, #544]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 0320 	and.w	r3, r3, #32
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d02d      	beq.n	800abb8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab5c:	4b85      	ldr	r3, [pc, #532]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	08db      	lsrs	r3, r3, #3
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	4a84      	ldr	r2, [pc, #528]	; (800ad78 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800ab68:	fa22 f303 	lsr.w	r3, r2, r3
 800ab6c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	ee07 3a90 	vmov	s15, r3
 800ab74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	ee07 3a90 	vmov	s15, r3
 800ab7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab86:	4b7b      	ldr	r3, [pc, #492]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ad7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ab9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800abb6:	e087      	b.n	800acc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ad80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800abc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abca:	4b6a      	ldr	r3, [pc, #424]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800abcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abda:	ed97 6a03 	vldr	s12, [r7, #12]
 800abde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ad7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800abe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abfa:	e065      	b.n	800acc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ad84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800ac0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0e:	4b59      	ldr	r3, [pc, #356]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ad7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ac26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac3e:	e043      	b.n	800acc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	ee07 3a90 	vmov	s15, r3
 800ac46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac52:	4b48      	ldr	r3, [pc, #288]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ac6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac82:	e021      	b.n	800acc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800ac92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac96:	4b37      	ldr	r3, [pc, #220]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ad7c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800acae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acc6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800acc8:	4b2a      	ldr	r3, [pc, #168]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800acca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800accc:	0a5b      	lsrs	r3, r3, #9
 800acce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ace2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ace6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acee:	ee17 2a90 	vmov	r2, s15
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800acf6:	4b1f      	ldr	r3, [pc, #124]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800acf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfa:	0c1b      	lsrs	r3, r3, #16
 800acfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad00:	ee07 3a90 	vmov	s15, r3
 800ad04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad1c:	ee17 2a90 	vmov	r2, s15
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ad24:	4b13      	ldr	r3, [pc, #76]	; (800ad74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ad26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad28:	0e1b      	lsrs	r3, r3, #24
 800ad2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad4a:	ee17 2a90 	vmov	r2, s15
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ad52:	e008      	b.n	800ad66 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	609a      	str	r2, [r3, #8]
}
 800ad66:	bf00      	nop
 800ad68:	3724      	adds	r7, #36	; 0x24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	58024400 	.word	0x58024400
 800ad78:	03d09000 	.word	0x03d09000
 800ad7c:	46000000 	.word	0x46000000
 800ad80:	4c742400 	.word	0x4c742400
 800ad84:	4a742400 	.word	0x4a742400
 800ad88:	4bbebc20 	.word	0x4bbebc20

0800ad8c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad90:	f7fe f8b0 	bl	8008ef4 <HAL_RCC_GetSysClockFreq>
 800ad94:	4601      	mov	r1, r0
 800ad96:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	0a1b      	lsrs	r3, r3, #8
 800ad9c:	f003 030f 	and.w	r3, r3, #15
 800ada0:	4a06      	ldr	r2, [pc, #24]	; (800adbc <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800ada2:	5cd3      	ldrb	r3, [r2, r3]
 800ada4:	f003 031f 	and.w	r3, r3, #31
 800ada8:	fa21 f303 	lsr.w	r3, r1, r3
 800adac:	4a04      	ldr	r2, [pc, #16]	; (800adc0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800adae:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 800adb0:	4b03      	ldr	r3, [pc, #12]	; (800adc0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800adb2:	681b      	ldr	r3, [r3, #0]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	58024400 	.word	0x58024400
 800adbc:	080110bc 	.word	0x080110bc
 800adc0:	24000000 	.word	0x24000000

0800adc4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800adcc:	4b26      	ldr	r3, [pc, #152]	; (800ae68 <HAL_RCCEx_CRSConfig+0xa4>)
 800adce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800add2:	4a25      	ldr	r2, [pc, #148]	; (800ae68 <HAL_RCCEx_CRSConfig+0xa4>)
 800add4:	f043 0302 	orr.w	r3, r3, #2
 800add8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800addc:	4b22      	ldr	r3, [pc, #136]	; (800ae68 <HAL_RCCEx_CRSConfig+0xa4>)
 800adde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ade2:	4a21      	ldr	r2, [pc, #132]	; (800ae68 <HAL_RCCEx_CRSConfig+0xa4>)
 800ade4:	f023 0302 	bic.w	r3, r3, #2
 800ade8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800adec:	f7f7 fe88 	bl	8002b00 <HAL_GetREVID>
 800adf0:	4602      	mov	r2, r0
 800adf2:	f241 0303 	movw	r3, #4099	; 0x1003
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d80b      	bhi.n	800ae12 <HAL_RCCEx_CRSConfig+0x4e>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae02:	d106      	bne.n	800ae12 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	e008      	b.n	800ae24 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	041b      	lsls	r3, r3, #16
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800ae3a:	4a0c      	ldr	r2, [pc, #48]	; (800ae6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800ae40:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	021b      	lsls	r3, r3, #8
 800ae4e:	4907      	ldr	r1, [pc, #28]	; (800ae6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ae50:	4313      	orrs	r3, r2
 800ae52:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a04      	ldr	r2, [pc, #16]	; (800ae6c <HAL_RCCEx_CRSConfig+0xa8>)
 800ae5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ae5e:	6013      	str	r3, [r2, #0]
}
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	58024400 	.word	0x58024400
 800ae6c:	40008400 	.word	0x40008400

0800ae70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae7e:	4b53      	ldr	r3, [pc, #332]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800ae80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae82:	f003 0303 	and.w	r3, r3, #3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d101      	bne.n	800ae8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e099      	b.n	800afc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae8e:	4b4f      	ldr	r3, [pc, #316]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a4e      	ldr	r2, [pc, #312]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800ae94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae9a:	f7f7 fe03 	bl	8002aa4 <HAL_GetTick>
 800ae9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aea0:	e008      	b.n	800aeb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aea2:	f7f7 fdff 	bl	8002aa4 <HAL_GetTick>
 800aea6:	4602      	mov	r2, r0
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d901      	bls.n	800aeb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e086      	b.n	800afc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aeb4:	4b45      	ldr	r3, [pc, #276]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1f0      	bne.n	800aea2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aec0:	4b42      	ldr	r3, [pc, #264]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800aec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	031b      	lsls	r3, r3, #12
 800aece:	493f      	ldr	r1, [pc, #252]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800aed0:	4313      	orrs	r3, r2
 800aed2:	628b      	str	r3, [r1, #40]	; 0x28
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	025b      	lsls	r3, r3, #9
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	431a      	orrs	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	041b      	lsls	r3, r3, #16
 800aef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aef6:	431a      	orrs	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	061b      	lsls	r3, r3, #24
 800af00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af04:	4931      	ldr	r1, [pc, #196]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af06:	4313      	orrs	r3, r2
 800af08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af0a:	4b30      	ldr	r3, [pc, #192]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	492d      	ldr	r1, [pc, #180]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af1c:	4b2b      	ldr	r3, [pc, #172]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	f023 0220 	bic.w	r2, r3, #32
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	4928      	ldr	r1, [pc, #160]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af2e:	4b27      	ldr	r3, [pc, #156]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	4a26      	ldr	r2, [pc, #152]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af34:	f023 0310 	bic.w	r3, r3, #16
 800af38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af3a:	4b24      	ldr	r3, [pc, #144]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af3e:	4b24      	ldr	r3, [pc, #144]	; (800afd0 <RCCEx_PLL2_Config+0x160>)
 800af40:	4013      	ands	r3, r2
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	69d2      	ldr	r2, [r2, #28]
 800af46:	00d2      	lsls	r2, r2, #3
 800af48:	4920      	ldr	r1, [pc, #128]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af4a:	4313      	orrs	r3, r2
 800af4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af4e:	4b1f      	ldr	r3, [pc, #124]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af52:	4a1e      	ldr	r2, [pc, #120]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af54:	f043 0310 	orr.w	r3, r3, #16
 800af58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d106      	bne.n	800af6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af60:	4b1a      	ldr	r3, [pc, #104]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	4a19      	ldr	r2, [pc, #100]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af6c:	e00f      	b.n	800af8e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d106      	bne.n	800af82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af74:	4b15      	ldr	r3, [pc, #84]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af78:	4a14      	ldr	r2, [pc, #80]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af80:	e005      	b.n	800af8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af82:	4b12      	ldr	r3, [pc, #72]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af86:	4a11      	ldr	r2, [pc, #68]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a0e      	ldr	r2, [pc, #56]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800af94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af9a:	f7f7 fd83 	bl	8002aa4 <HAL_GetTick>
 800af9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afa0:	e008      	b.n	800afb4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800afa2:	f7f7 fd7f 	bl	8002aa4 <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	2b02      	cmp	r3, #2
 800afae:	d901      	bls.n	800afb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e006      	b.n	800afc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afb4:	4b05      	ldr	r3, [pc, #20]	; (800afcc <RCCEx_PLL2_Config+0x15c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0f0      	beq.n	800afa2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	58024400 	.word	0x58024400
 800afd0:	ffff0007 	.word	0xffff0007

0800afd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afe2:	4b53      	ldr	r3, [pc, #332]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800afe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe6:	f003 0303 	and.w	r3, r3, #3
 800afea:	2b03      	cmp	r3, #3
 800afec:	d101      	bne.n	800aff2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e099      	b.n	800b126 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aff2:	4b4f      	ldr	r3, [pc, #316]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a4e      	ldr	r2, [pc, #312]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800aff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800affc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800affe:	f7f7 fd51 	bl	8002aa4 <HAL_GetTick>
 800b002:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b004:	e008      	b.n	800b018 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b006:	f7f7 fd4d 	bl	8002aa4 <HAL_GetTick>
 800b00a:	4602      	mov	r2, r0
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	2b02      	cmp	r3, #2
 800b012:	d901      	bls.n	800b018 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e086      	b.n	800b126 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b018:	4b45      	ldr	r3, [pc, #276]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1f0      	bne.n	800b006 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b024:	4b42      	ldr	r3, [pc, #264]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b028:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	051b      	lsls	r3, r3, #20
 800b032:	493f      	ldr	r1, [pc, #252]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b034:	4313      	orrs	r3, r2
 800b036:	628b      	str	r3, [r1, #40]	; 0x28
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	3b01      	subs	r3, #1
 800b048:	025b      	lsls	r3, r3, #9
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	431a      	orrs	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	3b01      	subs	r3, #1
 800b054:	041b      	lsls	r3, r3, #16
 800b056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b05a:	431a      	orrs	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	3b01      	subs	r3, #1
 800b062:	061b      	lsls	r3, r3, #24
 800b064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b068:	4931      	ldr	r1, [pc, #196]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b06e:	4b30      	ldr	r3, [pc, #192]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b072:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	695b      	ldr	r3, [r3, #20]
 800b07a:	492d      	ldr	r1, [pc, #180]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b07c:	4313      	orrs	r3, r2
 800b07e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b080:	4b2b      	ldr	r3, [pc, #172]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	4928      	ldr	r1, [pc, #160]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b092:	4b27      	ldr	r3, [pc, #156]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	4a26      	ldr	r2, [pc, #152]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b09e:	4b24      	ldr	r3, [pc, #144]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0a2:	4b24      	ldr	r3, [pc, #144]	; (800b134 <RCCEx_PLL3_Config+0x160>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	69d2      	ldr	r2, [r2, #28]
 800b0aa:	00d2      	lsls	r2, r2, #3
 800b0ac:	4920      	ldr	r1, [pc, #128]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b0b2:	4b1f      	ldr	r3, [pc, #124]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	4a1e      	ldr	r2, [pc, #120]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0c4:	4b1a      	ldr	r3, [pc, #104]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c8:	4a19      	ldr	r2, [pc, #100]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0d0:	e00f      	b.n	800b0f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d106      	bne.n	800b0e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0d8:	4b15      	ldr	r3, [pc, #84]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0dc:	4a14      	ldr	r2, [pc, #80]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0e4:	e005      	b.n	800b0f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0e6:	4b12      	ldr	r3, [pc, #72]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	4a11      	ldr	r2, [pc, #68]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0f2:	4b0f      	ldr	r3, [pc, #60]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a0e      	ldr	r2, [pc, #56]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b0f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0fe:	f7f7 fcd1 	bl	8002aa4 <HAL_GetTick>
 800b102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b104:	e008      	b.n	800b118 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b106:	f7f7 fccd 	bl	8002aa4 <HAL_GetTick>
 800b10a:	4602      	mov	r2, r0
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	2b02      	cmp	r3, #2
 800b112:	d901      	bls.n	800b118 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b114:	2303      	movs	r3, #3
 800b116:	e006      	b.n	800b126 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <RCCEx_PLL3_Config+0x15c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d0f0      	beq.n	800b106 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b124:	7bfb      	ldrb	r3, [r7, #15]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	58024400 	.word	0x58024400
 800b134:	ffff0007 	.word	0xffff0007

0800b138 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b04      	cmp	r3, #4
 800b14a:	d81f      	bhi.n	800b18c <HAL_SAI_InitProtocol+0x54>
 800b14c:	a201      	add	r2, pc, #4	; (adr r2, 800b154 <HAL_SAI_InitProtocol+0x1c>)
 800b14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b152:	bf00      	nop
 800b154:	0800b169 	.word	0x0800b169
 800b158:	0800b169 	.word	0x0800b169
 800b15c:	0800b169 	.word	0x0800b169
 800b160:	0800b17b 	.word	0x0800b17b
 800b164:	0800b17b 	.word	0x0800b17b
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	68b9      	ldr	r1, [r7, #8]
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 fcf2 	bl	800bb58 <SAI_InitI2S>
 800b174:	4603      	mov	r3, r0
 800b176:	75fb      	strb	r3, [r7, #23]
      break;
 800b178:	e00b      	b.n	800b192 <HAL_SAI_InitProtocol+0x5a>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	68b9      	ldr	r1, [r7, #8]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f000 fd9b 	bl	800bcbc <SAI_InitPCM>
 800b186:	4603      	mov	r3, r0
 800b188:	75fb      	strb	r3, [r7, #23]
      break;
 800b18a:	e002      	b.n	800b192 <HAL_SAI_InitProtocol+0x5a>
    default :
      status = HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	75fb      	strb	r3, [r7, #23]
      break;
 800b190:	bf00      	nop
  }

  if (status == HAL_OK)
 800b192:	7dfb      	ldrb	r3, [r7, #23]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d104      	bne.n	800b1a2 <HAL_SAI_InitProtocol+0x6a>
  {
    status = HAL_SAI_Init(hsai);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 f807 	bl	800b1ac <HAL_SAI_Init>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08a      	sub	sp, #40	; 0x28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e268      	b.n	800b690 <HAL_SAI_Init+0x4e4>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b1be:	f7f7 fc9f 	bl	8002b00 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d113      	bne.n	800b1f4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a8b      	ldr	r2, [pc, #556]	; (800b400 <HAL_SAI_Init+0x254>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d004      	beq.n	800b1e0 <HAL_SAI_Init+0x34>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a8a      	ldr	r2, [pc, #552]	; (800b404 <HAL_SAI_Init+0x258>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d107      	bne.n	800b1f0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d103      	bne.n	800b1f0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e24d      	b.n	800b690 <HAL_SAI_Init+0x4e4>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a81      	ldr	r2, [pc, #516]	; (800b400 <HAL_SAI_Init+0x254>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d004      	beq.n	800b208 <HAL_SAI_Init+0x5c>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a81      	ldr	r2, [pc, #516]	; (800b408 <HAL_SAI_Init+0x25c>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d102      	bne.n	800b20e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800b208:	4b80      	ldr	r3, [pc, #512]	; (800b40c <HAL_SAI_Init+0x260>)
 800b20a:	61bb      	str	r3, [r7, #24]
 800b20c:	e028      	b.n	800b260 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a7f      	ldr	r2, [pc, #508]	; (800b410 <HAL_SAI_Init+0x264>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d004      	beq.n	800b222 <HAL_SAI_Init+0x76>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a7d      	ldr	r2, [pc, #500]	; (800b414 <HAL_SAI_Init+0x268>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d102      	bne.n	800b228 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800b222:	4b7d      	ldr	r3, [pc, #500]	; (800b418 <HAL_SAI_Init+0x26c>)
 800b224:	61bb      	str	r3, [r7, #24]
 800b226:	e01b      	b.n	800b260 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a7b      	ldr	r2, [pc, #492]	; (800b41c <HAL_SAI_Init+0x270>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d004      	beq.n	800b23c <HAL_SAI_Init+0x90>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a7a      	ldr	r2, [pc, #488]	; (800b420 <HAL_SAI_Init+0x274>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d102      	bne.n	800b242 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800b23c:	4b79      	ldr	r3, [pc, #484]	; (800b424 <HAL_SAI_Init+0x278>)
 800b23e:	61bb      	str	r3, [r7, #24]
 800b240:	e00e      	b.n	800b260 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a6f      	ldr	r2, [pc, #444]	; (800b404 <HAL_SAI_Init+0x258>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d004      	beq.n	800b256 <HAL_SAI_Init+0xaa>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a75      	ldr	r2, [pc, #468]	; (800b428 <HAL_SAI_Init+0x27c>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d102      	bne.n	800b25c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800b256:	4b75      	ldr	r3, [pc, #468]	; (800b42c <HAL_SAI_Init+0x280>)
 800b258:	61bb      	str	r3, [r7, #24]
 800b25a:	e001      	b.n	800b260 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e217      	b.n	800b690 <HAL_SAI_Init+0x4e4>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b266:	b2db      	uxtb	r3, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d106      	bne.n	800b27a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7f6 ffd1 	bl	800221c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fda0 	bl	800bdc0 <SAI_Disable>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e202      	b.n	800b690 <HAL_SAI_Init+0x4e4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2202      	movs	r2, #2
 800b28e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d007      	beq.n	800b2aa <HAL_SAI_Init+0xfe>
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d302      	bcc.n	800b2a4 <HAL_SAI_Init+0xf8>
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d006      	beq.n	800b2b0 <HAL_SAI_Init+0x104>
 800b2a2:	e008      	b.n	800b2b6 <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b2a8:	e008      	b.n	800b2bc <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b2aa:	2310      	movs	r3, #16
 800b2ac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b2ae:	e005      	b.n	800b2bc <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b2b0:	2320      	movs	r3, #32
 800b2b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b2b4:	e002      	b.n	800b2bc <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b2ba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	2b05      	cmp	r3, #5
 800b2c2:	d832      	bhi.n	800b32a <HAL_SAI_Init+0x17e>
 800b2c4:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <HAL_SAI_Init+0x120>)
 800b2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ca:	bf00      	nop
 800b2cc:	0800b2e5 	.word	0x0800b2e5
 800b2d0:	0800b2eb 	.word	0x0800b2eb
 800b2d4:	0800b2f3 	.word	0x0800b2f3
 800b2d8:	0800b2fb 	.word	0x0800b2fb
 800b2dc:	0800b30b 	.word	0x0800b30b
 800b2e0:	0800b31b 	.word	0x0800b31b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61fb      	str	r3, [r7, #28]
      break;
 800b2e8:	e022      	b.n	800b330 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ee:	61fb      	str	r3, [r7, #28]
      break;
 800b2f0:	e01e      	b.n	800b330 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b2f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2f6:	61fb      	str	r3, [r7, #28]
      break;
 800b2f8:	e01a      	b.n	800b330 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b2fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	f043 0301 	orr.w	r3, r3, #1
 800b306:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b308:	e012      	b.n	800b330 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b30a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b30e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	f043 0302 	orr.w	r3, r3, #2
 800b316:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b318:	e00a      	b.n	800b330 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b31a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b31e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	f043 0303 	orr.w	r3, r3, #3
 800b326:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b328:	e002      	b.n	800b330 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	61fb      	str	r3, [r7, #28]
      break;
 800b32e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b334:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f000 80a1 	beq.w	800b482 <HAL_SAI_Init+0x2d6>
  {
    uint32_t freq = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a2d      	ldr	r2, [pc, #180]	; (800b400 <HAL_SAI_Init+0x254>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d004      	beq.n	800b358 <HAL_SAI_Init+0x1ac>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a2d      	ldr	r2, [pc, #180]	; (800b408 <HAL_SAI_Init+0x25c>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d104      	bne.n	800b362 <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b358:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b35c:	f7fe fea4 	bl	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b360:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a2a      	ldr	r2, [pc, #168]	; (800b410 <HAL_SAI_Init+0x264>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d004      	beq.n	800b376 <HAL_SAI_Init+0x1ca>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a28      	ldr	r2, [pc, #160]	; (800b414 <HAL_SAI_Init+0x268>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d104      	bne.n	800b380 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b376:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b37a:	f7fe fe95 	bl	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b37e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a25      	ldr	r2, [pc, #148]	; (800b41c <HAL_SAI_Init+0x270>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d004      	beq.n	800b394 <HAL_SAI_Init+0x1e8>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a24      	ldr	r2, [pc, #144]	; (800b420 <HAL_SAI_Init+0x274>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d104      	bne.n	800b39e <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800b394:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b398:	f7fe fe86 	bl	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b39c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a18      	ldr	r2, [pc, #96]	; (800b404 <HAL_SAI_Init+0x258>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d104      	bne.n	800b3b2 <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b3a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b3ac:	f7fe fe7c 	bl	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3b0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a1c      	ldr	r2, [pc, #112]	; (800b428 <HAL_SAI_Init+0x27c>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d104      	bne.n	800b3c6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b3bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b3c0:	f7fe fe72 	bl	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3c4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b3ce:	d10f      	bne.n	800b3f0 <HAL_SAI_Init+0x244>
    {
      /* NODIV = 1 */
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	005b      	lsls	r3, r3, #1
 800b3da:	4619      	mov	r1, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b3e4:	fb02 f303 	mul.w	r3, r2, r3
 800b3e8:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3ec:	613b      	str	r3, [r7, #16]
 800b3ee:	e030      	b.n	800b452 <HAL_SAI_Init+0x2a6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3f8:	d11a      	bne.n	800b430 <HAL_SAI_Init+0x284>
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	e019      	b.n	800b432 <HAL_SAI_Init+0x286>
 800b3fe:	bf00      	nop
 800b400:	40015804 	.word	0x40015804
 800b404:	58005404 	.word	0x58005404
 800b408:	40015824 	.word	0x40015824
 800b40c:	40015800 	.word	0x40015800
 800b410:	40015c04 	.word	0x40015c04
 800b414:	40015c24 	.word	0x40015c24
 800b418:	40015c00 	.word	0x40015c00
 800b41c:	40016004 	.word	0x40016004
 800b420:	40016024 	.word	0x40016024
 800b424:	40016000 	.word	0x40016000
 800b428:	58005424 	.word	0x58005424
 800b42c:	58005400 	.word	0x58005400
 800b430:	2301      	movs	r3, #1
 800b432:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b434:	697a      	ldr	r2, [r7, #20]
 800b436:	4613      	mov	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4413      	add	r3, r2
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	4619      	mov	r1, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	fb02 f303 	mul.w	r3, r2, r3
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b450:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	4a90      	ldr	r2, [pc, #576]	; (800b698 <HAL_SAI_Init+0x4ec>)
 800b456:	fba2 2303 	umull	r2, r3, r2, r3
 800b45a:	08da      	lsrs	r2, r3, #3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b460:	6939      	ldr	r1, [r7, #16]
 800b462:	4b8d      	ldr	r3, [pc, #564]	; (800b698 <HAL_SAI_Init+0x4ec>)
 800b464:	fba3 2301 	umull	r2, r3, r3, r1
 800b468:	08da      	lsrs	r2, r3, #3
 800b46a:	4613      	mov	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	1aca      	subs	r2, r1, r3
 800b474:	2a08      	cmp	r2, #8
 800b476:	d904      	bls.n	800b482 <HAL_SAI_Init+0x2d6>
    {
      hsai->Init.Mckdiv += 1U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <HAL_SAI_Init+0x2e6>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	2b02      	cmp	r3, #2
 800b490:	d109      	bne.n	800b4a6 <HAL_SAI_Init+0x2fa>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_SAI_Init+0x2f2>
 800b49a:	2300      	movs	r3, #0
 800b49c:	e001      	b.n	800b4a2 <HAL_SAI_Init+0x2f6>
 800b49e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4a2:	623b      	str	r3, [r7, #32]
 800b4a4:	e008      	b.n	800b4b8 <HAL_SAI_Init+0x30c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d102      	bne.n	800b4b4 <HAL_SAI_Init+0x308>
 800b4ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4b2:	e000      	b.n	800b4b6 <HAL_SAI_Init+0x30a>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b4b8:	f7f7 fb22 	bl	8002b00 <HAL_GetREVID>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c2:	d331      	bcc.n	800b528 <HAL_SAI_Init+0x37c>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6819      	ldr	r1, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	4b73      	ldr	r3, [pc, #460]	; (800b69c <HAL_SAI_Init+0x4f0>)
 800b4d0:	400b      	ands	r3, r1
 800b4d2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6819      	ldr	r1, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4e2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b4e8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b4fc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b508:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	051b      	lsls	r3, r3, #20
 800b510:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b516:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	430a      	orrs	r2, r1
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	e02d      	b.n	800b584 <HAL_SAI_Init+0x3d8>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6819      	ldr	r1, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	4b5b      	ldr	r3, [pc, #364]	; (800b6a0 <HAL_SAI_Init+0x4f4>)
 800b534:	400b      	ands	r3, r1
 800b536:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6819      	ldr	r1, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b546:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b54c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b552:	431a      	orrs	r2, r3
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b560:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b56c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b572:	051b      	lsls	r3, r3, #20
 800b574:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b57a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	430a      	orrs	r2, r1
 800b582:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6859      	ldr	r1, [r3, #4]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	4b45      	ldr	r3, [pc, #276]	; (800b6a4 <HAL_SAI_Init+0x4f8>)
 800b590:	400b      	ands	r3, r1
 800b592:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6859      	ldr	r1, [r3, #4]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69da      	ldr	r2, [r3, #28]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6899      	ldr	r1, [r3, #8]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	4b3a      	ldr	r3, [pc, #232]	; (800b6a8 <HAL_SAI_Init+0x4fc>)
 800b5be:	400b      	ands	r3, r1
 800b5c0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6899      	ldr	r1, [r3, #8]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5cc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b5d2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800b5d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800b5de:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b5e8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68d9      	ldr	r1, [r3, #12]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b600:	400b      	ands	r3, r1
 800b602:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68d9      	ldr	r1, [r3, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b612:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b618:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b61a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b620:	3b01      	subs	r3, #1
 800b622:	021b      	lsls	r3, r3, #8
 800b624:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a1e      	ldr	r2, [pc, #120]	; (800b6ac <HAL_SAI_Init+0x500>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d004      	beq.n	800b642 <HAL_SAI_Init+0x496>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a1c      	ldr	r2, [pc, #112]	; (800b6b0 <HAL_SAI_Init+0x504>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d119      	bne.n	800b676 <HAL_SAI_Init+0x4ca>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b646:	f023 0201 	bic.w	r2, r3, #1
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b654:	2b01      	cmp	r3, #1
 800b656:	d10e      	bne.n	800b676 <HAL_SAI_Init+0x4ca>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b660:	3b01      	subs	r3, #1
 800b662:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b664:	431a      	orrs	r2, r3
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b66e:	f043 0201 	orr.w	r2, r3, #1
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3728      	adds	r7, #40	; 0x28
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	cccccccd 	.word	0xcccccccd
 800b69c:	f005c010 	.word	0xf005c010
 800b6a0:	f805c010 	.word	0xf805c010
 800b6a4:	ffff1ff0 	.word	0xffff1ff0
 800b6a8:	fff88000 	.word	0xfff88000
 800b6ac:	40015804 	.word	0x40015804
 800b6b0:	58005404 	.word	0x58005404

0800b6b4 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d101      	bne.n	800b6ce <HAL_SAI_Abort+0x1a>
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	e07d      	b.n	800b7ca <HAL_SAI_Abort+0x116>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6e4:	d14f      	bne.n	800b786 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b6f4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	2b12      	cmp	r3, #18
 800b700:	d11d      	bne.n	800b73e <HAL_SAI_Abort+0x8a>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d018      	beq.n	800b73e <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b712:	4618      	mov	r0, r3
 800b714:	f7f8 fe46 	bl	80043a4 <HAL_DMA_Abort>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00f      	beq.n	800b73e <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b726:	2b80      	cmp	r3, #128	; 0x80
 800b728:	d009      	beq.n	800b73e <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b734:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b22      	cmp	r3, #34	; 0x22
 800b748:	d11d      	bne.n	800b786 <HAL_SAI_Abort+0xd2>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b750:	2b00      	cmp	r3, #0
 800b752:	d018      	beq.n	800b786 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7f8 fe22 	bl	80043a4 <HAL_DMA_Abort>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00f      	beq.n	800b786 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76e:	2b80      	cmp	r3, #128	; 0x80
 800b770:	d009      	beq.n	800b786 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b77c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2200      	movs	r2, #0
 800b78c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b796:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fb11 	bl	800bdc0 <SAI_Disable>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f042 0208 	orr.w	r2, r2, #8
 800b7b6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
	...

0800b7d4 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 81a7 	beq.w	800bb38 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occured ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f003 0308 	and.w	r3, r3, #8
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00a      	beq.n	800b822 <HAL_SAI_IRQHandler+0x4e>
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f003 0308 	and.w	r3, r3, #8
 800b812:	2b00      	cmp	r3, #0
 800b814:	d005      	beq.n	800b822 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	4798      	blx	r3
 800b820:	e18a      	b.n	800bb38 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d01e      	beq.n	800b86a <HAL_SAI_IRQHandler+0x96>
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	d019      	beq.n	800b86a <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2201      	movs	r2, #1
 800b83c:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b22      	cmp	r3, #34	; 0x22
 800b848:	d101      	bne.n	800b84e <HAL_SAI_IRQHandler+0x7a>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e000      	b.n	800b850 <HAL_SAI_IRQHandler+0x7c>
 800b84e:	2302      	movs	r3, #2
 800b850:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	431a      	orrs	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f96e 	bl	800bb44 <HAL_SAI_ErrorCallback>
 800b868:	e166      	b.n	800bb38 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f003 0302 	and.w	r3, r3, #2
 800b870:	2b00      	cmp	r3, #0
 800b872:	d013      	beq.n	800b89c <HAL_SAI_IRQHandler+0xc8>
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00e      	beq.n	800b89c <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2202      	movs	r2, #2
 800b884:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8153 	beq.w	800bb38 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b898:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800b89a:	e14d      	b.n	800bb38 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	f003 0320 	and.w	r3, r3, #32
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d05b      	beq.n	800b95e <HAL_SAI_IRQHandler+0x18a>
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f003 0320 	and.w	r3, r3, #32
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d056      	beq.n	800b95e <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2220      	movs	r2, #32
 800b8b6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8be:	f043 0204 	orr.w	r2, r3, #4
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d03e      	beq.n	800b950 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d018      	beq.n	800b90e <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8e2:	4a97      	ldr	r2, [pc, #604]	; (800bb40 <HAL_SAI_IRQHandler+0x36c>)
 800b8e4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7f9 f877 	bl	80049e0 <HAL_DMA_Abort_IT>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00a      	beq.n	800b90e <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f91b 	bl	800bb44 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 810a 	beq.w	800bb2e <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b920:	4a87      	ldr	r2, [pc, #540]	; (800bb40 <HAL_SAI_IRQHandler+0x36c>)
 800b922:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7f9 f858 	bl	80049e0 <HAL_DMA_Abort_IT>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	f000 80fb 	beq.w	800bb2e <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b93e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f8fb 	bl	800bb44 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b94e:	e0ee      	b.n	800bb2e <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff feaf 	bl	800b6b4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f8f4 	bl	800bb44 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b95c:	e0e7      	b.n	800bb2e <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d05b      	beq.n	800ba20 <HAL_SAI_IRQHandler+0x24c>
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d056      	beq.n	800ba20 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2240      	movs	r2, #64	; 0x40
 800b978:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b980:	f043 0208 	orr.w	r2, r3, #8
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d03e      	beq.n	800ba12 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d018      	beq.n	800b9d0 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9a4:	4a66      	ldr	r2, [pc, #408]	; (800bb40 <HAL_SAI_IRQHandler+0x36c>)
 800b9a6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7f9 f816 	bl	80049e0 <HAL_DMA_Abort_IT>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00a      	beq.n	800b9d0 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f8ba 	bl	800bb44 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f000 80ab 	beq.w	800bb32 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9e2:	4a57      	ldr	r2, [pc, #348]	; (800bb40 <HAL_SAI_IRQHandler+0x36c>)
 800b9e4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7f8 fff7 	bl	80049e0 <HAL_DMA_Abort_IT>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 809c 	beq.w	800bb32 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f89a 	bl	800bb44 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ba10:	e08f      	b.n	800bb32 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fe4e 	bl	800b6b4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f893 	bl	800bb44 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ba1e:	e088      	b.n	800bb32 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f003 0304 	and.w	r3, r3, #4
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d067      	beq.n	800bafa <HAL_SAI_IRQHandler+0x326>
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d062      	beq.n	800bafa <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2204      	movs	r2, #4
 800ba3a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba42:	f043 0220 	orr.w	r2, r3, #32
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d03c      	beq.n	800bad0 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d018      	beq.n	800ba92 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba66:	4a36      	ldr	r2, [pc, #216]	; (800bb40 <HAL_SAI_IRQHandler+0x36c>)
 800ba68:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7f8 ffb5 	bl	80049e0 <HAL_DMA_Abort_IT>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f859 	bl	800bb44 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d04c      	beq.n	800bb36 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa2:	4a27      	ldr	r2, [pc, #156]	; (800bb40 <HAL_SAI_IRQHandler+0x36c>)
 800baa4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baac:	4618      	mov	r0, r3
 800baae:	f7f8 ff97 	bl	80049e0 <HAL_DMA_Abort_IT>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d03e      	beq.n	800bb36 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800babe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f83b 	bl	800bb44 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800bace:	e032      	b.n	800bb36 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2200      	movs	r2, #0
 800bad6:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bae0:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f826 	bl	800bb44 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800baf8:	e01d      	b.n	800bb36 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f003 0310 	and.w	r3, r3, #16
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d019      	beq.n	800bb38 <HAL_SAI_IRQHandler+0x364>
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f003 0310 	and.w	r3, r3, #16
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d014      	beq.n	800bb38 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2210      	movs	r2, #16
 800bb14:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb1c:	f043 0210 	orr.w	r2, r3, #16
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f80c 	bl	800bb44 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800bb2c:	e004      	b.n	800bb38 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800bb2e:	bf00      	nop
 800bb30:	e002      	b.n	800bb38 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800bb36:	bf00      	nop
}
 800bb38:	bf00      	nop
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	0800be29 	.word	0x0800be29

0800bb44 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <SAI_InitI2S+0x2e>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d103      	bne.n	800bb8e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	651a      	str	r2, [r3, #80]	; 0x50
 800bb8c:	e002      	b.n	800bb94 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2201      	movs	r2, #1
 800bb92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bba2:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e077      	b.n	800bcae <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d107      	bne.n	800bbd4 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bbd0:	665a      	str	r2, [r3, #100]	; 0x64
 800bbd2:	e006      	b.n	800bbe2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bbda:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d84f      	bhi.n	800bc88 <SAI_InitI2S+0x130>
 800bbe8:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <SAI_InitI2S+0x98>)
 800bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbee:	bf00      	nop
 800bbf0:	0800bc01 	.word	0x0800bc01
 800bbf4:	0800bc23 	.word	0x0800bc23
 800bbf8:	0800bc45 	.word	0x0800bc45
 800bbfc:	0800bc67 	.word	0x0800bc67
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2280      	movs	r2, #128	; 0x80
 800bc04:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	085b      	lsrs	r3, r3, #1
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	085b      	lsrs	r3, r3, #1
 800bc14:	011a      	lsls	r2, r3, #4
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2240      	movs	r2, #64	; 0x40
 800bc1e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bc20:	e035      	b.n	800bc8e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2280      	movs	r2, #128	; 0x80
 800bc26:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	085b      	lsrs	r3, r3, #1
 800bc2c:	019a      	lsls	r2, r3, #6
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	085b      	lsrs	r3, r3, #1
 800bc36:	015a      	lsls	r2, r3, #5
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2280      	movs	r2, #128	; 0x80
 800bc40:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bc42:	e024      	b.n	800bc8e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	22c0      	movs	r2, #192	; 0xc0
 800bc48:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	085b      	lsrs	r3, r3, #1
 800bc4e:	019a      	lsls	r2, r3, #6
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	085b      	lsrs	r3, r3, #1
 800bc58:	015a      	lsls	r2, r3, #5
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2280      	movs	r2, #128	; 0x80
 800bc62:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bc64:	e013      	b.n	800bc8e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	22e0      	movs	r2, #224	; 0xe0
 800bc6a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	085b      	lsrs	r3, r3, #1
 800bc70:	019a      	lsls	r2, r3, #6
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	085b      	lsrs	r3, r3, #1
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2280      	movs	r2, #128	; 0x80
 800bc84:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bc86:	e002      	b.n	800bc8e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc8c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d10b      	bne.n	800bcac <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d102      	bne.n	800bca0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2210      	movs	r2, #16
 800bc9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d102      	bne.n	800bcac <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2208      	movs	r2, #8
 800bcaa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	371c      	adds	r7, #28
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop

0800bcbc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
 800bcc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d003      	beq.n	800bcea <SAI_InitPCM+0x2e>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d103      	bne.n	800bcf2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2201      	movs	r2, #1
 800bcee:	651a      	str	r2, [r3, #80]	; 0x50
 800bcf0:	e002      	b.n	800bcf8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bd04:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bd0c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd20:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2b04      	cmp	r3, #4
 800bd26:	d103      	bne.n	800bd30 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	659a      	str	r2, [r3, #88]	; 0x58
 800bd2e:	e002      	b.n	800bd36 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	220d      	movs	r2, #13
 800bd34:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d837      	bhi.n	800bdac <SAI_InitPCM+0xf0>
 800bd3c:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <SAI_InitPCM+0x88>)
 800bd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd42:	bf00      	nop
 800bd44:	0800bd55 	.word	0x0800bd55
 800bd48:	0800bd6b 	.word	0x0800bd6b
 800bd4c:	0800bd81 	.word	0x0800bd81
 800bd50:	0800bd97 	.word	0x0800bd97
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2280      	movs	r2, #128	; 0x80
 800bd58:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	011a      	lsls	r2, r3, #4
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2240      	movs	r2, #64	; 0x40
 800bd66:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bd68:	e023      	b.n	800bdb2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2280      	movs	r2, #128	; 0x80
 800bd6e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	015a      	lsls	r2, r3, #5
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2280      	movs	r2, #128	; 0x80
 800bd7c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bd7e:	e018      	b.n	800bdb2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	22c0      	movs	r2, #192	; 0xc0
 800bd84:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2280      	movs	r2, #128	; 0x80
 800bd92:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bd94:	e00d      	b.n	800bdb2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	22e0      	movs	r2, #224	; 0xe0
 800bd9a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2280      	movs	r2, #128	; 0x80
 800bda8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bdaa:	e002      	b.n	800bdb2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	75fb      	strb	r3, [r7, #23]
      break;
 800bdb0:	bf00      	nop
  }

  return status;
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	371c      	adds	r7, #28
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bdc0:	b490      	push	{r4, r7}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800bdc8:	4b15      	ldr	r3, [pc, #84]	; (800be20 <SAI_Disable+0x60>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a15      	ldr	r2, [pc, #84]	; (800be24 <SAI_Disable+0x64>)
 800bdce:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd2:	0b1b      	lsrs	r3, r3, #12
 800bdd4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bde8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800bdea:	2c00      	cmp	r4, #0
 800bdec:	d10a      	bne.n	800be04 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	73fb      	strb	r3, [r7, #15]
      break;
 800be02:	e007      	b.n	800be14 <SAI_Disable+0x54>
    }
    count--;
 800be04:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1ea      	bne.n	800bdea <SAI_Disable+0x2a>

  return status;
 800be14:	7bfb      	ldrb	r3, [r7, #15]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bc90      	pop	{r4, r7}
 800be1e:	4770      	bx	lr
 800be20:	24000000 	.word	0x24000000
 800be24:	95cbec1b 	.word	0x95cbec1b

0800be28 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be34:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800be44:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2200      	movs	r2, #0
 800be4c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be56:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be5e:	2b20      	cmp	r3, #32
 800be60:	d00a      	beq.n	800be78 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f7ff ffac 	bl	800bdc0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f042 0208 	orr.w	r2, r2, #8
 800be76:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f7ff fe5b 	bl	800bb44 <HAL_SAI_ErrorCallback>
#endif
}
 800be8e:	bf00      	nop
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b08a      	sub	sp, #40	; 0x28
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e07c      	b.n	800bfa2 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10c      	bne.n	800bece <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d102      	bne.n	800bec8 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2202      	movs	r2, #2
 800bec6:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7f5 ffad 	bl	8001e28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2203      	movs	r2, #3
 800bed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f868 	bl	800bfac <HAL_SD_InitCard>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e05d      	b.n	800bfa2 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bee6:	f107 0308 	add.w	r3, r7, #8
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fa95 	bl	800c41c <HAL_SD_GetCardStatus>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e052      	b.n	800bfa2 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800befc:	7e3b      	ldrb	r3, [r7, #24]
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bf02:	7e7b      	ldrb	r3, [r7, #25]
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d10a      	bne.n	800bf26 <HAL_SD_Init+0x90>
 800bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d102      	bne.n	800bf1c <HAL_SD_Init+0x86>
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d004      	beq.n	800bf26 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf22:	65da      	str	r2, [r3, #92]	; 0x5c
 800bf24:	e00b      	b.n	800bf3e <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d104      	bne.n	800bf38 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf34:	65da      	str	r2, [r3, #92]	; 0x5c
 800bf36:	e002      	b.n	800bf3e <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	4619      	mov	r1, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fb01 	bl	800c54c <HAL_SD_ConfigWideBusOperation>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e026      	b.n	800bfa2 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bf54:	f7f6 fda6 	bl	8002aa4 <HAL_GetTick>
 800bf58:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bf5a:	e011      	b.n	800bf80 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800bf5c:	f7f6 fda2 	bl	8002aa4 <HAL_GetTick>
 800bf60:	4602      	mov	r2, r0
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf6a:	d109      	bne.n	800bf80 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	e010      	b.n	800bfa2 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fb73 	bl	800c66c <HAL_SD_GetCardState>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	d1e7      	bne.n	800bf5c <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3728      	adds	r7, #40	; 0x28
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bfac:	b5b0      	push	{r4, r5, r7, lr}
 800bfae:	b090      	sub	sp, #64	; 0x40
 800bfb0:	af04      	add	r7, sp, #16
 800bfb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800bfc4:	23fa      	movs	r3, #250	; 0xfa
 800bfc6:	61fb      	str	r3, [r7, #28]

#if (USE_SD_TRANSCEIVER != 0U) || defined (USE_SD_DIRPOL)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d107      	bne.n	800bfe0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f042 0210 	orr.w	r2, r2, #16
 800bfde:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681d      	ldr	r5, [r3, #0]
 800bfe4:	466c      	mov	r4, sp
 800bfe6:	f107 0318 	add.w	r3, r7, #24
 800bfea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bff2:	f107 030c 	add.w	r3, r7, #12
 800bff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bff8:	4628      	mov	r0, r5
 800bffa:	f004 fa4b 	bl	8010494 <SDMMC_Init>
 800bffe:	4603      	mov	r3, r0
 800c000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 800c004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	e04d      	b.n	800c0ac <HAL_SD_InitCard+0x100>
  }

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4618      	mov	r0, r3
 800c016:	f004 fa74 	bl	8010502 <SDMMC_PowerState_ON>
 800c01a:	4603      	mov	r3, r0
 800c01c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 800c020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e03f      	b.n	800c0ac <HAL_SD_InitCard+0x100>
  }

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800c02c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c030:	f7fe f83a 	bl	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c034:	4602      	mov	r2, r0
 800c036:	4b1f      	ldr	r3, [pc, #124]	; (800c0b4 <HAL_SD_InitCard+0x108>)
 800c038:	fba3 2302 	umull	r2, r3, r3, r2
 800c03c:	095b      	lsrs	r3, r3, #5
 800c03e:	62bb      	str	r3, [r7, #40]	; 0x28

  if(sdmmc_clk != 0U)
 800c040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c042:	2b00      	cmp	r3, #0
 800c044:	d008      	beq.n	800c058 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800c046:	4a1c      	ldr	r2, [pc, #112]	; (800c0b8 <HAL_SD_InitCard+0x10c>)
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c04e:	3301      	adds	r3, #1
 800c050:	4618      	mov	r0, r3
 800c052:	f7f6 fd33 	bl	8002abc <HAL_Delay>
 800c056:	e002      	b.n	800c05e <HAL_SD_InitCard+0xb2>
  }
  else
  {
    HAL_Delay(2U);
 800c058:	2002      	movs	r0, #2
 800c05a:	f7f6 fd2f 	bl	8002abc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fbe2 	bl	800c828 <SD_PowerON>
 800c064:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00b      	beq.n	800c084 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	431a      	orrs	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e013      	b.n	800c0ac <HAL_SD_InitCard+0x100>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fb11 	bl	800c6ac <SD_InitCard>
 800c08a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00b      	beq.n	800c0aa <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	431a      	orrs	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e000      	b.n	800c0ac <HAL_SD_InitCard+0x100>
  }

  return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3730      	adds	r7, #48	; 0x30
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bdb0      	pop	{r4, r5, r7, pc}
 800c0b4:	10624dd3 	.word	0x10624dd3
 800c0b8:	00012110 	.word	0x00012110

0800c0bc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800c0c6:	bf00      	nop
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
	...

0800c0d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0e2:	0f9b      	lsrs	r3, r3, #30
 800c0e4:	b2da      	uxtb	r2, r3
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0ee:	0e9b      	lsrs	r3, r3, #26
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	f003 030f 	and.w	r3, r3, #15
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c100:	0e1b      	lsrs	r3, r3, #24
 800c102:	b2db      	uxtb	r3, r3
 800c104:	f003 0303 	and.w	r3, r3, #3
 800c108:	b2da      	uxtb	r2, r3
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c112:	0c1b      	lsrs	r3, r3, #16
 800c114:	b2da      	uxtb	r2, r3
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c11e:	0a1b      	lsrs	r3, r3, #8
 800c120:	b2da      	uxtb	r2, r3
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c134:	0d1b      	lsrs	r3, r3, #20
 800c136:	b29a      	uxth	r2, r3
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c140:	0c1b      	lsrs	r3, r3, #16
 800c142:	b2db      	uxtb	r3, r3
 800c144:	f003 030f 	and.w	r3, r3, #15
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c152:	0bdb      	lsrs	r3, r3, #15
 800c154:	b2db      	uxtb	r3, r3
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c164:	0b9b      	lsrs	r3, r3, #14
 800c166:	b2db      	uxtb	r3, r3
 800c168:	f003 0301 	and.w	r3, r3, #1
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c176:	0b5b      	lsrs	r3, r3, #13
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	f003 0301 	and.w	r3, r3, #1
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c188:	0b1b      	lsrs	r3, r3, #12
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	b2da      	uxtb	r2, r3
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2200      	movs	r2, #0
 800c19a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d163      	bne.n	800c26c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1a8:	009a      	lsls	r2, r3, #2
 800c1aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c1b4:	0f92      	lsrs	r2, r2, #30
 800c1b6:	431a      	orrs	r2, r3
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1c0:	0edb      	lsrs	r3, r3, #27
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	f003 0307 	and.w	r3, r3, #7
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1d2:	0e1b      	lsrs	r3, r3, #24
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1e4:	0d5b      	lsrs	r3, r3, #21
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	f003 0307 	and.w	r3, r3, #7
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1f6:	0c9b      	lsrs	r3, r3, #18
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	f003 0307 	and.w	r3, r3, #7
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c208:	0bdb      	lsrs	r3, r3, #15
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	f003 0307 	and.w	r3, r3, #7
 800c210:	b2da      	uxtb	r2, r3
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	7e1b      	ldrb	r3, [r3, #24]
 800c224:	b2db      	uxtb	r3, r3
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	3302      	adds	r3, #2
 800c22c:	2201      	movs	r2, #1
 800c22e:	fa02 f303 	lsl.w	r3, r2, r3
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c236:	fb02 f203 	mul.w	r2, r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	7a1b      	ldrb	r3, [r3, #8]
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	2201      	movs	r2, #1
 800c24a:	409a      	lsls	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c258:	0a52      	lsrs	r2, r2, #9
 800c25a:	fb02 f203 	mul.w	r2, r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c268:	659a      	str	r2, [r3, #88]	; 0x58
 800c26a:	e031      	b.n	800c2d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c270:	2b01      	cmp	r3, #1
 800c272:	d11d      	bne.n	800c2b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c278:	041b      	lsls	r3, r3, #16
 800c27a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c282:	0c1b      	lsrs	r3, r3, #16
 800c284:	431a      	orrs	r2, r3
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	3301      	adds	r3, #1
 800c290:	029a      	lsls	r2, r3, #10
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2a4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	659a      	str	r2, [r3, #88]	; 0x58
 800c2ae:	e00f      	b.n	800c2d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a58      	ldr	r2, [pc, #352]	; (800c418 <HAL_SD_GetCardCSD+0x344>)
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e09d      	b.n	800c40c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2d4:	0b9b      	lsrs	r3, r3, #14
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2e6:	09db      	lsrs	r3, r3, #7
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c308:	0fdb      	lsrs	r3, r3, #31
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c314:	0f5b      	lsrs	r3, r3, #29
 800c316:	b2db      	uxtb	r3, r3
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c326:	0e9b      	lsrs	r3, r3, #26
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	f003 0307 	and.w	r3, r3, #7
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c338:	0d9b      	lsrs	r3, r3, #22
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	f003 030f 	and.w	r3, r3, #15
 800c340:	b2da      	uxtb	r2, r3
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c34a:	0d5b      	lsrs	r3, r3, #21
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	f003 0301 	and.w	r3, r3, #1
 800c352:	b2da      	uxtb	r2, r3
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2200      	movs	r2, #0
 800c35e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c366:	0c1b      	lsrs	r3, r3, #16
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37a:	0bdb      	lsrs	r3, r3, #15
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	f003 0301 	and.w	r3, r3, #1
 800c382:	b2da      	uxtb	r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38e:	0b9b      	lsrs	r3, r3, #14
 800c390:	b2db      	uxtb	r3, r3
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	b2da      	uxtb	r2, r3
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a2:	0b5b      	lsrs	r3, r3, #13
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b6:	0b1b      	lsrs	r3, r3, #12
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ca:	0a9b      	lsrs	r3, r3, #10
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	f003 0303 	and.w	r3, r3, #3
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3de:	0a1b      	lsrs	r3, r3, #8
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	f003 0303 	and.w	r3, r3, #3
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f2:	085b      	lsrs	r3, r3, #1
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	1fe00fff 	.word	0x1fe00fff

0800c41c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b094      	sub	sp, #80	; 0x50
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c426:	f107 030c 	add.w	r3, r7, #12
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fb03 	bl	800ca38 <SD_SendSDStatus>
 800c432:	64f8      	str	r0, [r7, #76]	; 0x4c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00f      	beq.n	800c45a <HAL_SD_GetCardStatus+0x3e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a42      	ldr	r2, [pc, #264]	; (800c548 <HAL_SD_GetCardStatus+0x12c>)
 800c440:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c448:	431a      	orrs	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e071      	b.n	800c53e <HAL_SD_GetCardStatus+0x122>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	099b      	lsrs	r3, r3, #6
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	f003 0303 	and.w	r3, r3, #3
 800c464:	b2da      	uxtb	r2, r3
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	095b      	lsrs	r3, r3, #5
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	b2da      	uxtb	r2, r3
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	0a1b      	lsrs	r3, r3, #8
 800c47e:	b29b      	uxth	r3, r3
 800c480:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c484:	b29a      	uxth	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	0e1b      	lsrs	r3, r3, #24
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	4313      	orrs	r3, r2
 800c48e:	b29a      	uxth	r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	061a      	lsls	r2, r3, #24
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	021b      	lsls	r3, r3, #8
 800c49c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4a0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	0a1b      	lsrs	r3, r3, #8
 800c4a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	0e1b      	lsrs	r3, r3, #24
 800c4b0:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	0a1b      	lsrs	r3, r3, #8
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	0d1b      	lsrs	r3, r3, #20
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	f003 030f 	and.w	r3, r3, #15
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	0c1b      	lsrs	r3, r3, #16
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	0a9b      	lsrs	r3, r3, #10
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	0a1b      	lsrs	r3, r3, #8
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	f003 0303 	and.w	r3, r3, #3
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	091b      	lsrs	r3, r3, #4
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	f003 030f 	and.w	r3, r3, #15
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f003 030f 	and.w	r3, r3, #15
 800c52c:	b2da      	uxtb	r2, r3
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	0e1b      	lsrs	r3, r3, #24
 800c536:	b2da      	uxtb	r2, r3
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	749a      	strb	r2, [r3, #18]
  }

  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3750      	adds	r7, #80	; 0x50
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	1fe00fff 	.word	0x1fe00fff

0800c54c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c54c:	b5b0      	push	{r4, r5, r7, lr}
 800c54e:	b08e      	sub	sp, #56	; 0x38
 800c550:	af04      	add	r7, sp, #16
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2203      	movs	r2, #3
 800c55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c562:	2b03      	cmp	r3, #3
 800c564:	d02e      	beq.n	800c5c4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c56c:	d106      	bne.n	800c57c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	639a      	str	r2, [r3, #56]	; 0x38
 800c57a:	e029      	b.n	800c5d0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c582:	d10a      	bne.n	800c59a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 fb4f 	bl	800cc28 <SD_WideBus_Enable>
 800c58a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	431a      	orrs	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	639a      	str	r2, [r3, #56]	; 0x38
 800c598:	e01a      	b.n	800c5d0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10a      	bne.n	800c5b6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fb8c 	bl	800ccbe <SD_WideBus_Disable>
 800c5a6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ae:	431a      	orrs	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	639a      	str	r2, [r3, #56]	; 0x38
 800c5b4:	e00c      	b.n	800c5d0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	639a      	str	r2, [r3, #56]	; 0x38
 800c5c2:	e005      	b.n	800c5d0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d009      	beq.n	800c5ec <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a22      	ldr	r2, [pc, #136]	; (800c668 <HAL_SD_ConfigWideBusOperation+0x11c>)
 800c5de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e039      	b.n	800c660 <HAL_SD_ConfigWideBusOperation+0x114>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	2b03      	cmp	r3, #3
 800c608:	d903      	bls.n	800c612 <HAL_SD_ConfigWideBusOperation+0xc6>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	695b      	ldr	r3, [r3, #20]
 800c60e:	61fb      	str	r3, [r7, #28]
 800c610:	e012      	b.n	800c638 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c61a:	d103      	bne.n	800c624 <HAL_SD_ConfigWideBusOperation+0xd8>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	695b      	ldr	r3, [r3, #20]
 800c620:	61fb      	str	r3, [r7, #28]
 800c622:	e009      	b.n	800c638 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c62c:	d102      	bne.n	800c634 <HAL_SD_ConfigWideBusOperation+0xe8>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800c62e:	2302      	movs	r3, #2
 800c630:	61fb      	str	r3, [r7, #28]
 800c632:	e001      	b.n	800c638 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800c634:	2304      	movs	r3, #4
 800c636:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681d      	ldr	r5, [r3, #0]
 800c63c:	466c      	mov	r4, sp
 800c63e:	f107 0318 	add.w	r3, r7, #24
 800c642:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c64a:	f107 030c 	add.w	r3, r7, #12
 800c64e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c650:	4628      	mov	r0, r5
 800c652:	f003 ff1f 	bl	8010494 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3728      	adds	r7, #40	; 0x28
 800c664:	46bd      	mov	sp, r7
 800c666:	bdb0      	pop	{r4, r5, r7, pc}
 800c668:	1fe00fff 	.word	0x1fe00fff

0800c66c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c678:	f107 030c 	add.w	r3, r7, #12
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 faaa 	bl	800cbd8 <SD_SendStatus>
 800c684:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d005      	beq.n	800c698 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	431a      	orrs	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	0a5b      	lsrs	r3, r3, #9
 800c69c:	f003 030f 	and.w	r3, r3, #15
 800c6a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c6a2:	693b      	ldr	r3, [r7, #16]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3718      	adds	r7, #24
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c6ac:	b590      	push	{r4, r7, lr}
 800c6ae:	b091      	sub	sp, #68	; 0x44
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f003 ff31 	bl	8010524 <SDMMC_GetPowerState>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d102      	bne.n	800c6ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c6c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c6cc:	e0a8      	b.n	800c820 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d02e      	beq.n	800c734 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f004 f8b3 	bl	8010846 <SDMMC_CmdSendCID>
 800c6e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <SD_InitCard+0x40>
    {
      return errorstate;
 800c6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ea:	e099      	b.n	800c820 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f003 ff5b 	bl	80105ae <SDMMC_GetResponse>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2104      	movs	r1, #4
 800c704:	4618      	mov	r0, r3
 800c706:	f003 ff52 	bl	80105ae <SDMMC_GetResponse>
 800c70a:	4602      	mov	r2, r0
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2108      	movs	r1, #8
 800c716:	4618      	mov	r0, r3
 800c718:	f003 ff49 	bl	80105ae <SDMMC_GetResponse>
 800c71c:	4602      	mov	r2, r0
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	210c      	movs	r1, #12
 800c728:	4618      	mov	r0, r3
 800c72a:	f003 ff40 	bl	80105ae <SDMMC_GetResponse>
 800c72e:	4602      	mov	r2, r0
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c738:	2b03      	cmp	r3, #3
 800c73a:	d00d      	beq.n	800c758 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f107 020e 	add.w	r2, r7, #14
 800c744:	4611      	mov	r1, r2
 800c746:	4618      	mov	r0, r3
 800c748:	f004 f8bc 	bl	80108c4 <SDMMC_CmdSetRelAdd>
 800c74c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d001      	beq.n	800c758 <SD_InitCard+0xac>
    {
      return errorstate;
 800c754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c756:	e063      	b.n	800c820 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75c:	2b03      	cmp	r3, #3
 800c75e:	d036      	beq.n	800c7ce <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c760:	89fb      	ldrh	r3, [r7, #14]
 800c762:	461a      	mov	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c770:	041b      	lsls	r3, r3, #16
 800c772:	4619      	mov	r1, r3
 800c774:	4610      	mov	r0, r2
 800c776:	f004 f885 	bl	8010884 <SDMMC_CmdSendCSD>
 800c77a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <SD_InitCard+0xda>
    {
      return errorstate;
 800c782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c784:	e04c      	b.n	800c820 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2100      	movs	r1, #0
 800c78c:	4618      	mov	r0, r3
 800c78e:	f003 ff0e 	bl	80105ae <SDMMC_GetResponse>
 800c792:	4602      	mov	r2, r0
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2104      	movs	r1, #4
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f003 ff05 	bl	80105ae <SDMMC_GetResponse>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2108      	movs	r1, #8
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f003 fefc 	bl	80105ae <SDMMC_GetResponse>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	210c      	movs	r1, #12
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f003 fef3 	bl	80105ae <SDMMC_GetResponse>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2104      	movs	r1, #4
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f003 feea 	bl	80105ae <SDMMC_GetResponse>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	0d1a      	lsrs	r2, r3, #20
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c7e2:	f107 0310 	add.w	r3, r7, #16
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff fc73 	bl	800c0d4 <HAL_SD_GetCardCSD>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c7f8:	e012      	b.n	800c820 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6819      	ldr	r1, [r3, #0]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c802:	041b      	lsls	r3, r3, #16
 800c804:	f04f 0400 	mov.w	r4, #0
 800c808:	461a      	mov	r2, r3
 800c80a:	4623      	mov	r3, r4
 800c80c:	4608      	mov	r0, r1
 800c80e:	f003 ff30 	bl	8010672 <SDMMC_CmdSelDesel>
 800c812:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <SD_InitCard+0x172>
  {
    return errorstate;
 800c81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c81c:	e000      	b.n	800c820 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3744      	adds	r7, #68	; 0x44
 800c824:	46bd      	mov	sp, r7
 800c826:	bd90      	pop	{r4, r7, pc}

0800c828 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c830:	2300      	movs	r3, #0
 800c832:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	61fb      	str	r3, [r7, #28]
 800c838:	2300      	movs	r3, #0
 800c83a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800c83c:	f7f6 f932 	bl	8002aa4 <HAL_GetTick>
 800c840:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4618      	mov	r0, r3
 800c848:	f003 ff37 	bl	80106ba <SDMMC_CmdGoIdleState>
 800c84c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <SD_PowerON+0x30>
  {
    return errorstate;
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	e0e9      	b.n	800ca2c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f003 ff4a 	bl	80106f6 <SDMMC_CmdOperCond>
 800c862:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00d      	beq.n	800c886 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4618      	mov	r0, r3
 800c876:	f003 ff20 	bl	80106ba <SDMMC_CmdGoIdleState>
 800c87a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d004      	beq.n	800c88c <SD_PowerON+0x64>
    {
      return errorstate;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	e0d2      	b.n	800ca2c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c890:	2b01      	cmp	r3, #1
 800c892:	d137      	bne.n	800c904 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2100      	movs	r1, #0
 800c89a:	4618      	mov	r0, r3
 800c89c:	f003 ff4b 	bl	8010736 <SDMMC_CmdAppCommand>
 800c8a0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d02d      	beq.n	800c904 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c8a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c8ac:	e0be      	b.n	800ca2c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f003 ff3e 	bl	8010736 <SDMMC_CmdAppCommand>
 800c8ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d001      	beq.n	800c8c6 <SD_PowerON+0x9e>
    {
      return errorstate;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	e0b2      	b.n	800ca2c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	495a      	ldr	r1, [pc, #360]	; (800ca34 <SD_PowerON+0x20c>)
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f003 ff55 	bl	801077c <SDMMC_CmdAppOperCommand>
 800c8d2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c8da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c8de:	e0a5      	b.n	800ca2c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f003 fe61 	bl	80105ae <SDMMC_GetResponse>
 800c8ec:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	0fdb      	lsrs	r3, r3, #31
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d101      	bne.n	800c8fa <SD_PowerON+0xd2>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <SD_PowerON+0xd4>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	61bb      	str	r3, [r7, #24]

    count++;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3301      	adds	r3, #1
 800c902:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d802      	bhi.n	800c914 <SD_PowerON+0xec>
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d0cc      	beq.n	800c8ae <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d902      	bls.n	800c924 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c91e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c922:	e083      	b.n	800ca2c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d07d      	beq.n	800ca2a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2201      	movs	r2, #1
 800c932:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d176      	bne.n	800ca2a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c942:	2b00      	cmp	r3, #0
 800c944:	d071      	beq.n	800ca2a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c94c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f042 0208 	orr.w	r2, r2, #8
 800c95c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4618      	mov	r0, r3
 800c964:	f004 f815 	bl	8010992 <SDMMC_CmdVoltageSwitch>
 800c968:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00c      	beq.n	800c98a <SD_PowerON+0x162>
        {
          return errorstate;
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	e05b      	b.n	800ca2c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c974:	f7f6 f896 	bl	8002aa4 <HAL_GetTick>
 800c978:	4602      	mov	r2, r0
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c982:	d102      	bne.n	800c98a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800c984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c988:	e050      	b.n	800ca2c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c998:	d1ec      	bne.n	800c974 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c9a2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9b2:	d002      	beq.n	800c9ba <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800c9b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c9b8:	e038      	b.n	800ca2c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	f7ff fb7e 	bl	800c0bc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f042 0204 	orr.w	r2, r2, #4
 800c9ce:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800c9d0:	e00a      	b.n	800c9e8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c9d2:	f7f6 f867 	bl	8002aa4 <HAL_GetTick>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9e0:	d102      	bne.n	800c9e8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800c9e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9e6:	e021      	b.n	800ca2c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9f6:	d1ec      	bne.n	800c9d2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ca00:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca10:	d102      	bne.n	800ca18 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ca12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca16:	e009      	b.n	800ca2c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2213      	movs	r2, #19
 800ca1e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca28:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3720      	adds	r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	c1100000 	.word	0xc1100000

0800ca38 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08c      	sub	sp, #48	; 0x30
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ca42:	f7f6 f82f 	bl	8002aa4 <HAL_GetTick>
 800ca46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2100      	movs	r1, #0
 800ca52:	4618      	mov	r0, r3
 800ca54:	f003 fdab 	bl	80105ae <SDMMC_GetResponse>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca62:	d102      	bne.n	800ca6a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ca64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca68:	e0b0      	b.n	800cbcc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2140      	movs	r1, #64	; 0x40
 800ca70:	4618      	mov	r0, r3
 800ca72:	f003 fddb 	bl	801062c <SDMMC_CmdBlockLength>
 800ca76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d005      	beq.n	800ca8a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ca86:	6a3b      	ldr	r3, [r7, #32]
 800ca88:	e0a0      	b.n	800cbcc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca92:	041b      	lsls	r3, r3, #16
 800ca94:	4619      	mov	r1, r3
 800ca96:	4610      	mov	r0, r2
 800ca98:	f003 fe4d 	bl	8010736 <SDMMC_CmdAppCommand>
 800ca9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d005      	beq.n	800cab0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800caac:	6a3b      	ldr	r3, [r7, #32]
 800caae:	e08d      	b.n	800cbcc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cab4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cab6:	2340      	movs	r3, #64	; 0x40
 800cab8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800caba:	2360      	movs	r3, #96	; 0x60
 800cabc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cabe:	2302      	movs	r3, #2
 800cac0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cac6:	2301      	movs	r3, #1
 800cac8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f107 0208 	add.w	r2, r7, #8
 800cad2:	4611      	mov	r1, r2
 800cad4:	4618      	mov	r0, r3
 800cad6:	f003 fd7d 	bl	80105d4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4618      	mov	r0, r3
 800cae0:	f003 ff35 	bl	801094e <SDMMC_CmdStatusRegister>
 800cae4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d02b      	beq.n	800cb44 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	e069      	b.n	800cbcc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d013      	beq.n	800cb2e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800cb06:	2300      	movs	r3, #0
 800cb08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb0a:	e00d      	b.n	800cb28 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f003 fce9 	bl	80104e8 <SDMMC_ReadFIFO>
 800cb16:	4602      	mov	r2, r0
 800cb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1a:	601a      	str	r2, [r3, #0]
        pData++;
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	3304      	adds	r3, #4
 800cb20:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	3301      	adds	r3, #1
 800cb26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	2b07      	cmp	r3, #7
 800cb2c:	d9ee      	bls.n	800cb0c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cb2e:	f7f5 ffb9 	bl	8002aa4 <HAL_GetTick>
 800cb32:	4602      	mov	r2, r0
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb3c:	d102      	bne.n	800cb44 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cb3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb42:	e043      	b.n	800cbcc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d0d2      	beq.n	800caf8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb58:	f003 0308 	and.w	r3, r3, #8
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cb60:	2308      	movs	r3, #8
 800cb62:	e033      	b.n	800cbcc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb6a:	f003 0302 	and.w	r3, r3, #2
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cb72:	2302      	movs	r3, #2
 800cb74:	e02a      	b.n	800cbcc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb7c:	f003 0320 	and.w	r3, r3, #32
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d017      	beq.n	800cbb4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cb84:	2320      	movs	r3, #32
 800cb86:	e021      	b.n	800cbcc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f003 fcab 	bl	80104e8 <SDMMC_ReadFIFO>
 800cb92:	4602      	mov	r2, r0
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	601a      	str	r2, [r3, #0]
    pData++;
 800cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cb9e:	f7f5 ff81 	bl	8002aa4 <HAL_GetTick>
 800cba2:	4602      	mov	r2, r0
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbac:	d102      	bne.n	800cbb4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cbae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbb2:	e00b      	b.n	800cbcc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1e2      	bne.n	800cb88 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a03      	ldr	r2, [pc, #12]	; (800cbd4 <SD_SendSDStatus+0x19c>)
 800cbc8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3730      	adds	r7, #48	; 0x30
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	18000f3a 	.word	0x18000f3a

0800cbd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d102      	bne.n	800cbee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cbe8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbec:	e018      	b.n	800cc20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbf6:	041b      	lsls	r3, r3, #16
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	f003 fe84 	bl	8010908 <SDMMC_CmdSendStatus>
 800cc00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <SD_SendStatus+0x34>
  {
    return errorstate;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	e009      	b.n	800cc20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2100      	movs	r1, #0
 800cc12:	4618      	mov	r0, r3
 800cc14:	f003 fccb 	bl	80105ae <SDMMC_GetResponse>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cc30:	2300      	movs	r3, #0
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	2300      	movs	r3, #0
 800cc36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f003 fcb5 	bl	80105ae <SDMMC_GetResponse>
 800cc44:	4603      	mov	r3, r0
 800cc46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc4e:	d102      	bne.n	800cc56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cc50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc54:	e02f      	b.n	800ccb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cc56:	f107 030c 	add.w	r3, r7, #12
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f879 	bl	800cd54 <SD_FindSCR>
 800cc62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	e023      	b.n	800ccb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d01c      	beq.n	800ccb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc80:	041b      	lsls	r3, r3, #16
 800cc82:	4619      	mov	r1, r3
 800cc84:	4610      	mov	r0, r2
 800cc86:	f003 fd56 	bl	8010736 <SDMMC_CmdAppCommand>
 800cc8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d001      	beq.n	800cc96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	e00f      	b.n	800ccb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2102      	movs	r1, #2
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f003 fd8d 	bl	80107bc <SDMMC_CmdBusWidth>
 800cca2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	e003      	b.n	800ccb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e001      	b.n	800ccb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ccb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b086      	sub	sp, #24
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	2300      	movs	r3, #0
 800cccc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f003 fc6a 	bl	80105ae <SDMMC_GetResponse>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cce4:	d102      	bne.n	800ccec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccea:	e02f      	b.n	800cd4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ccec:	f107 030c 	add.w	r3, r7, #12
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 f82e 	bl	800cd54 <SD_FindSCR>
 800ccf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	e023      	b.n	800cd4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d01c      	beq.n	800cd48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd16:	041b      	lsls	r3, r3, #16
 800cd18:	4619      	mov	r1, r3
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	f003 fd0b 	bl	8010736 <SDMMC_CmdAppCommand>
 800cd20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	e00f      	b.n	800cd4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2100      	movs	r1, #0
 800cd32:	4618      	mov	r0, r3
 800cd34:	f003 fd42 	bl	80107bc <SDMMC_CmdBusWidth>
 800cd38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	e003      	b.n	800cd4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cd44:	2300      	movs	r3, #0
 800cd46:	e001      	b.n	800cd4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cd48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b08e      	sub	sp, #56	; 0x38
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cd5e:	f7f5 fea1 	bl	8002aa4 <HAL_GetTick>
 800cd62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cd64:	2300      	movs	r3, #0
 800cd66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60bb      	str	r3, [r7, #8]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2108      	movs	r1, #8
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f003 fc56 	bl	801062c <SDMMC_CmdBlockLength>
 800cd80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <SD_FindSCR+0x38>
  {
    return errorstate;
 800cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8a:	e0ad      	b.n	800cee8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd94:	041b      	lsls	r3, r3, #16
 800cd96:	4619      	mov	r1, r3
 800cd98:	4610      	mov	r0, r2
 800cd9a:	f003 fccc 	bl	8010736 <SDMMC_CmdAppCommand>
 800cd9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d001      	beq.n	800cdaa <SD_FindSCR+0x56>
  {
    return errorstate;
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	e09e      	b.n	800cee8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cdaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cdb0:	2308      	movs	r3, #8
 800cdb2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cdb4:	2330      	movs	r3, #48	; 0x30
 800cdb6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cdb8:	2302      	movs	r3, #2
 800cdba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f107 0210 	add.w	r2, r7, #16
 800cdcc:	4611      	mov	r1, r2
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f003 fc00 	bl	80105d4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f003 fd12 	bl	8010802 <SDMMC_CmdSendSCR>
 800cdde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d027      	beq.n	800ce36 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde8:	e07e      	b.n	800cee8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d113      	bne.n	800ce20 <SD_FindSCR+0xcc>
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d110      	bne.n	800ce20 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f003 fb70 	bl	80104e8 <SDMMC_ReadFIFO>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f003 fb69 	bl	80104e8 <SDMMC_ReadFIFO>
 800ce16:	4603      	mov	r3, r0
 800ce18:	60fb      	str	r3, [r7, #12]
      index++;
 800ce1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ce20:	f7f5 fe40 	bl	8002aa4 <HAL_GetTick>
 800ce24:	4602      	mov	r2, r0
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce2e:	d102      	bne.n	800ce36 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ce30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce34:	e058      	b.n	800cee8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce3c:	f240 532a 	movw	r3, #1322	; 0x52a
 800ce40:	4013      	ands	r3, r2
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d0d1      	beq.n	800cdea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce4c:	f003 0308 	and.w	r3, r3, #8
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d005      	beq.n	800ce60 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2208      	movs	r2, #8
 800ce5a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ce5c:	2308      	movs	r3, #8
 800ce5e:	e043      	b.n	800cee8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce66:	f003 0302 	and.w	r3, r3, #2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d005      	beq.n	800ce7a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2202      	movs	r2, #2
 800ce74:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce76:	2302      	movs	r3, #2
 800ce78:	e036      	b.n	800cee8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce80:	f003 0320 	and.w	r3, r3, #32
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d005      	beq.n	800ce94 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ce90:	2320      	movs	r3, #32
 800ce92:	e029      	b.n	800cee8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a15      	ldr	r2, [pc, #84]	; (800cef0 <SD_FindSCR+0x19c>)
 800ce9a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	061a      	lsls	r2, r3, #24
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	021b      	lsls	r3, r3, #8
 800cea4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cea8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	0a1b      	lsrs	r3, r3, #8
 800ceae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ceb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	0e1b      	lsrs	r3, r3, #24
 800ceb8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ceba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebc:	601a      	str	r2, [r3, #0]
    scr++;
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	3304      	adds	r3, #4
 800cec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	061a      	lsls	r2, r3, #24
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	021b      	lsls	r3, r3, #8
 800cecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ced0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	0a1b      	lsrs	r3, r3, #8
 800ced6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ceda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	0e1b      	lsrs	r3, r3, #24
 800cee0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3738      	adds	r7, #56	; 0x38
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	18000f3a 	.word	0x18000f3a

0800cef4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e02b      	b.n	800cf60 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d106      	bne.n	800cf22 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7f5 f973 	bl	8002208 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2202      	movs	r2, #2
 800cf26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	3304      	adds	r3, #4
 800cf32:	4619      	mov	r1, r3
 800cf34:	4610      	mov	r0, r2
 800cf36:	f003 f9e7 	bl	8010308 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6818      	ldr	r0, [r3, #0]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	461a      	mov	r2, r3
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	f003 fa3b 	bl	80103c0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800cf4a:	4b07      	ldr	r3, [pc, #28]	; (800cf68 <HAL_SDRAM_Init+0x74>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a06      	ldr	r2, [pc, #24]	; (800cf68 <HAL_SDRAM_Init+0x74>)
 800cf50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf54:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	52004000 	.word	0x52004000

0800cf6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e0e2      	b.n	800d148 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a70      	ldr	r2, [pc, #448]	; (800d150 <HAL_SPI_Init+0x1e4>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d00f      	beq.n	800cfb2 <HAL_SPI_Init+0x46>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a6f      	ldr	r2, [pc, #444]	; (800d154 <HAL_SPI_Init+0x1e8>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d00a      	beq.n	800cfb2 <HAL_SPI_Init+0x46>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a6d      	ldr	r2, [pc, #436]	; (800d158 <HAL_SPI_Init+0x1ec>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d005      	beq.n	800cfb2 <HAL_SPI_Init+0x46>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	2b0f      	cmp	r3, #15
 800cfac:	d901      	bls.n	800cfb2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e0ca      	b.n	800d148 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f8d2 	bl	800d15c <SPI_GetPacketSize>
 800cfb8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a64      	ldr	r2, [pc, #400]	; (800d150 <HAL_SPI_Init+0x1e4>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d00c      	beq.n	800cfde <HAL_SPI_Init+0x72>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a62      	ldr	r2, [pc, #392]	; (800d154 <HAL_SPI_Init+0x1e8>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d007      	beq.n	800cfde <HAL_SPI_Init+0x72>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a61      	ldr	r2, [pc, #388]	; (800d158 <HAL_SPI_Init+0x1ec>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d002      	beq.n	800cfde <HAL_SPI_Init+0x72>
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	2b08      	cmp	r3, #8
 800cfdc:	d811      	bhi.n	800d002 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cfe2:	4a5b      	ldr	r2, [pc, #364]	; (800d150 <HAL_SPI_Init+0x1e4>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d009      	beq.n	800cffc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a59      	ldr	r2, [pc, #356]	; (800d154 <HAL_SPI_Init+0x1e8>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d004      	beq.n	800cffc <HAL_SPI_Init+0x90>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a58      	ldr	r2, [pc, #352]	; (800d158 <HAL_SPI_Init+0x1ec>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d104      	bne.n	800d006 <HAL_SPI_Init+0x9a>
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	2b10      	cmp	r3, #16
 800d000:	d901      	bls.n	800d006 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e0a0      	b.n	800d148 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d106      	bne.n	800d020 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7f4 ff70 	bl	8001f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2202      	movs	r2, #2
 800d024:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f022 0201 	bic.w	r2, r2, #1
 800d036:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d040:	d110      	bne.n	800d064 <HAL_SPI_Init+0xf8>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d04a:	d10b      	bne.n	800d064 <HAL_SPI_Init+0xf8>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d050:	2b00      	cmp	r3, #0
 800d052:	d107      	bne.n	800d064 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d062:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	69da      	ldr	r2, [r3, #28]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06c:	431a      	orrs	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	431a      	orrs	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d076:	ea42 0103 	orr.w	r1, r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	68da      	ldr	r2, [r3, #12]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	430a      	orrs	r2, r1
 800d084:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08e:	431a      	orrs	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d094:	431a      	orrs	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	699b      	ldr	r3, [r3, #24]
 800d09a:	431a      	orrs	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	691b      	ldr	r3, [r3, #16]
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	695b      	ldr	r3, [r3, #20]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a1b      	ldr	r3, [r3, #32]
 800d0ac:	431a      	orrs	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	431a      	orrs	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0c4:	ea42 0103 	orr.w	r1, r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d113      	bne.n	800d104 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0ee:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d102:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 0201 	bic.w	r2, r2, #1
 800d112:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00a      	beq.n	800d136 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	430a      	orrs	r2, r1
 800d134:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2201      	movs	r2, #1
 800d142:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	40013000 	.word	0x40013000
 800d154:	40003800 	.word	0x40003800
 800d158:	40003c00 	.word	0x40003c00

0800d15c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d168:	095b      	lsrs	r3, r3, #5
 800d16a:	3301      	adds	r3, #1
 800d16c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	3301      	adds	r3, #1
 800d174:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	3307      	adds	r3, #7
 800d17a:	08db      	lsrs	r3, r3, #3
 800d17c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	fb02 f303 	mul.w	r3, r2, r3
}
 800d186:	4618      	mov	r0, r3
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b082      	sub	sp, #8
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e01d      	b.n	800d1e0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d106      	bne.n	800d1be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f815 	bl	800d1e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2202      	movs	r2, #2
 800d1c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	f000 f985 	bl	800d4e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68da      	ldr	r2, [r3, #12]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f042 0201 	orr.w	r2, r2, #1
 800d212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	689a      	ldr	r2, [r3, #8]
 800d21a:	4b0c      	ldr	r3, [pc, #48]	; (800d24c <HAL_TIM_Base_Start_IT+0x50>)
 800d21c:	4013      	ands	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b06      	cmp	r3, #6
 800d224:	d00b      	beq.n	800d23e <HAL_TIM_Base_Start_IT+0x42>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d22c:	d007      	beq.n	800d23e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f042 0201 	orr.w	r2, r2, #1
 800d23c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3714      	adds	r7, #20
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	00010007 	.word	0x00010007

0800d250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	2b02      	cmp	r3, #2
 800d264:	d122      	bne.n	800d2ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	f003 0302 	and.w	r3, r3, #2
 800d270:	2b02      	cmp	r3, #2
 800d272:	d11b      	bne.n	800d2ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f06f 0202 	mvn.w	r2, #2
 800d27c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2201      	movs	r2, #1
 800d282:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	f003 0303 	and.w	r3, r3, #3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f905 	bl	800d4a2 <HAL_TIM_IC_CaptureCallback>
 800d298:	e005      	b.n	800d2a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f8f7 	bl	800d48e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f908 	bl	800d4b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	f003 0304 	and.w	r3, r3, #4
 800d2b6:	2b04      	cmp	r3, #4
 800d2b8:	d122      	bne.n	800d300 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	f003 0304 	and.w	r3, r3, #4
 800d2c4:	2b04      	cmp	r3, #4
 800d2c6:	d11b      	bne.n	800d300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f06f 0204 	mvn.w	r2, #4
 800d2d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f8db 	bl	800d4a2 <HAL_TIM_IC_CaptureCallback>
 800d2ec:	e005      	b.n	800d2fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f8cd 	bl	800d48e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f8de 	bl	800d4b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	f003 0308 	and.w	r3, r3, #8
 800d30a:	2b08      	cmp	r3, #8
 800d30c:	d122      	bne.n	800d354 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	f003 0308 	and.w	r3, r3, #8
 800d318:	2b08      	cmp	r3, #8
 800d31a:	d11b      	bne.n	800d354 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f06f 0208 	mvn.w	r2, #8
 800d324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2204      	movs	r2, #4
 800d32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	69db      	ldr	r3, [r3, #28]
 800d332:	f003 0303 	and.w	r3, r3, #3
 800d336:	2b00      	cmp	r3, #0
 800d338:	d003      	beq.n	800d342 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f8b1 	bl	800d4a2 <HAL_TIM_IC_CaptureCallback>
 800d340:	e005      	b.n	800d34e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 f8a3 	bl	800d48e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 f8b4 	bl	800d4b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	f003 0310 	and.w	r3, r3, #16
 800d35e:	2b10      	cmp	r3, #16
 800d360:	d122      	bne.n	800d3a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	f003 0310 	and.w	r3, r3, #16
 800d36c:	2b10      	cmp	r3, #16
 800d36e:	d11b      	bne.n	800d3a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f06f 0210 	mvn.w	r2, #16
 800d378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2208      	movs	r2, #8
 800d37e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d003      	beq.n	800d396 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f887 	bl	800d4a2 <HAL_TIM_IC_CaptureCallback>
 800d394:	e005      	b.n	800d3a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f879 	bl	800d48e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f88a 	bl	800d4b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d10e      	bne.n	800d3d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	f003 0301 	and.w	r3, r3, #1
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d107      	bne.n	800d3d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f06f 0201 	mvn.w	r2, #1
 800d3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7f4 f904 	bl	80015dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3de:	2b80      	cmp	r3, #128	; 0x80
 800d3e0:	d10e      	bne.n	800d400 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ec:	2b80      	cmp	r3, #128	; 0x80
 800d3ee:	d107      	bne.n	800d400 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d3f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f914 	bl	800d628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d40a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d40e:	d10e      	bne.n	800d42e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41a:	2b80      	cmp	r3, #128	; 0x80
 800d41c:	d107      	bne.n	800d42e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f907 	bl	800d63c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d438:	2b40      	cmp	r3, #64	; 0x40
 800d43a:	d10e      	bne.n	800d45a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d446:	2b40      	cmp	r3, #64	; 0x40
 800d448:	d107      	bne.n	800d45a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 f838 	bl	800d4ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	f003 0320 	and.w	r3, r3, #32
 800d464:	2b20      	cmp	r3, #32
 800d466:	d10e      	bne.n	800d486 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	f003 0320 	and.w	r3, r3, #32
 800d472:	2b20      	cmp	r3, #32
 800d474:	d107      	bne.n	800d486 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f06f 0220 	mvn.w	r2, #32
 800d47e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f8c7 	bl	800d614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d486:	bf00      	nop
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d48e:	b480      	push	{r7}
 800d490:	b083      	sub	sp, #12
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d496:	bf00      	nop
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d4a2:	b480      	push	{r7}
 800d4a4:	b083      	sub	sp, #12
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4aa:	bf00      	nop
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	b083      	sub	sp, #12
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4be:	bf00      	nop
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4d2:	bf00      	nop
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
	...

0800d4e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4a40      	ldr	r2, [pc, #256]	; (800d5f4 <TIM_Base_SetConfig+0x114>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d013      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4fe:	d00f      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a3d      	ldr	r2, [pc, #244]	; (800d5f8 <TIM_Base_SetConfig+0x118>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d00b      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a3c      	ldr	r2, [pc, #240]	; (800d5fc <TIM_Base_SetConfig+0x11c>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d007      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4a3b      	ldr	r2, [pc, #236]	; (800d600 <TIM_Base_SetConfig+0x120>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d003      	beq.n	800d520 <TIM_Base_SetConfig+0x40>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a3a      	ldr	r2, [pc, #232]	; (800d604 <TIM_Base_SetConfig+0x124>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d108      	bne.n	800d532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	4313      	orrs	r3, r2
 800d530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a2f      	ldr	r2, [pc, #188]	; (800d5f4 <TIM_Base_SetConfig+0x114>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d01f      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d540:	d01b      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a2c      	ldr	r2, [pc, #176]	; (800d5f8 <TIM_Base_SetConfig+0x118>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d017      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a2b      	ldr	r2, [pc, #172]	; (800d5fc <TIM_Base_SetConfig+0x11c>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d013      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a2a      	ldr	r2, [pc, #168]	; (800d600 <TIM_Base_SetConfig+0x120>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d00f      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a29      	ldr	r2, [pc, #164]	; (800d604 <TIM_Base_SetConfig+0x124>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d00b      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a28      	ldr	r2, [pc, #160]	; (800d608 <TIM_Base_SetConfig+0x128>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d007      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a27      	ldr	r2, [pc, #156]	; (800d60c <TIM_Base_SetConfig+0x12c>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d003      	beq.n	800d57a <TIM_Base_SetConfig+0x9a>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4a26      	ldr	r2, [pc, #152]	; (800d610 <TIM_Base_SetConfig+0x130>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d108      	bne.n	800d58c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	4313      	orrs	r3, r2
 800d58a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	4313      	orrs	r3, r2
 800d598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	689a      	ldr	r2, [r3, #8]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a10      	ldr	r2, [pc, #64]	; (800d5f4 <TIM_Base_SetConfig+0x114>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d00f      	beq.n	800d5d8 <TIM_Base_SetConfig+0xf8>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a12      	ldr	r2, [pc, #72]	; (800d604 <TIM_Base_SetConfig+0x124>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d00b      	beq.n	800d5d8 <TIM_Base_SetConfig+0xf8>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a11      	ldr	r2, [pc, #68]	; (800d608 <TIM_Base_SetConfig+0x128>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d007      	beq.n	800d5d8 <TIM_Base_SetConfig+0xf8>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a10      	ldr	r2, [pc, #64]	; (800d60c <TIM_Base_SetConfig+0x12c>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d003      	beq.n	800d5d8 <TIM_Base_SetConfig+0xf8>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4a0f      	ldr	r2, [pc, #60]	; (800d610 <TIM_Base_SetConfig+0x130>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d103      	bne.n	800d5e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	691a      	ldr	r2, [r3, #16]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	615a      	str	r2, [r3, #20]
}
 800d5e6:	bf00      	nop
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	40010000 	.word	0x40010000
 800d5f8:	40000400 	.word	0x40000400
 800d5fc:	40000800 	.word	0x40000800
 800d600:	40000c00 	.word	0x40000c00
 800d604:	40010400 	.word	0x40010400
 800d608:	40014000 	.word	0x40014000
 800d60c:	40014400 	.word	0x40014400
 800d610:	40014800 	.word	0x40014800

0800d614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d61c:	bf00      	nop
 800d61e:	370c      	adds	r7, #12
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	e042      	b.n	800d6e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d106      	bne.n	800d67a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7f4 fcbd 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2224      	movs	r2, #36	; 0x24
 800d67e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f022 0201 	bic.w	r2, r2, #1
 800d690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 f9c0 	bl	800da18 <UART_SetConfig>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d101      	bne.n	800d6a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e022      	b.n	800d6e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d002      	beq.n	800d6b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f002 fb32 	bl	800fd14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d6be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	689a      	ldr	r2, [r3, #8]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d6ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f042 0201 	orr.w	r2, r2, #1
 800d6de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f002 fbb9 	bl	800fe58 <UART_CheckIdleState>
 800d6e6:	4603      	mov	r3, r0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b088      	sub	sp, #32
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d710:	69fa      	ldr	r2, [r7, #28]
 800d712:	f640 030f 	movw	r3, #2063	; 0x80f
 800d716:	4013      	ands	r3, r2
 800d718:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d118      	bne.n	800d752 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	f003 0320 	and.w	r3, r3, #32
 800d726:	2b00      	cmp	r3, #0
 800d728:	d013      	beq.n	800d752 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	f003 0320 	and.w	r3, r3, #32
 800d730:	2b00      	cmp	r3, #0
 800d732:	d104      	bne.n	800d73e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d009      	beq.n	800d752 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d742:	2b00      	cmp	r3, #0
 800d744:	f000 8145 	beq.w	800d9d2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	4798      	blx	r3
      }
      return;
 800d750:	e13f      	b.n	800d9d2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 80e8 	beq.w	800d92a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d75a:	697a      	ldr	r2, [r7, #20]
 800d75c:	4ba1      	ldr	r3, [pc, #644]	; (800d9e4 <HAL_UART_IRQHandler+0x2f4>)
 800d75e:	4013      	ands	r3, r2
 800d760:	2b00      	cmp	r3, #0
 800d762:	d105      	bne.n	800d770 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	4ba0      	ldr	r3, [pc, #640]	; (800d9e8 <HAL_UART_IRQHandler+0x2f8>)
 800d768:	4013      	ands	r3, r2
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 80dd 	beq.w	800d92a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	f003 0301 	and.w	r3, r3, #1
 800d776:	2b00      	cmp	r3, #0
 800d778:	d010      	beq.n	800d79c <HAL_UART_IRQHandler+0xac>
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00b      	beq.n	800d79c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2201      	movs	r2, #1
 800d78a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d792:	f043 0201 	orr.w	r2, r3, #1
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	f003 0302 	and.w	r3, r3, #2
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d010      	beq.n	800d7c8 <HAL_UART_IRQHandler+0xd8>
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00b      	beq.n	800d7c8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2202      	movs	r2, #2
 800d7b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7be:	f043 0204 	orr.w	r2, r3, #4
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	f003 0304 	and.w	r3, r3, #4
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d010      	beq.n	800d7f4 <HAL_UART_IRQHandler+0x104>
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f003 0301 	and.w	r3, r3, #1
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00b      	beq.n	800d7f4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2204      	movs	r2, #4
 800d7e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7ea:	f043 0202 	orr.w	r2, r3, #2
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	f003 0308 	and.w	r3, r3, #8
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d015      	beq.n	800d82a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	f003 0320 	and.w	r3, r3, #32
 800d804:	2b00      	cmp	r3, #0
 800d806:	d104      	bne.n	800d812 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	4b76      	ldr	r3, [pc, #472]	; (800d9e4 <HAL_UART_IRQHandler+0x2f4>)
 800d80c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00b      	beq.n	800d82a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2208      	movs	r2, #8
 800d818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d820:	f043 0208 	orr.w	r2, r3, #8
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d830:	2b00      	cmp	r3, #0
 800d832:	d011      	beq.n	800d858 <HAL_UART_IRQHandler+0x168>
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00c      	beq.n	800d858 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d84e:	f043 0220 	orr.w	r2, r3, #32
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 80b9 	beq.w	800d9d6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	f003 0320 	and.w	r3, r3, #32
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d011      	beq.n	800d892 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	f003 0320 	and.w	r3, r3, #32
 800d874:	2b00      	cmp	r3, #0
 800d876:	d104      	bne.n	800d882 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d007      	beq.n	800d892 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d898:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a4:	2b40      	cmp	r3, #64	; 0x40
 800d8a6:	d004      	beq.n	800d8b2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d031      	beq.n	800d916 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f002 fb98 	bl	800ffe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c2:	2b40      	cmp	r3, #64	; 0x40
 800d8c4:	d123      	bne.n	800d90e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	689a      	ldr	r2, [r3, #8]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d013      	beq.n	800d906 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8e2:	4a42      	ldr	r2, [pc, #264]	; (800d9ec <HAL_UART_IRQHandler+0x2fc>)
 800d8e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7f7 f878 	bl	80049e0 <HAL_DMA_Abort_IT>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d017      	beq.n	800d926 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800d900:	4610      	mov	r0, r2
 800d902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d904:	e00f      	b.n	800d926 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f87c 	bl	800da04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d90c:	e00b      	b.n	800d926 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 f878 	bl	800da04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d914:	e007      	b.n	800d926 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 f874 	bl	800da04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800d924:	e057      	b.n	800d9d6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d926:	bf00      	nop
    return;
 800d928:	e055      	b.n	800d9d6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00d      	beq.n	800d950 <HAL_UART_IRQHandler+0x260>
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d008      	beq.n	800d950 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d946:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f002 fba1 	bl	8010090 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d94e:	e045      	b.n	800d9dc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d956:	2b00      	cmp	r3, #0
 800d958:	d012      	beq.n	800d980 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d960:	2b00      	cmp	r3, #0
 800d962:	d104      	bne.n	800d96e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d008      	beq.n	800d980 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d972:	2b00      	cmp	r3, #0
 800d974:	d031      	beq.n	800d9da <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	4798      	blx	r3
    }
    return;
 800d97e:	e02c      	b.n	800d9da <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d986:	2b00      	cmp	r3, #0
 800d988:	d008      	beq.n	800d99c <HAL_UART_IRQHandler+0x2ac>
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f002 fb61 	bl	801005c <UART_EndTransmit_IT>
    return;
 800d99a:	e01f      	b.n	800d9dc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d008      	beq.n	800d9b8 <HAL_UART_IRQHandler+0x2c8>
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d003      	beq.n	800d9b8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f002 fb81 	bl	80100b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9b6:	e011      	b.n	800d9dc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00c      	beq.n	800d9dc <HAL_UART_IRQHandler+0x2ec>
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	da09      	bge.n	800d9dc <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f002 fb6b 	bl	80100a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9ce:	bf00      	nop
 800d9d0:	e004      	b.n	800d9dc <HAL_UART_IRQHandler+0x2ec>
      return;
 800d9d2:	bf00      	nop
 800d9d4:	e002      	b.n	800d9dc <HAL_UART_IRQHandler+0x2ec>
    return;
 800d9d6:	bf00      	nop
 800d9d8:	e000      	b.n	800d9dc <HAL_UART_IRQHandler+0x2ec>
    return;
 800d9da:	bf00      	nop
  }
}
 800d9dc:	3720      	adds	r7, #32
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	10000001 	.word	0x10000001
 800d9e8:	04000120 	.word	0x04000120
 800d9ec:	08010031 	.word	0x08010031

0800d9f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d9f8:	bf00      	nop
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800da1c:	b090      	sub	sp, #64	; 0x40
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800da22:	2300      	movs	r3, #0
 800da24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800da26:	2300      	movs	r3, #0
 800da28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800da2c:	2300      	movs	r3, #0
 800da2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	689a      	ldr	r2, [r3, #8]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	431a      	orrs	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	431a      	orrs	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	4313      	orrs	r3, r2
 800da46:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da4e:	4313      	orrs	r3, r2
 800da50:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	4bc1      	ldr	r3, [pc, #772]	; (800dd60 <UART_SetConfig+0x348>)
 800da5a:	4013      	ands	r3, r2
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	6812      	ldr	r2, [r2, #0]
 800da60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da62:	430b      	orrs	r3, r1
 800da64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68da      	ldr	r2, [r3, #12]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	430a      	orrs	r2, r1
 800da7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4ab7      	ldr	r2, [pc, #732]	; (800dd64 <UART_SetConfig+0x34c>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d004      	beq.n	800da96 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da92:	4313      	orrs	r3, r2
 800da94:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	689a      	ldr	r2, [r3, #8]
 800da9c:	4bb2      	ldr	r3, [pc, #712]	; (800dd68 <UART_SetConfig+0x350>)
 800da9e:	4013      	ands	r3, r2
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	6812      	ldr	r2, [r2, #0]
 800daa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800daa6:	430b      	orrs	r3, r1
 800daa8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab0:	f023 010f 	bic.w	r1, r3, #15
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	430a      	orrs	r2, r1
 800dabe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4aa9      	ldr	r2, [pc, #676]	; (800dd6c <UART_SetConfig+0x354>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d177      	bne.n	800dbba <UART_SetConfig+0x1a2>
 800daca:	4ba9      	ldr	r3, [pc, #676]	; (800dd70 <UART_SetConfig+0x358>)
 800dacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dad2:	2b28      	cmp	r3, #40	; 0x28
 800dad4:	d86c      	bhi.n	800dbb0 <UART_SetConfig+0x198>
 800dad6:	a201      	add	r2, pc, #4	; (adr r2, 800dadc <UART_SetConfig+0xc4>)
 800dad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dadc:	0800db81 	.word	0x0800db81
 800dae0:	0800dbb1 	.word	0x0800dbb1
 800dae4:	0800dbb1 	.word	0x0800dbb1
 800dae8:	0800dbb1 	.word	0x0800dbb1
 800daec:	0800dbb1 	.word	0x0800dbb1
 800daf0:	0800dbb1 	.word	0x0800dbb1
 800daf4:	0800dbb1 	.word	0x0800dbb1
 800daf8:	0800dbb1 	.word	0x0800dbb1
 800dafc:	0800db89 	.word	0x0800db89
 800db00:	0800dbb1 	.word	0x0800dbb1
 800db04:	0800dbb1 	.word	0x0800dbb1
 800db08:	0800dbb1 	.word	0x0800dbb1
 800db0c:	0800dbb1 	.word	0x0800dbb1
 800db10:	0800dbb1 	.word	0x0800dbb1
 800db14:	0800dbb1 	.word	0x0800dbb1
 800db18:	0800dbb1 	.word	0x0800dbb1
 800db1c:	0800db91 	.word	0x0800db91
 800db20:	0800dbb1 	.word	0x0800dbb1
 800db24:	0800dbb1 	.word	0x0800dbb1
 800db28:	0800dbb1 	.word	0x0800dbb1
 800db2c:	0800dbb1 	.word	0x0800dbb1
 800db30:	0800dbb1 	.word	0x0800dbb1
 800db34:	0800dbb1 	.word	0x0800dbb1
 800db38:	0800dbb1 	.word	0x0800dbb1
 800db3c:	0800db99 	.word	0x0800db99
 800db40:	0800dbb1 	.word	0x0800dbb1
 800db44:	0800dbb1 	.word	0x0800dbb1
 800db48:	0800dbb1 	.word	0x0800dbb1
 800db4c:	0800dbb1 	.word	0x0800dbb1
 800db50:	0800dbb1 	.word	0x0800dbb1
 800db54:	0800dbb1 	.word	0x0800dbb1
 800db58:	0800dbb1 	.word	0x0800dbb1
 800db5c:	0800dba1 	.word	0x0800dba1
 800db60:	0800dbb1 	.word	0x0800dbb1
 800db64:	0800dbb1 	.word	0x0800dbb1
 800db68:	0800dbb1 	.word	0x0800dbb1
 800db6c:	0800dbb1 	.word	0x0800dbb1
 800db70:	0800dbb1 	.word	0x0800dbb1
 800db74:	0800dbb1 	.word	0x0800dbb1
 800db78:	0800dbb1 	.word	0x0800dbb1
 800db7c:	0800dba9 	.word	0x0800dba9
 800db80:	2301      	movs	r3, #1
 800db82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db86:	e233      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800db88:	2304      	movs	r3, #4
 800db8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db8e:	e22f      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800db90:	2308      	movs	r3, #8
 800db92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db96:	e22b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800db98:	2310      	movs	r3, #16
 800db9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db9e:	e227      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dba0:	2320      	movs	r3, #32
 800dba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dba6:	e223      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dba8:	2340      	movs	r3, #64	; 0x40
 800dbaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbae:	e21f      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dbb0:	2380      	movs	r3, #128	; 0x80
 800dbb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbb6:	bf00      	nop
 800dbb8:	e21a      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a6d      	ldr	r2, [pc, #436]	; (800dd74 <UART_SetConfig+0x35c>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d132      	bne.n	800dc2a <UART_SetConfig+0x212>
 800dbc4:	4b6a      	ldr	r3, [pc, #424]	; (800dd70 <UART_SetConfig+0x358>)
 800dbc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbc8:	f003 0307 	and.w	r3, r3, #7
 800dbcc:	2b05      	cmp	r3, #5
 800dbce:	d827      	bhi.n	800dc20 <UART_SetConfig+0x208>
 800dbd0:	a201      	add	r2, pc, #4	; (adr r2, 800dbd8 <UART_SetConfig+0x1c0>)
 800dbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd6:	bf00      	nop
 800dbd8:	0800dbf1 	.word	0x0800dbf1
 800dbdc:	0800dbf9 	.word	0x0800dbf9
 800dbe0:	0800dc01 	.word	0x0800dc01
 800dbe4:	0800dc09 	.word	0x0800dc09
 800dbe8:	0800dc11 	.word	0x0800dc11
 800dbec:	0800dc19 	.word	0x0800dc19
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbf6:	e1fb      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dbf8:	2304      	movs	r3, #4
 800dbfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbfe:	e1f7      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc00:	2308      	movs	r3, #8
 800dc02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc06:	e1f3      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc08:	2310      	movs	r3, #16
 800dc0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc0e:	e1ef      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc10:	2320      	movs	r3, #32
 800dc12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc16:	e1eb      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc18:	2340      	movs	r3, #64	; 0x40
 800dc1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc1e:	e1e7      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc20:	2380      	movs	r3, #128	; 0x80
 800dc22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc26:	bf00      	nop
 800dc28:	e1e2      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a52      	ldr	r2, [pc, #328]	; (800dd78 <UART_SetConfig+0x360>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d132      	bne.n	800dc9a <UART_SetConfig+0x282>
 800dc34:	4b4e      	ldr	r3, [pc, #312]	; (800dd70 <UART_SetConfig+0x358>)
 800dc36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc38:	f003 0307 	and.w	r3, r3, #7
 800dc3c:	2b05      	cmp	r3, #5
 800dc3e:	d827      	bhi.n	800dc90 <UART_SetConfig+0x278>
 800dc40:	a201      	add	r2, pc, #4	; (adr r2, 800dc48 <UART_SetConfig+0x230>)
 800dc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc46:	bf00      	nop
 800dc48:	0800dc61 	.word	0x0800dc61
 800dc4c:	0800dc69 	.word	0x0800dc69
 800dc50:	0800dc71 	.word	0x0800dc71
 800dc54:	0800dc79 	.word	0x0800dc79
 800dc58:	0800dc81 	.word	0x0800dc81
 800dc5c:	0800dc89 	.word	0x0800dc89
 800dc60:	2300      	movs	r3, #0
 800dc62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc66:	e1c3      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc68:	2304      	movs	r3, #4
 800dc6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc6e:	e1bf      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc70:	2308      	movs	r3, #8
 800dc72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc76:	e1bb      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc78:	2310      	movs	r3, #16
 800dc7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc7e:	e1b7      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc80:	2320      	movs	r3, #32
 800dc82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc86:	e1b3      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc88:	2340      	movs	r3, #64	; 0x40
 800dc8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc8e:	e1af      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc90:	2380      	movs	r3, #128	; 0x80
 800dc92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc96:	bf00      	nop
 800dc98:	e1aa      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a37      	ldr	r2, [pc, #220]	; (800dd7c <UART_SetConfig+0x364>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d132      	bne.n	800dd0a <UART_SetConfig+0x2f2>
 800dca4:	4b32      	ldr	r3, [pc, #200]	; (800dd70 <UART_SetConfig+0x358>)
 800dca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dca8:	f003 0307 	and.w	r3, r3, #7
 800dcac:	2b05      	cmp	r3, #5
 800dcae:	d827      	bhi.n	800dd00 <UART_SetConfig+0x2e8>
 800dcb0:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <UART_SetConfig+0x2a0>)
 800dcb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb6:	bf00      	nop
 800dcb8:	0800dcd1 	.word	0x0800dcd1
 800dcbc:	0800dcd9 	.word	0x0800dcd9
 800dcc0:	0800dce1 	.word	0x0800dce1
 800dcc4:	0800dce9 	.word	0x0800dce9
 800dcc8:	0800dcf1 	.word	0x0800dcf1
 800dccc:	0800dcf9 	.word	0x0800dcf9
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dcd6:	e18b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dcd8:	2304      	movs	r3, #4
 800dcda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dcde:	e187      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dce0:	2308      	movs	r3, #8
 800dce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dce6:	e183      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dce8:	2310      	movs	r3, #16
 800dcea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dcee:	e17f      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dcf0:	2320      	movs	r3, #32
 800dcf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dcf6:	e17b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dcf8:	2340      	movs	r3, #64	; 0x40
 800dcfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dcfe:	e177      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd00:	2380      	movs	r3, #128	; 0x80
 800dd02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd06:	bf00      	nop
 800dd08:	e172      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a1c      	ldr	r2, [pc, #112]	; (800dd80 <UART_SetConfig+0x368>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d144      	bne.n	800dd9e <UART_SetConfig+0x386>
 800dd14:	4b16      	ldr	r3, [pc, #88]	; (800dd70 <UART_SetConfig+0x358>)
 800dd16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd18:	f003 0307 	and.w	r3, r3, #7
 800dd1c:	2b05      	cmp	r3, #5
 800dd1e:	d839      	bhi.n	800dd94 <UART_SetConfig+0x37c>
 800dd20:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <UART_SetConfig+0x310>)
 800dd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd26:	bf00      	nop
 800dd28:	0800dd41 	.word	0x0800dd41
 800dd2c:	0800dd49 	.word	0x0800dd49
 800dd30:	0800dd51 	.word	0x0800dd51
 800dd34:	0800dd59 	.word	0x0800dd59
 800dd38:	0800dd85 	.word	0x0800dd85
 800dd3c:	0800dd8d 	.word	0x0800dd8d
 800dd40:	2300      	movs	r3, #0
 800dd42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd46:	e153      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd48:	2304      	movs	r3, #4
 800dd4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd4e:	e14f      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd50:	2308      	movs	r3, #8
 800dd52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd56:	e14b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd58:	2310      	movs	r3, #16
 800dd5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd5e:	e147      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd60:	cfff69f3 	.word	0xcfff69f3
 800dd64:	58000c00 	.word	0x58000c00
 800dd68:	11fff4ff 	.word	0x11fff4ff
 800dd6c:	40011000 	.word	0x40011000
 800dd70:	58024400 	.word	0x58024400
 800dd74:	40004400 	.word	0x40004400
 800dd78:	40004800 	.word	0x40004800
 800dd7c:	40004c00 	.word	0x40004c00
 800dd80:	40005000 	.word	0x40005000
 800dd84:	2320      	movs	r3, #32
 800dd86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd8a:	e131      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd8c:	2340      	movs	r3, #64	; 0x40
 800dd8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd92:	e12d      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd94:	2380      	movs	r3, #128	; 0x80
 800dd96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dd9a:	bf00      	nop
 800dd9c:	e128      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4ac3      	ldr	r2, [pc, #780]	; (800e0b0 <UART_SetConfig+0x698>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d178      	bne.n	800de9a <UART_SetConfig+0x482>
 800dda8:	4bc2      	ldr	r3, [pc, #776]	; (800e0b4 <UART_SetConfig+0x69c>)
 800ddaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ddb0:	2b28      	cmp	r3, #40	; 0x28
 800ddb2:	d86d      	bhi.n	800de90 <UART_SetConfig+0x478>
 800ddb4:	a201      	add	r2, pc, #4	; (adr r2, 800ddbc <UART_SetConfig+0x3a4>)
 800ddb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddba:	bf00      	nop
 800ddbc:	0800de61 	.word	0x0800de61
 800ddc0:	0800de91 	.word	0x0800de91
 800ddc4:	0800de91 	.word	0x0800de91
 800ddc8:	0800de91 	.word	0x0800de91
 800ddcc:	0800de91 	.word	0x0800de91
 800ddd0:	0800de91 	.word	0x0800de91
 800ddd4:	0800de91 	.word	0x0800de91
 800ddd8:	0800de91 	.word	0x0800de91
 800dddc:	0800de69 	.word	0x0800de69
 800dde0:	0800de91 	.word	0x0800de91
 800dde4:	0800de91 	.word	0x0800de91
 800dde8:	0800de91 	.word	0x0800de91
 800ddec:	0800de91 	.word	0x0800de91
 800ddf0:	0800de91 	.word	0x0800de91
 800ddf4:	0800de91 	.word	0x0800de91
 800ddf8:	0800de91 	.word	0x0800de91
 800ddfc:	0800de71 	.word	0x0800de71
 800de00:	0800de91 	.word	0x0800de91
 800de04:	0800de91 	.word	0x0800de91
 800de08:	0800de91 	.word	0x0800de91
 800de0c:	0800de91 	.word	0x0800de91
 800de10:	0800de91 	.word	0x0800de91
 800de14:	0800de91 	.word	0x0800de91
 800de18:	0800de91 	.word	0x0800de91
 800de1c:	0800de79 	.word	0x0800de79
 800de20:	0800de91 	.word	0x0800de91
 800de24:	0800de91 	.word	0x0800de91
 800de28:	0800de91 	.word	0x0800de91
 800de2c:	0800de91 	.word	0x0800de91
 800de30:	0800de91 	.word	0x0800de91
 800de34:	0800de91 	.word	0x0800de91
 800de38:	0800de91 	.word	0x0800de91
 800de3c:	0800de81 	.word	0x0800de81
 800de40:	0800de91 	.word	0x0800de91
 800de44:	0800de91 	.word	0x0800de91
 800de48:	0800de91 	.word	0x0800de91
 800de4c:	0800de91 	.word	0x0800de91
 800de50:	0800de91 	.word	0x0800de91
 800de54:	0800de91 	.word	0x0800de91
 800de58:	0800de91 	.word	0x0800de91
 800de5c:	0800de89 	.word	0x0800de89
 800de60:	2301      	movs	r3, #1
 800de62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de66:	e0c3      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800de68:	2304      	movs	r3, #4
 800de6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de6e:	e0bf      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800de70:	2308      	movs	r3, #8
 800de72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de76:	e0bb      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800de78:	2310      	movs	r3, #16
 800de7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de7e:	e0b7      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800de80:	2320      	movs	r3, #32
 800de82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de86:	e0b3      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800de88:	2340      	movs	r3, #64	; 0x40
 800de8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de8e:	e0af      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800de90:	2380      	movs	r3, #128	; 0x80
 800de92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800de96:	bf00      	nop
 800de98:	e0aa      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a86      	ldr	r2, [pc, #536]	; (800e0b8 <UART_SetConfig+0x6a0>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d132      	bne.n	800df0a <UART_SetConfig+0x4f2>
 800dea4:	4b83      	ldr	r3, [pc, #524]	; (800e0b4 <UART_SetConfig+0x69c>)
 800dea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dea8:	f003 0307 	and.w	r3, r3, #7
 800deac:	2b05      	cmp	r3, #5
 800deae:	d827      	bhi.n	800df00 <UART_SetConfig+0x4e8>
 800deb0:	a201      	add	r2, pc, #4	; (adr r2, 800deb8 <UART_SetConfig+0x4a0>)
 800deb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb6:	bf00      	nop
 800deb8:	0800ded1 	.word	0x0800ded1
 800debc:	0800ded9 	.word	0x0800ded9
 800dec0:	0800dee1 	.word	0x0800dee1
 800dec4:	0800dee9 	.word	0x0800dee9
 800dec8:	0800def1 	.word	0x0800def1
 800decc:	0800def9 	.word	0x0800def9
 800ded0:	2300      	movs	r3, #0
 800ded2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ded6:	e08b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800ded8:	2304      	movs	r3, #4
 800deda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dede:	e087      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dee0:	2308      	movs	r3, #8
 800dee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dee6:	e083      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dee8:	2310      	movs	r3, #16
 800deea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800deee:	e07f      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800def0:	2320      	movs	r3, #32
 800def2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800def6:	e07b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800def8:	2340      	movs	r3, #64	; 0x40
 800defa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800defe:	e077      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df00:	2380      	movs	r3, #128	; 0x80
 800df02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df06:	bf00      	nop
 800df08:	e072      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a6b      	ldr	r2, [pc, #428]	; (800e0bc <UART_SetConfig+0x6a4>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d132      	bne.n	800df7a <UART_SetConfig+0x562>
 800df14:	4b67      	ldr	r3, [pc, #412]	; (800e0b4 <UART_SetConfig+0x69c>)
 800df16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df18:	f003 0307 	and.w	r3, r3, #7
 800df1c:	2b05      	cmp	r3, #5
 800df1e:	d827      	bhi.n	800df70 <UART_SetConfig+0x558>
 800df20:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <UART_SetConfig+0x510>)
 800df22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df26:	bf00      	nop
 800df28:	0800df41 	.word	0x0800df41
 800df2c:	0800df49 	.word	0x0800df49
 800df30:	0800df51 	.word	0x0800df51
 800df34:	0800df59 	.word	0x0800df59
 800df38:	0800df61 	.word	0x0800df61
 800df3c:	0800df69 	.word	0x0800df69
 800df40:	2300      	movs	r3, #0
 800df42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df46:	e053      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df48:	2304      	movs	r3, #4
 800df4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df4e:	e04f      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df50:	2308      	movs	r3, #8
 800df52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df56:	e04b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df58:	2310      	movs	r3, #16
 800df5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df5e:	e047      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df60:	2320      	movs	r3, #32
 800df62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df66:	e043      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df68:	2340      	movs	r3, #64	; 0x40
 800df6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df6e:	e03f      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df70:	2380      	movs	r3, #128	; 0x80
 800df72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800df76:	bf00      	nop
 800df78:	e03a      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a50      	ldr	r2, [pc, #320]	; (800e0c0 <UART_SetConfig+0x6a8>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d132      	bne.n	800dfea <UART_SetConfig+0x5d2>
 800df84:	4b4b      	ldr	r3, [pc, #300]	; (800e0b4 <UART_SetConfig+0x69c>)
 800df86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df88:	f003 0307 	and.w	r3, r3, #7
 800df8c:	2b05      	cmp	r3, #5
 800df8e:	d827      	bhi.n	800dfe0 <UART_SetConfig+0x5c8>
 800df90:	a201      	add	r2, pc, #4	; (adr r2, 800df98 <UART_SetConfig+0x580>)
 800df92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df96:	bf00      	nop
 800df98:	0800dfb1 	.word	0x0800dfb1
 800df9c:	0800dfb9 	.word	0x0800dfb9
 800dfa0:	0800dfc1 	.word	0x0800dfc1
 800dfa4:	0800dfc9 	.word	0x0800dfc9
 800dfa8:	0800dfd1 	.word	0x0800dfd1
 800dfac:	0800dfd9 	.word	0x0800dfd9
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dfb6:	e01b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dfb8:	2304      	movs	r3, #4
 800dfba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dfbe:	e017      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dfc0:	2308      	movs	r3, #8
 800dfc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dfc6:	e013      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dfc8:	2310      	movs	r3, #16
 800dfca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dfce:	e00f      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dfd0:	2320      	movs	r3, #32
 800dfd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dfd6:	e00b      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dfd8:	2340      	movs	r3, #64	; 0x40
 800dfda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dfde:	e007      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dfe0:	2380      	movs	r3, #128	; 0x80
 800dfe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dfe6:	bf00      	nop
 800dfe8:	e002      	b.n	800dff0 <UART_SetConfig+0x5d8>
 800dfea:	2380      	movs	r3, #128	; 0x80
 800dfec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a32      	ldr	r2, [pc, #200]	; (800e0c0 <UART_SetConfig+0x6a8>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	f040 86f7 	bne.w	800edea <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dffc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e000:	2b08      	cmp	r3, #8
 800e002:	f000 80c0 	beq.w	800e186 <UART_SetConfig+0x76e>
 800e006:	2b08      	cmp	r3, #8
 800e008:	dc04      	bgt.n	800e014 <UART_SetConfig+0x5fc>
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	d00c      	beq.n	800e028 <UART_SetConfig+0x610>
 800e00e:	2b04      	cmp	r3, #4
 800e010:	d065      	beq.n	800e0de <UART_SetConfig+0x6c6>
 800e012:	e27a      	b.n	800e50a <UART_SetConfig+0xaf2>
 800e014:	2b20      	cmp	r3, #32
 800e016:	f000 81b0 	beq.w	800e37a <UART_SetConfig+0x962>
 800e01a:	2b40      	cmp	r3, #64	; 0x40
 800e01c:	f000 821e 	beq.w	800e45c <UART_SetConfig+0xa44>
 800e020:	2b10      	cmp	r3, #16
 800e022:	f000 8104 	beq.w	800e22e <UART_SetConfig+0x816>
 800e026:	e270      	b.n	800e50a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e028:	f7fc fab6 	bl	800a598 <HAL_RCCEx_GetD3PCLK1Freq>
 800e02c:	4602      	mov	r2, r0
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e032:	2b00      	cmp	r3, #0
 800e034:	d04e      	beq.n	800e0d4 <UART_SetConfig+0x6bc>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d048      	beq.n	800e0d0 <UART_SetConfig+0x6b8>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e042:	2b02      	cmp	r3, #2
 800e044:	d042      	beq.n	800e0cc <UART_SetConfig+0x6b4>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d03c      	beq.n	800e0c8 <UART_SetConfig+0x6b0>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e052:	2b04      	cmp	r3, #4
 800e054:	d036      	beq.n	800e0c4 <UART_SetConfig+0x6ac>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05a:	2b05      	cmp	r3, #5
 800e05c:	d026      	beq.n	800e0ac <UART_SetConfig+0x694>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e062:	2b06      	cmp	r3, #6
 800e064:	d020      	beq.n	800e0a8 <UART_SetConfig+0x690>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06a:	2b07      	cmp	r3, #7
 800e06c:	d01a      	beq.n	800e0a4 <UART_SetConfig+0x68c>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e072:	2b08      	cmp	r3, #8
 800e074:	d014      	beq.n	800e0a0 <UART_SetConfig+0x688>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07a:	2b09      	cmp	r3, #9
 800e07c:	d00e      	beq.n	800e09c <UART_SetConfig+0x684>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e082:	2b0a      	cmp	r3, #10
 800e084:	d008      	beq.n	800e098 <UART_SetConfig+0x680>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08a:	2b0b      	cmp	r3, #11
 800e08c:	d102      	bne.n	800e094 <UART_SetConfig+0x67c>
 800e08e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e092:	e020      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e094:	2301      	movs	r3, #1
 800e096:	e01e      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e098:	2380      	movs	r3, #128	; 0x80
 800e09a:	e01c      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e09c:	2340      	movs	r3, #64	; 0x40
 800e09e:	e01a      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0a0:	2320      	movs	r3, #32
 800e0a2:	e018      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0a4:	2310      	movs	r3, #16
 800e0a6:	e016      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0a8:	230c      	movs	r3, #12
 800e0aa:	e014      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0ac:	230a      	movs	r3, #10
 800e0ae:	e012      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0b0:	40011400 	.word	0x40011400
 800e0b4:	58024400 	.word	0x58024400
 800e0b8:	40007800 	.word	0x40007800
 800e0bc:	40007c00 	.word	0x40007c00
 800e0c0:	58000c00 	.word	0x58000c00
 800e0c4:	2308      	movs	r3, #8
 800e0c6:	e006      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0c8:	2306      	movs	r3, #6
 800e0ca:	e004      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0cc:	2304      	movs	r3, #4
 800e0ce:	e002      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0d0:	2302      	movs	r3, #2
 800e0d2:	e000      	b.n	800e0d6 <UART_SetConfig+0x6be>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0dc:	e219      	b.n	800e512 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0de:	f107 0318 	add.w	r3, r7, #24
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fc fa6e 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e0e8:	69fa      	ldr	r2, [r7, #28]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d044      	beq.n	800e17c <UART_SetConfig+0x764>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d03e      	beq.n	800e178 <UART_SetConfig+0x760>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d038      	beq.n	800e174 <UART_SetConfig+0x75c>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e106:	2b03      	cmp	r3, #3
 800e108:	d032      	beq.n	800e170 <UART_SetConfig+0x758>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	2b04      	cmp	r3, #4
 800e110:	d02c      	beq.n	800e16c <UART_SetConfig+0x754>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e116:	2b05      	cmp	r3, #5
 800e118:	d026      	beq.n	800e168 <UART_SetConfig+0x750>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11e:	2b06      	cmp	r3, #6
 800e120:	d020      	beq.n	800e164 <UART_SetConfig+0x74c>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e126:	2b07      	cmp	r3, #7
 800e128:	d01a      	beq.n	800e160 <UART_SetConfig+0x748>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12e:	2b08      	cmp	r3, #8
 800e130:	d014      	beq.n	800e15c <UART_SetConfig+0x744>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e136:	2b09      	cmp	r3, #9
 800e138:	d00e      	beq.n	800e158 <UART_SetConfig+0x740>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13e:	2b0a      	cmp	r3, #10
 800e140:	d008      	beq.n	800e154 <UART_SetConfig+0x73c>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e146:	2b0b      	cmp	r3, #11
 800e148:	d102      	bne.n	800e150 <UART_SetConfig+0x738>
 800e14a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e14e:	e016      	b.n	800e17e <UART_SetConfig+0x766>
 800e150:	2301      	movs	r3, #1
 800e152:	e014      	b.n	800e17e <UART_SetConfig+0x766>
 800e154:	2380      	movs	r3, #128	; 0x80
 800e156:	e012      	b.n	800e17e <UART_SetConfig+0x766>
 800e158:	2340      	movs	r3, #64	; 0x40
 800e15a:	e010      	b.n	800e17e <UART_SetConfig+0x766>
 800e15c:	2320      	movs	r3, #32
 800e15e:	e00e      	b.n	800e17e <UART_SetConfig+0x766>
 800e160:	2310      	movs	r3, #16
 800e162:	e00c      	b.n	800e17e <UART_SetConfig+0x766>
 800e164:	230c      	movs	r3, #12
 800e166:	e00a      	b.n	800e17e <UART_SetConfig+0x766>
 800e168:	230a      	movs	r3, #10
 800e16a:	e008      	b.n	800e17e <UART_SetConfig+0x766>
 800e16c:	2308      	movs	r3, #8
 800e16e:	e006      	b.n	800e17e <UART_SetConfig+0x766>
 800e170:	2306      	movs	r3, #6
 800e172:	e004      	b.n	800e17e <UART_SetConfig+0x766>
 800e174:	2304      	movs	r3, #4
 800e176:	e002      	b.n	800e17e <UART_SetConfig+0x766>
 800e178:	2302      	movs	r3, #2
 800e17a:	e000      	b.n	800e17e <UART_SetConfig+0x766>
 800e17c:	2301      	movs	r3, #1
 800e17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e184:	e1c5      	b.n	800e512 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e186:	f107 030c 	add.w	r3, r7, #12
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fc fb66 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e196:	2b00      	cmp	r3, #0
 800e198:	d044      	beq.n	800e224 <UART_SetConfig+0x80c>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d03e      	beq.n	800e220 <UART_SetConfig+0x808>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d038      	beq.n	800e21c <UART_SetConfig+0x804>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d032      	beq.n	800e218 <UART_SetConfig+0x800>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	d02c      	beq.n	800e214 <UART_SetConfig+0x7fc>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1be:	2b05      	cmp	r3, #5
 800e1c0:	d026      	beq.n	800e210 <UART_SetConfig+0x7f8>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c6:	2b06      	cmp	r3, #6
 800e1c8:	d020      	beq.n	800e20c <UART_SetConfig+0x7f4>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ce:	2b07      	cmp	r3, #7
 800e1d0:	d01a      	beq.n	800e208 <UART_SetConfig+0x7f0>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d6:	2b08      	cmp	r3, #8
 800e1d8:	d014      	beq.n	800e204 <UART_SetConfig+0x7ec>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1de:	2b09      	cmp	r3, #9
 800e1e0:	d00e      	beq.n	800e200 <UART_SetConfig+0x7e8>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e6:	2b0a      	cmp	r3, #10
 800e1e8:	d008      	beq.n	800e1fc <UART_SetConfig+0x7e4>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ee:	2b0b      	cmp	r3, #11
 800e1f0:	d102      	bne.n	800e1f8 <UART_SetConfig+0x7e0>
 800e1f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1f6:	e016      	b.n	800e226 <UART_SetConfig+0x80e>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e014      	b.n	800e226 <UART_SetConfig+0x80e>
 800e1fc:	2380      	movs	r3, #128	; 0x80
 800e1fe:	e012      	b.n	800e226 <UART_SetConfig+0x80e>
 800e200:	2340      	movs	r3, #64	; 0x40
 800e202:	e010      	b.n	800e226 <UART_SetConfig+0x80e>
 800e204:	2320      	movs	r3, #32
 800e206:	e00e      	b.n	800e226 <UART_SetConfig+0x80e>
 800e208:	2310      	movs	r3, #16
 800e20a:	e00c      	b.n	800e226 <UART_SetConfig+0x80e>
 800e20c:	230c      	movs	r3, #12
 800e20e:	e00a      	b.n	800e226 <UART_SetConfig+0x80e>
 800e210:	230a      	movs	r3, #10
 800e212:	e008      	b.n	800e226 <UART_SetConfig+0x80e>
 800e214:	2308      	movs	r3, #8
 800e216:	e006      	b.n	800e226 <UART_SetConfig+0x80e>
 800e218:	2306      	movs	r3, #6
 800e21a:	e004      	b.n	800e226 <UART_SetConfig+0x80e>
 800e21c:	2304      	movs	r3, #4
 800e21e:	e002      	b.n	800e226 <UART_SetConfig+0x80e>
 800e220:	2302      	movs	r3, #2
 800e222:	e000      	b.n	800e226 <UART_SetConfig+0x80e>
 800e224:	2301      	movs	r3, #1
 800e226:	fbb2 f3f3 	udiv	r3, r2, r3
 800e22a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e22c:	e171      	b.n	800e512 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e22e:	4b7a      	ldr	r3, [pc, #488]	; (800e418 <UART_SetConfig+0xa00>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 0320 	and.w	r3, r3, #32
 800e236:	2b00      	cmp	r3, #0
 800e238:	d054      	beq.n	800e2e4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e23a:	4b77      	ldr	r3, [pc, #476]	; (800e418 <UART_SetConfig+0xa00>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	08db      	lsrs	r3, r3, #3
 800e240:	f003 0303 	and.w	r3, r3, #3
 800e244:	4a75      	ldr	r2, [pc, #468]	; (800e41c <UART_SetConfig+0xa04>)
 800e246:	40da      	lsrs	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d044      	beq.n	800e2da <UART_SetConfig+0x8c2>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e254:	2b01      	cmp	r3, #1
 800e256:	d03e      	beq.n	800e2d6 <UART_SetConfig+0x8be>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d038      	beq.n	800e2d2 <UART_SetConfig+0x8ba>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e264:	2b03      	cmp	r3, #3
 800e266:	d032      	beq.n	800e2ce <UART_SetConfig+0x8b6>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26c:	2b04      	cmp	r3, #4
 800e26e:	d02c      	beq.n	800e2ca <UART_SetConfig+0x8b2>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	2b05      	cmp	r3, #5
 800e276:	d026      	beq.n	800e2c6 <UART_SetConfig+0x8ae>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	2b06      	cmp	r3, #6
 800e27e:	d020      	beq.n	800e2c2 <UART_SetConfig+0x8aa>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e284:	2b07      	cmp	r3, #7
 800e286:	d01a      	beq.n	800e2be <UART_SetConfig+0x8a6>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28c:	2b08      	cmp	r3, #8
 800e28e:	d014      	beq.n	800e2ba <UART_SetConfig+0x8a2>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e294:	2b09      	cmp	r3, #9
 800e296:	d00e      	beq.n	800e2b6 <UART_SetConfig+0x89e>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29c:	2b0a      	cmp	r3, #10
 800e29e:	d008      	beq.n	800e2b2 <UART_SetConfig+0x89a>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a4:	2b0b      	cmp	r3, #11
 800e2a6:	d102      	bne.n	800e2ae <UART_SetConfig+0x896>
 800e2a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2ac:	e016      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e014      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2b2:	2380      	movs	r3, #128	; 0x80
 800e2b4:	e012      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2b6:	2340      	movs	r3, #64	; 0x40
 800e2b8:	e010      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2ba:	2320      	movs	r3, #32
 800e2bc:	e00e      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2be:	2310      	movs	r3, #16
 800e2c0:	e00c      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2c2:	230c      	movs	r3, #12
 800e2c4:	e00a      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2c6:	230a      	movs	r3, #10
 800e2c8:	e008      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2ca:	2308      	movs	r3, #8
 800e2cc:	e006      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2ce:	2306      	movs	r3, #6
 800e2d0:	e004      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2d2:	2304      	movs	r3, #4
 800e2d4:	e002      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2d6:	2302      	movs	r3, #2
 800e2d8:	e000      	b.n	800e2dc <UART_SetConfig+0x8c4>
 800e2da:	2301      	movs	r3, #1
 800e2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800e2e2:	e116      	b.n	800e512 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d043      	beq.n	800e374 <UART_SetConfig+0x95c>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d03d      	beq.n	800e370 <UART_SetConfig+0x958>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f8:	2b02      	cmp	r3, #2
 800e2fa:	d037      	beq.n	800e36c <UART_SetConfig+0x954>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e300:	2b03      	cmp	r3, #3
 800e302:	d031      	beq.n	800e368 <UART_SetConfig+0x950>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e308:	2b04      	cmp	r3, #4
 800e30a:	d02b      	beq.n	800e364 <UART_SetConfig+0x94c>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e310:	2b05      	cmp	r3, #5
 800e312:	d025      	beq.n	800e360 <UART_SetConfig+0x948>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e318:	2b06      	cmp	r3, #6
 800e31a:	d01f      	beq.n	800e35c <UART_SetConfig+0x944>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e320:	2b07      	cmp	r3, #7
 800e322:	d019      	beq.n	800e358 <UART_SetConfig+0x940>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e328:	2b08      	cmp	r3, #8
 800e32a:	d013      	beq.n	800e354 <UART_SetConfig+0x93c>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e330:	2b09      	cmp	r3, #9
 800e332:	d00d      	beq.n	800e350 <UART_SetConfig+0x938>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e338:	2b0a      	cmp	r3, #10
 800e33a:	d007      	beq.n	800e34c <UART_SetConfig+0x934>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e340:	2b0b      	cmp	r3, #11
 800e342:	d101      	bne.n	800e348 <UART_SetConfig+0x930>
 800e344:	4b36      	ldr	r3, [pc, #216]	; (800e420 <UART_SetConfig+0xa08>)
 800e346:	e016      	b.n	800e376 <UART_SetConfig+0x95e>
 800e348:	4b34      	ldr	r3, [pc, #208]	; (800e41c <UART_SetConfig+0xa04>)
 800e34a:	e014      	b.n	800e376 <UART_SetConfig+0x95e>
 800e34c:	4b35      	ldr	r3, [pc, #212]	; (800e424 <UART_SetConfig+0xa0c>)
 800e34e:	e012      	b.n	800e376 <UART_SetConfig+0x95e>
 800e350:	4b35      	ldr	r3, [pc, #212]	; (800e428 <UART_SetConfig+0xa10>)
 800e352:	e010      	b.n	800e376 <UART_SetConfig+0x95e>
 800e354:	4b35      	ldr	r3, [pc, #212]	; (800e42c <UART_SetConfig+0xa14>)
 800e356:	e00e      	b.n	800e376 <UART_SetConfig+0x95e>
 800e358:	4b35      	ldr	r3, [pc, #212]	; (800e430 <UART_SetConfig+0xa18>)
 800e35a:	e00c      	b.n	800e376 <UART_SetConfig+0x95e>
 800e35c:	4b35      	ldr	r3, [pc, #212]	; (800e434 <UART_SetConfig+0xa1c>)
 800e35e:	e00a      	b.n	800e376 <UART_SetConfig+0x95e>
 800e360:	4b35      	ldr	r3, [pc, #212]	; (800e438 <UART_SetConfig+0xa20>)
 800e362:	e008      	b.n	800e376 <UART_SetConfig+0x95e>
 800e364:	4b35      	ldr	r3, [pc, #212]	; (800e43c <UART_SetConfig+0xa24>)
 800e366:	e006      	b.n	800e376 <UART_SetConfig+0x95e>
 800e368:	4b35      	ldr	r3, [pc, #212]	; (800e440 <UART_SetConfig+0xa28>)
 800e36a:	e004      	b.n	800e376 <UART_SetConfig+0x95e>
 800e36c:	4b35      	ldr	r3, [pc, #212]	; (800e444 <UART_SetConfig+0xa2c>)
 800e36e:	e002      	b.n	800e376 <UART_SetConfig+0x95e>
 800e370:	4b35      	ldr	r3, [pc, #212]	; (800e448 <UART_SetConfig+0xa30>)
 800e372:	e000      	b.n	800e376 <UART_SetConfig+0x95e>
 800e374:	4b29      	ldr	r3, [pc, #164]	; (800e41c <UART_SetConfig+0xa04>)
 800e376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e378:	e0cb      	b.n	800e512 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d046      	beq.n	800e410 <UART_SetConfig+0x9f8>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e386:	2b01      	cmp	r3, #1
 800e388:	d040      	beq.n	800e40c <UART_SetConfig+0x9f4>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d03a      	beq.n	800e408 <UART_SetConfig+0x9f0>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e396:	2b03      	cmp	r3, #3
 800e398:	d034      	beq.n	800e404 <UART_SetConfig+0x9ec>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d02e      	beq.n	800e400 <UART_SetConfig+0x9e8>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a6:	2b05      	cmp	r3, #5
 800e3a8:	d028      	beq.n	800e3fc <UART_SetConfig+0x9e4>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ae:	2b06      	cmp	r3, #6
 800e3b0:	d022      	beq.n	800e3f8 <UART_SetConfig+0x9e0>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b6:	2b07      	cmp	r3, #7
 800e3b8:	d01c      	beq.n	800e3f4 <UART_SetConfig+0x9dc>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3be:	2b08      	cmp	r3, #8
 800e3c0:	d016      	beq.n	800e3f0 <UART_SetConfig+0x9d8>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c6:	2b09      	cmp	r3, #9
 800e3c8:	d00f      	beq.n	800e3ea <UART_SetConfig+0x9d2>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ce:	2b0a      	cmp	r3, #10
 800e3d0:	d008      	beq.n	800e3e4 <UART_SetConfig+0x9cc>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d6:	2b0b      	cmp	r3, #11
 800e3d8:	d102      	bne.n	800e3e0 <UART_SetConfig+0x9c8>
 800e3da:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e3de:	e018      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e3e0:	4b13      	ldr	r3, [pc, #76]	; (800e430 <UART_SetConfig+0xa18>)
 800e3e2:	e016      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e3e4:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e3e8:	e013      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e3ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e3ee:	e010      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e3f0:	4b16      	ldr	r3, [pc, #88]	; (800e44c <UART_SetConfig+0xa34>)
 800e3f2:	e00e      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e3f4:	4b0a      	ldr	r3, [pc, #40]	; (800e420 <UART_SetConfig+0xa08>)
 800e3f6:	e00c      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e3f8:	4b15      	ldr	r3, [pc, #84]	; (800e450 <UART_SetConfig+0xa38>)
 800e3fa:	e00a      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e3fc:	4b15      	ldr	r3, [pc, #84]	; (800e454 <UART_SetConfig+0xa3c>)
 800e3fe:	e008      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e400:	4b08      	ldr	r3, [pc, #32]	; (800e424 <UART_SetConfig+0xa0c>)
 800e402:	e006      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e404:	4b14      	ldr	r3, [pc, #80]	; (800e458 <UART_SetConfig+0xa40>)
 800e406:	e004      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e408:	4b07      	ldr	r3, [pc, #28]	; (800e428 <UART_SetConfig+0xa10>)
 800e40a:	e002      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e40c:	4b07      	ldr	r3, [pc, #28]	; (800e42c <UART_SetConfig+0xa14>)
 800e40e:	e000      	b.n	800e412 <UART_SetConfig+0x9fa>
 800e410:	4b07      	ldr	r3, [pc, #28]	; (800e430 <UART_SetConfig+0xa18>)
 800e412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e414:	e07d      	b.n	800e512 <UART_SetConfig+0xafa>
 800e416:	bf00      	nop
 800e418:	58024400 	.word	0x58024400
 800e41c:	03d09000 	.word	0x03d09000
 800e420:	0003d090 	.word	0x0003d090
 800e424:	0007a120 	.word	0x0007a120
 800e428:	000f4240 	.word	0x000f4240
 800e42c:	001e8480 	.word	0x001e8480
 800e430:	003d0900 	.word	0x003d0900
 800e434:	00516155 	.word	0x00516155
 800e438:	0061a800 	.word	0x0061a800
 800e43c:	007a1200 	.word	0x007a1200
 800e440:	00a2c2aa 	.word	0x00a2c2aa
 800e444:	00f42400 	.word	0x00f42400
 800e448:	01e84800 	.word	0x01e84800
 800e44c:	0001e848 	.word	0x0001e848
 800e450:	00051615 	.word	0x00051615
 800e454:	00061a80 	.word	0x00061a80
 800e458:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e460:	2b00      	cmp	r3, #0
 800e462:	d04e      	beq.n	800e502 <UART_SetConfig+0xaea>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d047      	beq.n	800e4fc <UART_SetConfig+0xae4>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e470:	2b02      	cmp	r3, #2
 800e472:	d040      	beq.n	800e4f6 <UART_SetConfig+0xade>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e478:	2b03      	cmp	r3, #3
 800e47a:	d039      	beq.n	800e4f0 <UART_SetConfig+0xad8>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e480:	2b04      	cmp	r3, #4
 800e482:	d032      	beq.n	800e4ea <UART_SetConfig+0xad2>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e488:	2b05      	cmp	r3, #5
 800e48a:	d02b      	beq.n	800e4e4 <UART_SetConfig+0xacc>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e490:	2b06      	cmp	r3, #6
 800e492:	d024      	beq.n	800e4de <UART_SetConfig+0xac6>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e498:	2b07      	cmp	r3, #7
 800e49a:	d01d      	beq.n	800e4d8 <UART_SetConfig+0xac0>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a0:	2b08      	cmp	r3, #8
 800e4a2:	d016      	beq.n	800e4d2 <UART_SetConfig+0xaba>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a8:	2b09      	cmp	r3, #9
 800e4aa:	d00f      	beq.n	800e4cc <UART_SetConfig+0xab4>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b0:	2b0a      	cmp	r3, #10
 800e4b2:	d008      	beq.n	800e4c6 <UART_SetConfig+0xaae>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b8:	2b0b      	cmp	r3, #11
 800e4ba:	d101      	bne.n	800e4c0 <UART_SetConfig+0xaa8>
 800e4bc:	2380      	movs	r3, #128	; 0x80
 800e4be:	e022      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4c4:	e01f      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4ca:	e01c      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4d0:	e019      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4d6:	e016      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4dc:	e013      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4de:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800e4e2:	e010      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4e4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800e4e8:	e00d      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4ee:	e00a      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4f0:	f241 5355 	movw	r3, #5461	; 0x1555
 800e4f4:	e007      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e4fa:	e004      	b.n	800e506 <UART_SetConfig+0xaee>
 800e4fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e500:	e001      	b.n	800e506 <UART_SetConfig+0xaee>
 800e502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e508:	e003      	b.n	800e512 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800e510:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e514:	2b00      	cmp	r3, #0
 800e516:	f001 83e8 	beq.w	800fcea <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	4613      	mov	r3, r2
 800e520:	005b      	lsls	r3, r3, #1
 800e522:	4413      	add	r3, r2
 800e524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e526:	429a      	cmp	r2, r3
 800e528:	d305      	bcc.n	800e536 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e532:	429a      	cmp	r2, r3
 800e534:	d904      	bls.n	800e540 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800e536:	2301      	movs	r3, #1
 800e538:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e53c:	f001 bbd5 	b.w	800fcea <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800e540:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e544:	2b08      	cmp	r3, #8
 800e546:	f000 8154 	beq.w	800e7f2 <UART_SetConfig+0xdda>
 800e54a:	2b08      	cmp	r3, #8
 800e54c:	dc06      	bgt.n	800e55c <UART_SetConfig+0xb44>
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d00f      	beq.n	800e572 <UART_SetConfig+0xb5a>
 800e552:	2b04      	cmp	r3, #4
 800e554:	f000 80ac 	beq.w	800e6b0 <UART_SetConfig+0xc98>
 800e558:	f000 bc30 	b.w	800edbc <UART_SetConfig+0x13a4>
 800e55c:	2b20      	cmp	r3, #32
 800e55e:	f000 832d 	beq.w	800ebbc <UART_SetConfig+0x11a4>
 800e562:	2b40      	cmp	r3, #64	; 0x40
 800e564:	f000 83a5 	beq.w	800ecb2 <UART_SetConfig+0x129a>
 800e568:	2b10      	cmp	r3, #16
 800e56a:	f000 81e3 	beq.w	800e934 <UART_SetConfig+0xf1c>
 800e56e:	f000 bc25 	b.w	800edbc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e572:	f7fc f811 	bl	800a598 <HAL_RCCEx_GetD3PCLK1Freq>
 800e576:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57a:	4618      	mov	r0, r3
 800e57c:	f04f 0100 	mov.w	r1, #0
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e584:	2b00      	cmp	r3, #0
 800e586:	d067      	beq.n	800e658 <UART_SetConfig+0xc40>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d05e      	beq.n	800e64e <UART_SetConfig+0xc36>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e594:	2b02      	cmp	r3, #2
 800e596:	d055      	beq.n	800e644 <UART_SetConfig+0xc2c>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59c:	2b03      	cmp	r3, #3
 800e59e:	d04c      	beq.n	800e63a <UART_SetConfig+0xc22>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a4:	2b04      	cmp	r3, #4
 800e5a6:	d043      	beq.n	800e630 <UART_SetConfig+0xc18>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ac:	2b05      	cmp	r3, #5
 800e5ae:	d03a      	beq.n	800e626 <UART_SetConfig+0xc0e>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b4:	2b06      	cmp	r3, #6
 800e5b6:	d031      	beq.n	800e61c <UART_SetConfig+0xc04>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5bc:	2b07      	cmp	r3, #7
 800e5be:	d028      	beq.n	800e612 <UART_SetConfig+0xbfa>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c4:	2b08      	cmp	r3, #8
 800e5c6:	d01f      	beq.n	800e608 <UART_SetConfig+0xbf0>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5cc:	2b09      	cmp	r3, #9
 800e5ce:	d016      	beq.n	800e5fe <UART_SetConfig+0xbe6>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	2b0a      	cmp	r3, #10
 800e5d6:	d00d      	beq.n	800e5f4 <UART_SetConfig+0xbdc>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5dc:	2b0b      	cmp	r3, #11
 800e5de:	d104      	bne.n	800e5ea <UART_SetConfig+0xbd2>
 800e5e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5e4:	f04f 0400 	mov.w	r4, #0
 800e5e8:	e03a      	b.n	800e660 <UART_SetConfig+0xc48>
 800e5ea:	f04f 0301 	mov.w	r3, #1
 800e5ee:	f04f 0400 	mov.w	r4, #0
 800e5f2:	e035      	b.n	800e660 <UART_SetConfig+0xc48>
 800e5f4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e5f8:	f04f 0400 	mov.w	r4, #0
 800e5fc:	e030      	b.n	800e660 <UART_SetConfig+0xc48>
 800e5fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e602:	f04f 0400 	mov.w	r4, #0
 800e606:	e02b      	b.n	800e660 <UART_SetConfig+0xc48>
 800e608:	f04f 0320 	mov.w	r3, #32
 800e60c:	f04f 0400 	mov.w	r4, #0
 800e610:	e026      	b.n	800e660 <UART_SetConfig+0xc48>
 800e612:	f04f 0310 	mov.w	r3, #16
 800e616:	f04f 0400 	mov.w	r4, #0
 800e61a:	e021      	b.n	800e660 <UART_SetConfig+0xc48>
 800e61c:	f04f 030c 	mov.w	r3, #12
 800e620:	f04f 0400 	mov.w	r4, #0
 800e624:	e01c      	b.n	800e660 <UART_SetConfig+0xc48>
 800e626:	f04f 030a 	mov.w	r3, #10
 800e62a:	f04f 0400 	mov.w	r4, #0
 800e62e:	e017      	b.n	800e660 <UART_SetConfig+0xc48>
 800e630:	f04f 0308 	mov.w	r3, #8
 800e634:	f04f 0400 	mov.w	r4, #0
 800e638:	e012      	b.n	800e660 <UART_SetConfig+0xc48>
 800e63a:	f04f 0306 	mov.w	r3, #6
 800e63e:	f04f 0400 	mov.w	r4, #0
 800e642:	e00d      	b.n	800e660 <UART_SetConfig+0xc48>
 800e644:	f04f 0304 	mov.w	r3, #4
 800e648:	f04f 0400 	mov.w	r4, #0
 800e64c:	e008      	b.n	800e660 <UART_SetConfig+0xc48>
 800e64e:	f04f 0302 	mov.w	r3, #2
 800e652:	f04f 0400 	mov.w	r4, #0
 800e656:	e003      	b.n	800e660 <UART_SetConfig+0xc48>
 800e658:	f04f 0301 	mov.w	r3, #1
 800e65c:	f04f 0400 	mov.w	r4, #0
 800e660:	461a      	mov	r2, r3
 800e662:	4623      	mov	r3, r4
 800e664:	f7f1 fe38 	bl	80002d8 <__aeabi_uldivmod>
 800e668:	4603      	mov	r3, r0
 800e66a:	460c      	mov	r4, r1
 800e66c:	4619      	mov	r1, r3
 800e66e:	4622      	mov	r2, r4
 800e670:	f04f 0300 	mov.w	r3, #0
 800e674:	f04f 0400 	mov.w	r4, #0
 800e678:	0214      	lsls	r4, r2, #8
 800e67a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e67e:	020b      	lsls	r3, r1, #8
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	6852      	ldr	r2, [r2, #4]
 800e684:	0852      	lsrs	r2, r2, #1
 800e686:	4611      	mov	r1, r2
 800e688:	f04f 0200 	mov.w	r2, #0
 800e68c:	eb13 0b01 	adds.w	fp, r3, r1
 800e690:	eb44 0c02 	adc.w	ip, r4, r2
 800e694:	4658      	mov	r0, fp
 800e696:	4661      	mov	r1, ip
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	f04f 0400 	mov.w	r4, #0
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	4623      	mov	r3, r4
 800e6a4:	f7f1 fe18 	bl	80002d8 <__aeabi_uldivmod>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e6ae:	e389      	b.n	800edc4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6b0:	f107 0318 	add.w	r3, r7, #24
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fb ff85 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f04f 0100 	mov.w	r1, #0
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d067      	beq.n	800e79a <UART_SetConfig+0xd82>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d05e      	beq.n	800e790 <UART_SetConfig+0xd78>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d055      	beq.n	800e786 <UART_SetConfig+0xd6e>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6de:	2b03      	cmp	r3, #3
 800e6e0:	d04c      	beq.n	800e77c <UART_SetConfig+0xd64>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e6:	2b04      	cmp	r3, #4
 800e6e8:	d043      	beq.n	800e772 <UART_SetConfig+0xd5a>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ee:	2b05      	cmp	r3, #5
 800e6f0:	d03a      	beq.n	800e768 <UART_SetConfig+0xd50>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f6:	2b06      	cmp	r3, #6
 800e6f8:	d031      	beq.n	800e75e <UART_SetConfig+0xd46>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fe:	2b07      	cmp	r3, #7
 800e700:	d028      	beq.n	800e754 <UART_SetConfig+0xd3c>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e706:	2b08      	cmp	r3, #8
 800e708:	d01f      	beq.n	800e74a <UART_SetConfig+0xd32>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70e:	2b09      	cmp	r3, #9
 800e710:	d016      	beq.n	800e740 <UART_SetConfig+0xd28>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e716:	2b0a      	cmp	r3, #10
 800e718:	d00d      	beq.n	800e736 <UART_SetConfig+0xd1e>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71e:	2b0b      	cmp	r3, #11
 800e720:	d104      	bne.n	800e72c <UART_SetConfig+0xd14>
 800e722:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e726:	f04f 0400 	mov.w	r4, #0
 800e72a:	e03a      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e72c:	f04f 0301 	mov.w	r3, #1
 800e730:	f04f 0400 	mov.w	r4, #0
 800e734:	e035      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e736:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e73a:	f04f 0400 	mov.w	r4, #0
 800e73e:	e030      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e740:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e744:	f04f 0400 	mov.w	r4, #0
 800e748:	e02b      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e74a:	f04f 0320 	mov.w	r3, #32
 800e74e:	f04f 0400 	mov.w	r4, #0
 800e752:	e026      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e754:	f04f 0310 	mov.w	r3, #16
 800e758:	f04f 0400 	mov.w	r4, #0
 800e75c:	e021      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e75e:	f04f 030c 	mov.w	r3, #12
 800e762:	f04f 0400 	mov.w	r4, #0
 800e766:	e01c      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e768:	f04f 030a 	mov.w	r3, #10
 800e76c:	f04f 0400 	mov.w	r4, #0
 800e770:	e017      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e772:	f04f 0308 	mov.w	r3, #8
 800e776:	f04f 0400 	mov.w	r4, #0
 800e77a:	e012      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e77c:	f04f 0306 	mov.w	r3, #6
 800e780:	f04f 0400 	mov.w	r4, #0
 800e784:	e00d      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e786:	f04f 0304 	mov.w	r3, #4
 800e78a:	f04f 0400 	mov.w	r4, #0
 800e78e:	e008      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e790:	f04f 0302 	mov.w	r3, #2
 800e794:	f04f 0400 	mov.w	r4, #0
 800e798:	e003      	b.n	800e7a2 <UART_SetConfig+0xd8a>
 800e79a:	f04f 0301 	mov.w	r3, #1
 800e79e:	f04f 0400 	mov.w	r4, #0
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	4623      	mov	r3, r4
 800e7a6:	f7f1 fd97 	bl	80002d8 <__aeabi_uldivmod>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	4622      	mov	r2, r4
 800e7b2:	f04f 0300 	mov.w	r3, #0
 800e7b6:	f04f 0400 	mov.w	r4, #0
 800e7ba:	0214      	lsls	r4, r2, #8
 800e7bc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e7c0:	020b      	lsls	r3, r1, #8
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	6852      	ldr	r2, [r2, #4]
 800e7c6:	0852      	lsrs	r2, r2, #1
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	f04f 0200 	mov.w	r2, #0
 800e7ce:	eb13 0b01 	adds.w	fp, r3, r1
 800e7d2:	eb44 0c02 	adc.w	ip, r4, r2
 800e7d6:	4658      	mov	r0, fp
 800e7d8:	4661      	mov	r1, ip
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	f04f 0400 	mov.w	r4, #0
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	4623      	mov	r3, r4
 800e7e6:	f7f1 fd77 	bl	80002d8 <__aeabi_uldivmod>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	460c      	mov	r4, r1
 800e7ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e7f0:	e2e8      	b.n	800edc4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7f2:	f107 030c 	add.w	r3, r7, #12
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fc f830 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f04f 0100 	mov.w	r1, #0
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d067      	beq.n	800e8dc <UART_SetConfig+0xec4>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e810:	2b01      	cmp	r3, #1
 800e812:	d05e      	beq.n	800e8d2 <UART_SetConfig+0xeba>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e818:	2b02      	cmp	r3, #2
 800e81a:	d055      	beq.n	800e8c8 <UART_SetConfig+0xeb0>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e820:	2b03      	cmp	r3, #3
 800e822:	d04c      	beq.n	800e8be <UART_SetConfig+0xea6>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e828:	2b04      	cmp	r3, #4
 800e82a:	d043      	beq.n	800e8b4 <UART_SetConfig+0xe9c>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e830:	2b05      	cmp	r3, #5
 800e832:	d03a      	beq.n	800e8aa <UART_SetConfig+0xe92>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e838:	2b06      	cmp	r3, #6
 800e83a:	d031      	beq.n	800e8a0 <UART_SetConfig+0xe88>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e840:	2b07      	cmp	r3, #7
 800e842:	d028      	beq.n	800e896 <UART_SetConfig+0xe7e>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e848:	2b08      	cmp	r3, #8
 800e84a:	d01f      	beq.n	800e88c <UART_SetConfig+0xe74>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e850:	2b09      	cmp	r3, #9
 800e852:	d016      	beq.n	800e882 <UART_SetConfig+0xe6a>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e858:	2b0a      	cmp	r3, #10
 800e85a:	d00d      	beq.n	800e878 <UART_SetConfig+0xe60>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e860:	2b0b      	cmp	r3, #11
 800e862:	d104      	bne.n	800e86e <UART_SetConfig+0xe56>
 800e864:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e868:	f04f 0400 	mov.w	r4, #0
 800e86c:	e03a      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e86e:	f04f 0301 	mov.w	r3, #1
 800e872:	f04f 0400 	mov.w	r4, #0
 800e876:	e035      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e878:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e87c:	f04f 0400 	mov.w	r4, #0
 800e880:	e030      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e882:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e886:	f04f 0400 	mov.w	r4, #0
 800e88a:	e02b      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e88c:	f04f 0320 	mov.w	r3, #32
 800e890:	f04f 0400 	mov.w	r4, #0
 800e894:	e026      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e896:	f04f 0310 	mov.w	r3, #16
 800e89a:	f04f 0400 	mov.w	r4, #0
 800e89e:	e021      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e8a0:	f04f 030c 	mov.w	r3, #12
 800e8a4:	f04f 0400 	mov.w	r4, #0
 800e8a8:	e01c      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e8aa:	f04f 030a 	mov.w	r3, #10
 800e8ae:	f04f 0400 	mov.w	r4, #0
 800e8b2:	e017      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e8b4:	f04f 0308 	mov.w	r3, #8
 800e8b8:	f04f 0400 	mov.w	r4, #0
 800e8bc:	e012      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e8be:	f04f 0306 	mov.w	r3, #6
 800e8c2:	f04f 0400 	mov.w	r4, #0
 800e8c6:	e00d      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e8c8:	f04f 0304 	mov.w	r3, #4
 800e8cc:	f04f 0400 	mov.w	r4, #0
 800e8d0:	e008      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e8d2:	f04f 0302 	mov.w	r3, #2
 800e8d6:	f04f 0400 	mov.w	r4, #0
 800e8da:	e003      	b.n	800e8e4 <UART_SetConfig+0xecc>
 800e8dc:	f04f 0301 	mov.w	r3, #1
 800e8e0:	f04f 0400 	mov.w	r4, #0
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	4623      	mov	r3, r4
 800e8e8:	f7f1 fcf6 	bl	80002d8 <__aeabi_uldivmod>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4622      	mov	r2, r4
 800e8f4:	f04f 0300 	mov.w	r3, #0
 800e8f8:	f04f 0400 	mov.w	r4, #0
 800e8fc:	0214      	lsls	r4, r2, #8
 800e8fe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e902:	020b      	lsls	r3, r1, #8
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	6852      	ldr	r2, [r2, #4]
 800e908:	0852      	lsrs	r2, r2, #1
 800e90a:	4611      	mov	r1, r2
 800e90c:	f04f 0200 	mov.w	r2, #0
 800e910:	eb13 0b01 	adds.w	fp, r3, r1
 800e914:	eb44 0c02 	adc.w	ip, r4, r2
 800e918:	4658      	mov	r0, fp
 800e91a:	4661      	mov	r1, ip
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	f04f 0400 	mov.w	r4, #0
 800e924:	461a      	mov	r2, r3
 800e926:	4623      	mov	r3, r4
 800e928:	f7f1 fcd6 	bl	80002d8 <__aeabi_uldivmod>
 800e92c:	4603      	mov	r3, r0
 800e92e:	460c      	mov	r4, r1
 800e930:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e932:	e247      	b.n	800edc4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e934:	4b96      	ldr	r3, [pc, #600]	; (800eb90 <UART_SetConfig+0x1178>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f003 0320 	and.w	r3, r3, #32
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 80a3 	beq.w	800ea88 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e942:	4b93      	ldr	r3, [pc, #588]	; (800eb90 <UART_SetConfig+0x1178>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	08db      	lsrs	r3, r3, #3
 800e948:	f003 0303 	and.w	r3, r3, #3
 800e94c:	4a91      	ldr	r2, [pc, #580]	; (800eb94 <UART_SetConfig+0x117c>)
 800e94e:	fa22 f303 	lsr.w	r3, r2, r3
 800e952:	4618      	mov	r0, r3
 800e954:	f04f 0100 	mov.w	r1, #0
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d067      	beq.n	800ea30 <UART_SetConfig+0x1018>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e964:	2b01      	cmp	r3, #1
 800e966:	d05e      	beq.n	800ea26 <UART_SetConfig+0x100e>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d055      	beq.n	800ea1c <UART_SetConfig+0x1004>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e974:	2b03      	cmp	r3, #3
 800e976:	d04c      	beq.n	800ea12 <UART_SetConfig+0xffa>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e97c:	2b04      	cmp	r3, #4
 800e97e:	d043      	beq.n	800ea08 <UART_SetConfig+0xff0>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e984:	2b05      	cmp	r3, #5
 800e986:	d03a      	beq.n	800e9fe <UART_SetConfig+0xfe6>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98c:	2b06      	cmp	r3, #6
 800e98e:	d031      	beq.n	800e9f4 <UART_SetConfig+0xfdc>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e994:	2b07      	cmp	r3, #7
 800e996:	d028      	beq.n	800e9ea <UART_SetConfig+0xfd2>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99c:	2b08      	cmp	r3, #8
 800e99e:	d01f      	beq.n	800e9e0 <UART_SetConfig+0xfc8>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a4:	2b09      	cmp	r3, #9
 800e9a6:	d016      	beq.n	800e9d6 <UART_SetConfig+0xfbe>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ac:	2b0a      	cmp	r3, #10
 800e9ae:	d00d      	beq.n	800e9cc <UART_SetConfig+0xfb4>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	2b0b      	cmp	r3, #11
 800e9b6:	d104      	bne.n	800e9c2 <UART_SetConfig+0xfaa>
 800e9b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9bc:	f04f 0400 	mov.w	r4, #0
 800e9c0:	e03a      	b.n	800ea38 <UART_SetConfig+0x1020>
 800e9c2:	f04f 0301 	mov.w	r3, #1
 800e9c6:	f04f 0400 	mov.w	r4, #0
 800e9ca:	e035      	b.n	800ea38 <UART_SetConfig+0x1020>
 800e9cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e9d0:	f04f 0400 	mov.w	r4, #0
 800e9d4:	e030      	b.n	800ea38 <UART_SetConfig+0x1020>
 800e9d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e9da:	f04f 0400 	mov.w	r4, #0
 800e9de:	e02b      	b.n	800ea38 <UART_SetConfig+0x1020>
 800e9e0:	f04f 0320 	mov.w	r3, #32
 800e9e4:	f04f 0400 	mov.w	r4, #0
 800e9e8:	e026      	b.n	800ea38 <UART_SetConfig+0x1020>
 800e9ea:	f04f 0310 	mov.w	r3, #16
 800e9ee:	f04f 0400 	mov.w	r4, #0
 800e9f2:	e021      	b.n	800ea38 <UART_SetConfig+0x1020>
 800e9f4:	f04f 030c 	mov.w	r3, #12
 800e9f8:	f04f 0400 	mov.w	r4, #0
 800e9fc:	e01c      	b.n	800ea38 <UART_SetConfig+0x1020>
 800e9fe:	f04f 030a 	mov.w	r3, #10
 800ea02:	f04f 0400 	mov.w	r4, #0
 800ea06:	e017      	b.n	800ea38 <UART_SetConfig+0x1020>
 800ea08:	f04f 0308 	mov.w	r3, #8
 800ea0c:	f04f 0400 	mov.w	r4, #0
 800ea10:	e012      	b.n	800ea38 <UART_SetConfig+0x1020>
 800ea12:	f04f 0306 	mov.w	r3, #6
 800ea16:	f04f 0400 	mov.w	r4, #0
 800ea1a:	e00d      	b.n	800ea38 <UART_SetConfig+0x1020>
 800ea1c:	f04f 0304 	mov.w	r3, #4
 800ea20:	f04f 0400 	mov.w	r4, #0
 800ea24:	e008      	b.n	800ea38 <UART_SetConfig+0x1020>
 800ea26:	f04f 0302 	mov.w	r3, #2
 800ea2a:	f04f 0400 	mov.w	r4, #0
 800ea2e:	e003      	b.n	800ea38 <UART_SetConfig+0x1020>
 800ea30:	f04f 0301 	mov.w	r3, #1
 800ea34:	f04f 0400 	mov.w	r4, #0
 800ea38:	461a      	mov	r2, r3
 800ea3a:	4623      	mov	r3, r4
 800ea3c:	f7f1 fc4c 	bl	80002d8 <__aeabi_uldivmod>
 800ea40:	4603      	mov	r3, r0
 800ea42:	460c      	mov	r4, r1
 800ea44:	4619      	mov	r1, r3
 800ea46:	4622      	mov	r2, r4
 800ea48:	f04f 0300 	mov.w	r3, #0
 800ea4c:	f04f 0400 	mov.w	r4, #0
 800ea50:	0214      	lsls	r4, r2, #8
 800ea52:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ea56:	020b      	lsls	r3, r1, #8
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	6852      	ldr	r2, [r2, #4]
 800ea5c:	0852      	lsrs	r2, r2, #1
 800ea5e:	4611      	mov	r1, r2
 800ea60:	f04f 0200 	mov.w	r2, #0
 800ea64:	eb13 0b01 	adds.w	fp, r3, r1
 800ea68:	eb44 0c02 	adc.w	ip, r4, r2
 800ea6c:	4658      	mov	r0, fp
 800ea6e:	4661      	mov	r1, ip
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	f04f 0400 	mov.w	r4, #0
 800ea78:	461a      	mov	r2, r3
 800ea7a:	4623      	mov	r3, r4
 800ea7c:	f7f1 fc2c 	bl	80002d8 <__aeabi_uldivmod>
 800ea80:	4603      	mov	r3, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800ea86:	e19d      	b.n	800edc4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d05b      	beq.n	800eb48 <UART_SetConfig+0x1130>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d053      	beq.n	800eb40 <UART_SetConfig+0x1128>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	d04b      	beq.n	800eb38 <UART_SetConfig+0x1120>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa4:	2b03      	cmp	r3, #3
 800eaa6:	d043      	beq.n	800eb30 <UART_SetConfig+0x1118>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaac:	2b04      	cmp	r3, #4
 800eaae:	d03b      	beq.n	800eb28 <UART_SetConfig+0x1110>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab4:	2b05      	cmp	r3, #5
 800eab6:	d033      	beq.n	800eb20 <UART_SetConfig+0x1108>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eabc:	2b06      	cmp	r3, #6
 800eabe:	d02b      	beq.n	800eb18 <UART_SetConfig+0x1100>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac4:	2b07      	cmp	r3, #7
 800eac6:	d023      	beq.n	800eb10 <UART_SetConfig+0x10f8>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eacc:	2b08      	cmp	r3, #8
 800eace:	d01b      	beq.n	800eb08 <UART_SetConfig+0x10f0>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead4:	2b09      	cmp	r3, #9
 800ead6:	d013      	beq.n	800eb00 <UART_SetConfig+0x10e8>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eadc:	2b0a      	cmp	r3, #10
 800eade:	d00b      	beq.n	800eaf8 <UART_SetConfig+0x10e0>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae4:	2b0b      	cmp	r3, #11
 800eae6:	d103      	bne.n	800eaf0 <UART_SetConfig+0x10d8>
 800eae8:	4b2a      	ldr	r3, [pc, #168]	; (800eb94 <UART_SetConfig+0x117c>)
 800eaea:	f04f 0400 	mov.w	r4, #0
 800eaee:	e02e      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eaf0:	4b29      	ldr	r3, [pc, #164]	; (800eb98 <UART_SetConfig+0x1180>)
 800eaf2:	f04f 0403 	mov.w	r4, #3
 800eaf6:	e02a      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eaf8:	4b28      	ldr	r3, [pc, #160]	; (800eb9c <UART_SetConfig+0x1184>)
 800eafa:	f04f 0400 	mov.w	r4, #0
 800eafe:	e026      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb00:	4b27      	ldr	r3, [pc, #156]	; (800eba0 <UART_SetConfig+0x1188>)
 800eb02:	f04f 0400 	mov.w	r4, #0
 800eb06:	e022      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb08:	4b26      	ldr	r3, [pc, #152]	; (800eba4 <UART_SetConfig+0x118c>)
 800eb0a:	f04f 0400 	mov.w	r4, #0
 800eb0e:	e01e      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb10:	4b25      	ldr	r3, [pc, #148]	; (800eba8 <UART_SetConfig+0x1190>)
 800eb12:	f04f 0400 	mov.w	r4, #0
 800eb16:	e01a      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb18:	a419      	add	r4, pc, #100	; (adr r4, 800eb80 <UART_SetConfig+0x1168>)
 800eb1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800eb1e:	e016      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb20:	4b22      	ldr	r3, [pc, #136]	; (800ebac <UART_SetConfig+0x1194>)
 800eb22:	f04f 0400 	mov.w	r4, #0
 800eb26:	e012      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb28:	4b21      	ldr	r3, [pc, #132]	; (800ebb0 <UART_SetConfig+0x1198>)
 800eb2a:	f04f 0400 	mov.w	r4, #0
 800eb2e:	e00e      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb30:	a415      	add	r4, pc, #84	; (adr r4, 800eb88 <UART_SetConfig+0x1170>)
 800eb32:	e9d4 3400 	ldrd	r3, r4, [r4]
 800eb36:	e00a      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb38:	4b1e      	ldr	r3, [pc, #120]	; (800ebb4 <UART_SetConfig+0x119c>)
 800eb3a:	f04f 0400 	mov.w	r4, #0
 800eb3e:	e006      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb40:	4b1d      	ldr	r3, [pc, #116]	; (800ebb8 <UART_SetConfig+0x11a0>)
 800eb42:	f04f 0401 	mov.w	r4, #1
 800eb46:	e002      	b.n	800eb4e <UART_SetConfig+0x1136>
 800eb48:	4b13      	ldr	r3, [pc, #76]	; (800eb98 <UART_SetConfig+0x1180>)
 800eb4a:	f04f 0403 	mov.w	r4, #3
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	6852      	ldr	r2, [r2, #4]
 800eb52:	0852      	lsrs	r2, r2, #1
 800eb54:	4611      	mov	r1, r2
 800eb56:	f04f 0200 	mov.w	r2, #0
 800eb5a:	eb13 0b01 	adds.w	fp, r3, r1
 800eb5e:	eb44 0c02 	adc.w	ip, r4, r2
 800eb62:	4658      	mov	r0, fp
 800eb64:	4661      	mov	r1, ip
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	f04f 0400 	mov.w	r4, #0
 800eb6e:	461a      	mov	r2, r3
 800eb70:	4623      	mov	r3, r4
 800eb72:	f7f1 fbb1 	bl	80002d8 <__aeabi_uldivmod>
 800eb76:	4603      	mov	r3, r0
 800eb78:	460c      	mov	r4, r1
 800eb7a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800eb7c:	e122      	b.n	800edc4 <UART_SetConfig+0x13ac>
 800eb7e:	bf00      	nop
 800eb80:	51615500 	.word	0x51615500
 800eb84:	00000000 	.word	0x00000000
 800eb88:	a2c2aa00 	.word	0xa2c2aa00
 800eb8c:	00000000 	.word	0x00000000
 800eb90:	58024400 	.word	0x58024400
 800eb94:	03d09000 	.word	0x03d09000
 800eb98:	d0900000 	.word	0xd0900000
 800eb9c:	07a12000 	.word	0x07a12000
 800eba0:	0f424000 	.word	0x0f424000
 800eba4:	1e848000 	.word	0x1e848000
 800eba8:	3d090000 	.word	0x3d090000
 800ebac:	61a80000 	.word	0x61a80000
 800ebb0:	7a120000 	.word	0x7a120000
 800ebb4:	f4240000 	.word	0xf4240000
 800ebb8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d05b      	beq.n	800ec7c <UART_SetConfig+0x1264>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d053      	beq.n	800ec74 <UART_SetConfig+0x125c>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd0:	2b02      	cmp	r3, #2
 800ebd2:	d04b      	beq.n	800ec6c <UART_SetConfig+0x1254>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	2b03      	cmp	r3, #3
 800ebda:	d043      	beq.n	800ec64 <UART_SetConfig+0x124c>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe0:	2b04      	cmp	r3, #4
 800ebe2:	d03b      	beq.n	800ec5c <UART_SetConfig+0x1244>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe8:	2b05      	cmp	r3, #5
 800ebea:	d033      	beq.n	800ec54 <UART_SetConfig+0x123c>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf0:	2b06      	cmp	r3, #6
 800ebf2:	d02b      	beq.n	800ec4c <UART_SetConfig+0x1234>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf8:	2b07      	cmp	r3, #7
 800ebfa:	d023      	beq.n	800ec44 <UART_SetConfig+0x122c>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec00:	2b08      	cmp	r3, #8
 800ec02:	d01b      	beq.n	800ec3c <UART_SetConfig+0x1224>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec08:	2b09      	cmp	r3, #9
 800ec0a:	d013      	beq.n	800ec34 <UART_SetConfig+0x121c>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec10:	2b0a      	cmp	r3, #10
 800ec12:	d00b      	beq.n	800ec2c <UART_SetConfig+0x1214>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec18:	2b0b      	cmp	r3, #11
 800ec1a:	d103      	bne.n	800ec24 <UART_SetConfig+0x120c>
 800ec1c:	4bc0      	ldr	r3, [pc, #768]	; (800ef20 <UART_SetConfig+0x1508>)
 800ec1e:	f04f 0400 	mov.w	r4, #0
 800ec22:	e02e      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec24:	4bbf      	ldr	r3, [pc, #764]	; (800ef24 <UART_SetConfig+0x150c>)
 800ec26:	f04f 0400 	mov.w	r4, #0
 800ec2a:	e02a      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec2c:	4bbe      	ldr	r3, [pc, #760]	; (800ef28 <UART_SetConfig+0x1510>)
 800ec2e:	f04f 0400 	mov.w	r4, #0
 800ec32:	e026      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec34:	4bbd      	ldr	r3, [pc, #756]	; (800ef2c <UART_SetConfig+0x1514>)
 800ec36:	f04f 0400 	mov.w	r4, #0
 800ec3a:	e022      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec3c:	4bbc      	ldr	r3, [pc, #752]	; (800ef30 <UART_SetConfig+0x1518>)
 800ec3e:	f04f 0400 	mov.w	r4, #0
 800ec42:	e01e      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec44:	4bbb      	ldr	r3, [pc, #748]	; (800ef34 <UART_SetConfig+0x151c>)
 800ec46:	f04f 0400 	mov.w	r4, #0
 800ec4a:	e01a      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec4c:	a4b0      	add	r4, pc, #704	; (adr r4, 800ef10 <UART_SetConfig+0x14f8>)
 800ec4e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ec52:	e016      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec54:	4bb8      	ldr	r3, [pc, #736]	; (800ef38 <UART_SetConfig+0x1520>)
 800ec56:	f04f 0400 	mov.w	r4, #0
 800ec5a:	e012      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec5c:	4bb7      	ldr	r3, [pc, #732]	; (800ef3c <UART_SetConfig+0x1524>)
 800ec5e:	f04f 0400 	mov.w	r4, #0
 800ec62:	e00e      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec64:	a4ac      	add	r4, pc, #688	; (adr r4, 800ef18 <UART_SetConfig+0x1500>)
 800ec66:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ec6a:	e00a      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec6c:	4bb4      	ldr	r3, [pc, #720]	; (800ef40 <UART_SetConfig+0x1528>)
 800ec6e:	f04f 0400 	mov.w	r4, #0
 800ec72:	e006      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec74:	4bb3      	ldr	r3, [pc, #716]	; (800ef44 <UART_SetConfig+0x152c>)
 800ec76:	f04f 0400 	mov.w	r4, #0
 800ec7a:	e002      	b.n	800ec82 <UART_SetConfig+0x126a>
 800ec7c:	4ba9      	ldr	r3, [pc, #676]	; (800ef24 <UART_SetConfig+0x150c>)
 800ec7e:	f04f 0400 	mov.w	r4, #0
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	6852      	ldr	r2, [r2, #4]
 800ec86:	0852      	lsrs	r2, r2, #1
 800ec88:	4611      	mov	r1, r2
 800ec8a:	f04f 0200 	mov.w	r2, #0
 800ec8e:	eb13 0b01 	adds.w	fp, r3, r1
 800ec92:	eb44 0c02 	adc.w	ip, r4, r2
 800ec96:	4658      	mov	r0, fp
 800ec98:	4661      	mov	r1, ip
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	f04f 0400 	mov.w	r4, #0
 800eca2:	461a      	mov	r2, r3
 800eca4:	4623      	mov	r3, r4
 800eca6:	f7f1 fb17 	bl	80002d8 <__aeabi_uldivmod>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	460c      	mov	r4, r1
 800ecae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ecb0:	e088      	b.n	800edc4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d064      	beq.n	800ed84 <UART_SetConfig+0x136c>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d05b      	beq.n	800ed7a <UART_SetConfig+0x1362>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc6:	2b02      	cmp	r3, #2
 800ecc8:	d052      	beq.n	800ed70 <UART_SetConfig+0x1358>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecce:	2b03      	cmp	r3, #3
 800ecd0:	d04a      	beq.n	800ed68 <UART_SetConfig+0x1350>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd6:	2b04      	cmp	r3, #4
 800ecd8:	d041      	beq.n	800ed5e <UART_SetConfig+0x1346>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecde:	2b05      	cmp	r3, #5
 800ece0:	d039      	beq.n	800ed56 <UART_SetConfig+0x133e>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece6:	2b06      	cmp	r3, #6
 800ece8:	d031      	beq.n	800ed4e <UART_SetConfig+0x1336>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecee:	2b07      	cmp	r3, #7
 800ecf0:	d028      	beq.n	800ed44 <UART_SetConfig+0x132c>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf6:	2b08      	cmp	r3, #8
 800ecf8:	d01f      	beq.n	800ed3a <UART_SetConfig+0x1322>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfe:	2b09      	cmp	r3, #9
 800ed00:	d016      	beq.n	800ed30 <UART_SetConfig+0x1318>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed06:	2b0a      	cmp	r3, #10
 800ed08:	d00d      	beq.n	800ed26 <UART_SetConfig+0x130e>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0e:	2b0b      	cmp	r3, #11
 800ed10:	d104      	bne.n	800ed1c <UART_SetConfig+0x1304>
 800ed12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed16:	f04f 0400 	mov.w	r4, #0
 800ed1a:	e037      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ed20:	f04f 0400 	mov.w	r4, #0
 800ed24:	e032      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ed2a:	f04f 0400 	mov.w	r4, #0
 800ed2e:	e02d      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed34:	f04f 0400 	mov.w	r4, #0
 800ed38:	e028      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed3e:	f04f 0400 	mov.w	r4, #0
 800ed42:	e023      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ed48:	f04f 0400 	mov.w	r4, #0
 800ed4c:	e01e      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed4e:	4b7e      	ldr	r3, [pc, #504]	; (800ef48 <UART_SetConfig+0x1530>)
 800ed50:	f04f 0400 	mov.w	r4, #0
 800ed54:	e01a      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed56:	4b7d      	ldr	r3, [pc, #500]	; (800ef4c <UART_SetConfig+0x1534>)
 800ed58:	f04f 0400 	mov.w	r4, #0
 800ed5c:	e016      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed62:	f04f 0400 	mov.w	r4, #0
 800ed66:	e011      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed68:	4b79      	ldr	r3, [pc, #484]	; (800ef50 <UART_SetConfig+0x1538>)
 800ed6a:	f04f 0400 	mov.w	r4, #0
 800ed6e:	e00d      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed74:	f04f 0400 	mov.w	r4, #0
 800ed78:	e008      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ed7e:	f04f 0400 	mov.w	r4, #0
 800ed82:	e003      	b.n	800ed8c <UART_SetConfig+0x1374>
 800ed84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ed88:	f04f 0400 	mov.w	r4, #0
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	6852      	ldr	r2, [r2, #4]
 800ed90:	0852      	lsrs	r2, r2, #1
 800ed92:	4611      	mov	r1, r2
 800ed94:	f04f 0200 	mov.w	r2, #0
 800ed98:	eb13 0b01 	adds.w	fp, r3, r1
 800ed9c:	eb44 0c02 	adc.w	ip, r4, r2
 800eda0:	4658      	mov	r0, fp
 800eda2:	4661      	mov	r1, ip
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	f04f 0400 	mov.w	r4, #0
 800edac:	461a      	mov	r2, r3
 800edae:	4623      	mov	r3, r4
 800edb0:	f7f1 fa92 	bl	80002d8 <__aeabi_uldivmod>
 800edb4:	4603      	mov	r3, r0
 800edb6:	460c      	mov	r4, r1
 800edb8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800edba:	e003      	b.n	800edc4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800edbc:	2301      	movs	r3, #1
 800edbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800edc2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800edc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edca:	d309      	bcc.n	800ede0 <UART_SetConfig+0x13c8>
 800edcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edd2:	d205      	bcs.n	800ede0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edda:	60da      	str	r2, [r3, #12]
 800eddc:	f000 bf85 	b.w	800fcea <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800ede0:	2301      	movs	r3, #1
 800ede2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ede6:	f000 bf80 	b.w	800fcea <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	69db      	ldr	r3, [r3, #28]
 800edee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edf2:	f040 83da 	bne.w	800f5aa <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800edf6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800edfa:	2b40      	cmp	r3, #64	; 0x40
 800edfc:	f200 83b3 	bhi.w	800f566 <UART_SetConfig+0x1b4e>
 800ee00:	a201      	add	r2, pc, #4	; (adr r2, 800ee08 <UART_SetConfig+0x13f0>)
 800ee02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee06:	bf00      	nop
 800ee08:	0800ef55 	.word	0x0800ef55
 800ee0c:	0800f00d 	.word	0x0800f00d
 800ee10:	0800f567 	.word	0x0800f567
 800ee14:	0800f567 	.word	0x0800f567
 800ee18:	0800f0c5 	.word	0x0800f0c5
 800ee1c:	0800f567 	.word	0x0800f567
 800ee20:	0800f567 	.word	0x0800f567
 800ee24:	0800f567 	.word	0x0800f567
 800ee28:	0800f181 	.word	0x0800f181
 800ee2c:	0800f567 	.word	0x0800f567
 800ee30:	0800f567 	.word	0x0800f567
 800ee34:	0800f567 	.word	0x0800f567
 800ee38:	0800f567 	.word	0x0800f567
 800ee3c:	0800f567 	.word	0x0800f567
 800ee40:	0800f567 	.word	0x0800f567
 800ee44:	0800f567 	.word	0x0800f567
 800ee48:	0800f23d 	.word	0x0800f23d
 800ee4c:	0800f567 	.word	0x0800f567
 800ee50:	0800f567 	.word	0x0800f567
 800ee54:	0800f567 	.word	0x0800f567
 800ee58:	0800f567 	.word	0x0800f567
 800ee5c:	0800f567 	.word	0x0800f567
 800ee60:	0800f567 	.word	0x0800f567
 800ee64:	0800f567 	.word	0x0800f567
 800ee68:	0800f567 	.word	0x0800f567
 800ee6c:	0800f567 	.word	0x0800f567
 800ee70:	0800f567 	.word	0x0800f567
 800ee74:	0800f567 	.word	0x0800f567
 800ee78:	0800f567 	.word	0x0800f567
 800ee7c:	0800f567 	.word	0x0800f567
 800ee80:	0800f567 	.word	0x0800f567
 800ee84:	0800f567 	.word	0x0800f567
 800ee88:	0800f3af 	.word	0x0800f3af
 800ee8c:	0800f567 	.word	0x0800f567
 800ee90:	0800f567 	.word	0x0800f567
 800ee94:	0800f567 	.word	0x0800f567
 800ee98:	0800f567 	.word	0x0800f567
 800ee9c:	0800f567 	.word	0x0800f567
 800eea0:	0800f567 	.word	0x0800f567
 800eea4:	0800f567 	.word	0x0800f567
 800eea8:	0800f567 	.word	0x0800f567
 800eeac:	0800f567 	.word	0x0800f567
 800eeb0:	0800f567 	.word	0x0800f567
 800eeb4:	0800f567 	.word	0x0800f567
 800eeb8:	0800f567 	.word	0x0800f567
 800eebc:	0800f567 	.word	0x0800f567
 800eec0:	0800f567 	.word	0x0800f567
 800eec4:	0800f567 	.word	0x0800f567
 800eec8:	0800f567 	.word	0x0800f567
 800eecc:	0800f567 	.word	0x0800f567
 800eed0:	0800f567 	.word	0x0800f567
 800eed4:	0800f567 	.word	0x0800f567
 800eed8:	0800f567 	.word	0x0800f567
 800eedc:	0800f567 	.word	0x0800f567
 800eee0:	0800f567 	.word	0x0800f567
 800eee4:	0800f567 	.word	0x0800f567
 800eee8:	0800f567 	.word	0x0800f567
 800eeec:	0800f567 	.word	0x0800f567
 800eef0:	0800f567 	.word	0x0800f567
 800eef4:	0800f567 	.word	0x0800f567
 800eef8:	0800f567 	.word	0x0800f567
 800eefc:	0800f567 	.word	0x0800f567
 800ef00:	0800f567 	.word	0x0800f567
 800ef04:	0800f567 	.word	0x0800f567
 800ef08:	0800f4a5 	.word	0x0800f4a5
 800ef0c:	f3af 8000 	nop.w
 800ef10:	05161500 	.word	0x05161500
 800ef14:	00000000 	.word	0x00000000
 800ef18:	0a2c2a00 	.word	0x0a2c2a00
 800ef1c:	00000000 	.word	0x00000000
 800ef20:	003d0900 	.word	0x003d0900
 800ef24:	3d090000 	.word	0x3d090000
 800ef28:	007a1200 	.word	0x007a1200
 800ef2c:	00f42400 	.word	0x00f42400
 800ef30:	01e84800 	.word	0x01e84800
 800ef34:	03d09000 	.word	0x03d09000
 800ef38:	061a8000 	.word	0x061a8000
 800ef3c:	07a12000 	.word	0x07a12000
 800ef40:	0f424000 	.word	0x0f424000
 800ef44:	1e848000 	.word	0x1e848000
 800ef48:	000aaa00 	.word	0x000aaa00
 800ef4c:	000ccc00 	.word	0x000ccc00
 800ef50:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef54:	f7fa f95c 	bl	8009210 <HAL_RCC_GetPCLK1Freq>
 800ef58:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d044      	beq.n	800efec <UART_SetConfig+0x15d4>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d03e      	beq.n	800efe8 <UART_SetConfig+0x15d0>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d038      	beq.n	800efe4 <UART_SetConfig+0x15cc>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef76:	2b03      	cmp	r3, #3
 800ef78:	d032      	beq.n	800efe0 <UART_SetConfig+0x15c8>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	d02c      	beq.n	800efdc <UART_SetConfig+0x15c4>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef86:	2b05      	cmp	r3, #5
 800ef88:	d026      	beq.n	800efd8 <UART_SetConfig+0x15c0>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8e:	2b06      	cmp	r3, #6
 800ef90:	d020      	beq.n	800efd4 <UART_SetConfig+0x15bc>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef96:	2b07      	cmp	r3, #7
 800ef98:	d01a      	beq.n	800efd0 <UART_SetConfig+0x15b8>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9e:	2b08      	cmp	r3, #8
 800efa0:	d014      	beq.n	800efcc <UART_SetConfig+0x15b4>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa6:	2b09      	cmp	r3, #9
 800efa8:	d00e      	beq.n	800efc8 <UART_SetConfig+0x15b0>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efae:	2b0a      	cmp	r3, #10
 800efb0:	d008      	beq.n	800efc4 <UART_SetConfig+0x15ac>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb6:	2b0b      	cmp	r3, #11
 800efb8:	d102      	bne.n	800efc0 <UART_SetConfig+0x15a8>
 800efba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efbe:	e016      	b.n	800efee <UART_SetConfig+0x15d6>
 800efc0:	2301      	movs	r3, #1
 800efc2:	e014      	b.n	800efee <UART_SetConfig+0x15d6>
 800efc4:	2380      	movs	r3, #128	; 0x80
 800efc6:	e012      	b.n	800efee <UART_SetConfig+0x15d6>
 800efc8:	2340      	movs	r3, #64	; 0x40
 800efca:	e010      	b.n	800efee <UART_SetConfig+0x15d6>
 800efcc:	2320      	movs	r3, #32
 800efce:	e00e      	b.n	800efee <UART_SetConfig+0x15d6>
 800efd0:	2310      	movs	r3, #16
 800efd2:	e00c      	b.n	800efee <UART_SetConfig+0x15d6>
 800efd4:	230c      	movs	r3, #12
 800efd6:	e00a      	b.n	800efee <UART_SetConfig+0x15d6>
 800efd8:	230a      	movs	r3, #10
 800efda:	e008      	b.n	800efee <UART_SetConfig+0x15d6>
 800efdc:	2308      	movs	r3, #8
 800efde:	e006      	b.n	800efee <UART_SetConfig+0x15d6>
 800efe0:	2306      	movs	r3, #6
 800efe2:	e004      	b.n	800efee <UART_SetConfig+0x15d6>
 800efe4:	2304      	movs	r3, #4
 800efe6:	e002      	b.n	800efee <UART_SetConfig+0x15d6>
 800efe8:	2302      	movs	r3, #2
 800efea:	e000      	b.n	800efee <UART_SetConfig+0x15d6>
 800efec:	2301      	movs	r3, #1
 800efee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eff0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eff4:	005a      	lsls	r2, r3, #1
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	085b      	lsrs	r3, r3, #1
 800effc:	441a      	add	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	fbb2 f3f3 	udiv	r3, r2, r3
 800f006:	b29b      	uxth	r3, r3
 800f008:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f00a:	e2b0      	b.n	800f56e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f00c:	f7fa f916 	bl	800923c <HAL_RCC_GetPCLK2Freq>
 800f010:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f016:	2b00      	cmp	r3, #0
 800f018:	d044      	beq.n	800f0a4 <UART_SetConfig+0x168c>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d03e      	beq.n	800f0a0 <UART_SetConfig+0x1688>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f026:	2b02      	cmp	r3, #2
 800f028:	d038      	beq.n	800f09c <UART_SetConfig+0x1684>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f02e:	2b03      	cmp	r3, #3
 800f030:	d032      	beq.n	800f098 <UART_SetConfig+0x1680>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f036:	2b04      	cmp	r3, #4
 800f038:	d02c      	beq.n	800f094 <UART_SetConfig+0x167c>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f03e:	2b05      	cmp	r3, #5
 800f040:	d026      	beq.n	800f090 <UART_SetConfig+0x1678>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f046:	2b06      	cmp	r3, #6
 800f048:	d020      	beq.n	800f08c <UART_SetConfig+0x1674>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04e:	2b07      	cmp	r3, #7
 800f050:	d01a      	beq.n	800f088 <UART_SetConfig+0x1670>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f056:	2b08      	cmp	r3, #8
 800f058:	d014      	beq.n	800f084 <UART_SetConfig+0x166c>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f05e:	2b09      	cmp	r3, #9
 800f060:	d00e      	beq.n	800f080 <UART_SetConfig+0x1668>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f066:	2b0a      	cmp	r3, #10
 800f068:	d008      	beq.n	800f07c <UART_SetConfig+0x1664>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06e:	2b0b      	cmp	r3, #11
 800f070:	d102      	bne.n	800f078 <UART_SetConfig+0x1660>
 800f072:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f076:	e016      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f078:	2301      	movs	r3, #1
 800f07a:	e014      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f07c:	2380      	movs	r3, #128	; 0x80
 800f07e:	e012      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f080:	2340      	movs	r3, #64	; 0x40
 800f082:	e010      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f084:	2320      	movs	r3, #32
 800f086:	e00e      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f088:	2310      	movs	r3, #16
 800f08a:	e00c      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f08c:	230c      	movs	r3, #12
 800f08e:	e00a      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f090:	230a      	movs	r3, #10
 800f092:	e008      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f094:	2308      	movs	r3, #8
 800f096:	e006      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f098:	2306      	movs	r3, #6
 800f09a:	e004      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f09c:	2304      	movs	r3, #4
 800f09e:	e002      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	e000      	b.n	800f0a6 <UART_SetConfig+0x168e>
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ac:	005a      	lsls	r2, r3, #1
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	085b      	lsrs	r3, r3, #1
 800f0b4:	441a      	add	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0c2:	e254      	b.n	800f56e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0c4:	f107 0318 	add.w	r3, r7, #24
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fb fa7b 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0ce:	69fa      	ldr	r2, [r7, #28]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d044      	beq.n	800f162 <UART_SetConfig+0x174a>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d03e      	beq.n	800f15e <UART_SetConfig+0x1746>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	d038      	beq.n	800f15a <UART_SetConfig+0x1742>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ec:	2b03      	cmp	r3, #3
 800f0ee:	d032      	beq.n	800f156 <UART_SetConfig+0x173e>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f4:	2b04      	cmp	r3, #4
 800f0f6:	d02c      	beq.n	800f152 <UART_SetConfig+0x173a>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fc:	2b05      	cmp	r3, #5
 800f0fe:	d026      	beq.n	800f14e <UART_SetConfig+0x1736>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f104:	2b06      	cmp	r3, #6
 800f106:	d020      	beq.n	800f14a <UART_SetConfig+0x1732>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10c:	2b07      	cmp	r3, #7
 800f10e:	d01a      	beq.n	800f146 <UART_SetConfig+0x172e>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f114:	2b08      	cmp	r3, #8
 800f116:	d014      	beq.n	800f142 <UART_SetConfig+0x172a>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11c:	2b09      	cmp	r3, #9
 800f11e:	d00e      	beq.n	800f13e <UART_SetConfig+0x1726>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f124:	2b0a      	cmp	r3, #10
 800f126:	d008      	beq.n	800f13a <UART_SetConfig+0x1722>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f12c:	2b0b      	cmp	r3, #11
 800f12e:	d102      	bne.n	800f136 <UART_SetConfig+0x171e>
 800f130:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f134:	e016      	b.n	800f164 <UART_SetConfig+0x174c>
 800f136:	2301      	movs	r3, #1
 800f138:	e014      	b.n	800f164 <UART_SetConfig+0x174c>
 800f13a:	2380      	movs	r3, #128	; 0x80
 800f13c:	e012      	b.n	800f164 <UART_SetConfig+0x174c>
 800f13e:	2340      	movs	r3, #64	; 0x40
 800f140:	e010      	b.n	800f164 <UART_SetConfig+0x174c>
 800f142:	2320      	movs	r3, #32
 800f144:	e00e      	b.n	800f164 <UART_SetConfig+0x174c>
 800f146:	2310      	movs	r3, #16
 800f148:	e00c      	b.n	800f164 <UART_SetConfig+0x174c>
 800f14a:	230c      	movs	r3, #12
 800f14c:	e00a      	b.n	800f164 <UART_SetConfig+0x174c>
 800f14e:	230a      	movs	r3, #10
 800f150:	e008      	b.n	800f164 <UART_SetConfig+0x174c>
 800f152:	2308      	movs	r3, #8
 800f154:	e006      	b.n	800f164 <UART_SetConfig+0x174c>
 800f156:	2306      	movs	r3, #6
 800f158:	e004      	b.n	800f164 <UART_SetConfig+0x174c>
 800f15a:	2304      	movs	r3, #4
 800f15c:	e002      	b.n	800f164 <UART_SetConfig+0x174c>
 800f15e:	2302      	movs	r3, #2
 800f160:	e000      	b.n	800f164 <UART_SetConfig+0x174c>
 800f162:	2301      	movs	r3, #1
 800f164:	fbb2 f3f3 	udiv	r3, r2, r3
 800f168:	005a      	lsls	r2, r3, #1
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	085b      	lsrs	r3, r3, #1
 800f170:	441a      	add	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	fbb2 f3f3 	udiv	r3, r2, r3
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f17e:	e1f6      	b.n	800f56e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f180:	f107 030c 	add.w	r3, r7, #12
 800f184:	4618      	mov	r0, r3
 800f186:	f7fb fb69 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f190:	2b00      	cmp	r3, #0
 800f192:	d044      	beq.n	800f21e <UART_SetConfig+0x1806>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d03e      	beq.n	800f21a <UART_SetConfig+0x1802>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a0:	2b02      	cmp	r3, #2
 800f1a2:	d038      	beq.n	800f216 <UART_SetConfig+0x17fe>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a8:	2b03      	cmp	r3, #3
 800f1aa:	d032      	beq.n	800f212 <UART_SetConfig+0x17fa>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b0:	2b04      	cmp	r3, #4
 800f1b2:	d02c      	beq.n	800f20e <UART_SetConfig+0x17f6>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b8:	2b05      	cmp	r3, #5
 800f1ba:	d026      	beq.n	800f20a <UART_SetConfig+0x17f2>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c0:	2b06      	cmp	r3, #6
 800f1c2:	d020      	beq.n	800f206 <UART_SetConfig+0x17ee>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c8:	2b07      	cmp	r3, #7
 800f1ca:	d01a      	beq.n	800f202 <UART_SetConfig+0x17ea>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d0:	2b08      	cmp	r3, #8
 800f1d2:	d014      	beq.n	800f1fe <UART_SetConfig+0x17e6>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d8:	2b09      	cmp	r3, #9
 800f1da:	d00e      	beq.n	800f1fa <UART_SetConfig+0x17e2>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e0:	2b0a      	cmp	r3, #10
 800f1e2:	d008      	beq.n	800f1f6 <UART_SetConfig+0x17de>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e8:	2b0b      	cmp	r3, #11
 800f1ea:	d102      	bne.n	800f1f2 <UART_SetConfig+0x17da>
 800f1ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1f0:	e016      	b.n	800f220 <UART_SetConfig+0x1808>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e014      	b.n	800f220 <UART_SetConfig+0x1808>
 800f1f6:	2380      	movs	r3, #128	; 0x80
 800f1f8:	e012      	b.n	800f220 <UART_SetConfig+0x1808>
 800f1fa:	2340      	movs	r3, #64	; 0x40
 800f1fc:	e010      	b.n	800f220 <UART_SetConfig+0x1808>
 800f1fe:	2320      	movs	r3, #32
 800f200:	e00e      	b.n	800f220 <UART_SetConfig+0x1808>
 800f202:	2310      	movs	r3, #16
 800f204:	e00c      	b.n	800f220 <UART_SetConfig+0x1808>
 800f206:	230c      	movs	r3, #12
 800f208:	e00a      	b.n	800f220 <UART_SetConfig+0x1808>
 800f20a:	230a      	movs	r3, #10
 800f20c:	e008      	b.n	800f220 <UART_SetConfig+0x1808>
 800f20e:	2308      	movs	r3, #8
 800f210:	e006      	b.n	800f220 <UART_SetConfig+0x1808>
 800f212:	2306      	movs	r3, #6
 800f214:	e004      	b.n	800f220 <UART_SetConfig+0x1808>
 800f216:	2304      	movs	r3, #4
 800f218:	e002      	b.n	800f220 <UART_SetConfig+0x1808>
 800f21a:	2302      	movs	r3, #2
 800f21c:	e000      	b.n	800f220 <UART_SetConfig+0x1808>
 800f21e:	2301      	movs	r3, #1
 800f220:	fbb2 f3f3 	udiv	r3, r2, r3
 800f224:	005a      	lsls	r2, r3, #1
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	085b      	lsrs	r3, r3, #1
 800f22c:	441a      	add	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	fbb2 f3f3 	udiv	r3, r2, r3
 800f236:	b29b      	uxth	r3, r3
 800f238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f23a:	e198      	b.n	800f56e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f23c:	4b87      	ldr	r3, [pc, #540]	; (800f45c <UART_SetConfig+0x1a44>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f003 0320 	and.w	r3, r3, #32
 800f244:	2b00      	cmp	r3, #0
 800f246:	d05e      	beq.n	800f306 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f248:	4b84      	ldr	r3, [pc, #528]	; (800f45c <UART_SetConfig+0x1a44>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	08db      	lsrs	r3, r3, #3
 800f24e:	f003 0303 	and.w	r3, r3, #3
 800f252:	4a83      	ldr	r2, [pc, #524]	; (800f460 <UART_SetConfig+0x1a48>)
 800f254:	40da      	lsrs	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d044      	beq.n	800f2e8 <UART_SetConfig+0x18d0>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f262:	2b01      	cmp	r3, #1
 800f264:	d03e      	beq.n	800f2e4 <UART_SetConfig+0x18cc>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d038      	beq.n	800f2e0 <UART_SetConfig+0x18c8>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	2b03      	cmp	r3, #3
 800f274:	d032      	beq.n	800f2dc <UART_SetConfig+0x18c4>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	2b04      	cmp	r3, #4
 800f27c:	d02c      	beq.n	800f2d8 <UART_SetConfig+0x18c0>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f282:	2b05      	cmp	r3, #5
 800f284:	d026      	beq.n	800f2d4 <UART_SetConfig+0x18bc>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28a:	2b06      	cmp	r3, #6
 800f28c:	d020      	beq.n	800f2d0 <UART_SetConfig+0x18b8>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f292:	2b07      	cmp	r3, #7
 800f294:	d01a      	beq.n	800f2cc <UART_SetConfig+0x18b4>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29a:	2b08      	cmp	r3, #8
 800f29c:	d014      	beq.n	800f2c8 <UART_SetConfig+0x18b0>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a2:	2b09      	cmp	r3, #9
 800f2a4:	d00e      	beq.n	800f2c4 <UART_SetConfig+0x18ac>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2aa:	2b0a      	cmp	r3, #10
 800f2ac:	d008      	beq.n	800f2c0 <UART_SetConfig+0x18a8>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b2:	2b0b      	cmp	r3, #11
 800f2b4:	d102      	bne.n	800f2bc <UART_SetConfig+0x18a4>
 800f2b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f2ba:	e016      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e014      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2c0:	2380      	movs	r3, #128	; 0x80
 800f2c2:	e012      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2c4:	2340      	movs	r3, #64	; 0x40
 800f2c6:	e010      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2c8:	2320      	movs	r3, #32
 800f2ca:	e00e      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2cc:	2310      	movs	r3, #16
 800f2ce:	e00c      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2d0:	230c      	movs	r3, #12
 800f2d2:	e00a      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2d4:	230a      	movs	r3, #10
 800f2d6:	e008      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2d8:	2308      	movs	r3, #8
 800f2da:	e006      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2dc:	2306      	movs	r3, #6
 800f2de:	e004      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2e0:	2304      	movs	r3, #4
 800f2e2:	e002      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	e000      	b.n	800f2ea <UART_SetConfig+0x18d2>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2ee:	005a      	lsls	r2, r3, #1
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	085b      	lsrs	r3, r3, #1
 800f2f6:	441a      	add	r2, r3
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f300:	b29b      	uxth	r3, r3
 800f302:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800f304:	e133      	b.n	800f56e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d043      	beq.n	800f396 <UART_SetConfig+0x197e>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f312:	2b01      	cmp	r3, #1
 800f314:	d03d      	beq.n	800f392 <UART_SetConfig+0x197a>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d037      	beq.n	800f38e <UART_SetConfig+0x1976>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f322:	2b03      	cmp	r3, #3
 800f324:	d031      	beq.n	800f38a <UART_SetConfig+0x1972>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32a:	2b04      	cmp	r3, #4
 800f32c:	d02b      	beq.n	800f386 <UART_SetConfig+0x196e>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f332:	2b05      	cmp	r3, #5
 800f334:	d025      	beq.n	800f382 <UART_SetConfig+0x196a>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33a:	2b06      	cmp	r3, #6
 800f33c:	d01f      	beq.n	800f37e <UART_SetConfig+0x1966>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f342:	2b07      	cmp	r3, #7
 800f344:	d019      	beq.n	800f37a <UART_SetConfig+0x1962>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34a:	2b08      	cmp	r3, #8
 800f34c:	d013      	beq.n	800f376 <UART_SetConfig+0x195e>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f352:	2b09      	cmp	r3, #9
 800f354:	d00d      	beq.n	800f372 <UART_SetConfig+0x195a>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35a:	2b0a      	cmp	r3, #10
 800f35c:	d007      	beq.n	800f36e <UART_SetConfig+0x1956>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f362:	2b0b      	cmp	r3, #11
 800f364:	d101      	bne.n	800f36a <UART_SetConfig+0x1952>
 800f366:	4b3f      	ldr	r3, [pc, #252]	; (800f464 <UART_SetConfig+0x1a4c>)
 800f368:	e016      	b.n	800f398 <UART_SetConfig+0x1980>
 800f36a:	4b3f      	ldr	r3, [pc, #252]	; (800f468 <UART_SetConfig+0x1a50>)
 800f36c:	e014      	b.n	800f398 <UART_SetConfig+0x1980>
 800f36e:	4b3f      	ldr	r3, [pc, #252]	; (800f46c <UART_SetConfig+0x1a54>)
 800f370:	e012      	b.n	800f398 <UART_SetConfig+0x1980>
 800f372:	4b3f      	ldr	r3, [pc, #252]	; (800f470 <UART_SetConfig+0x1a58>)
 800f374:	e010      	b.n	800f398 <UART_SetConfig+0x1980>
 800f376:	4b3f      	ldr	r3, [pc, #252]	; (800f474 <UART_SetConfig+0x1a5c>)
 800f378:	e00e      	b.n	800f398 <UART_SetConfig+0x1980>
 800f37a:	4b3f      	ldr	r3, [pc, #252]	; (800f478 <UART_SetConfig+0x1a60>)
 800f37c:	e00c      	b.n	800f398 <UART_SetConfig+0x1980>
 800f37e:	4b3f      	ldr	r3, [pc, #252]	; (800f47c <UART_SetConfig+0x1a64>)
 800f380:	e00a      	b.n	800f398 <UART_SetConfig+0x1980>
 800f382:	4b3f      	ldr	r3, [pc, #252]	; (800f480 <UART_SetConfig+0x1a68>)
 800f384:	e008      	b.n	800f398 <UART_SetConfig+0x1980>
 800f386:	4b3f      	ldr	r3, [pc, #252]	; (800f484 <UART_SetConfig+0x1a6c>)
 800f388:	e006      	b.n	800f398 <UART_SetConfig+0x1980>
 800f38a:	4b3f      	ldr	r3, [pc, #252]	; (800f488 <UART_SetConfig+0x1a70>)
 800f38c:	e004      	b.n	800f398 <UART_SetConfig+0x1980>
 800f38e:	4b3f      	ldr	r3, [pc, #252]	; (800f48c <UART_SetConfig+0x1a74>)
 800f390:	e002      	b.n	800f398 <UART_SetConfig+0x1980>
 800f392:	4b33      	ldr	r3, [pc, #204]	; (800f460 <UART_SetConfig+0x1a48>)
 800f394:	e000      	b.n	800f398 <UART_SetConfig+0x1980>
 800f396:	4b34      	ldr	r3, [pc, #208]	; (800f468 <UART_SetConfig+0x1a50>)
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	6852      	ldr	r2, [r2, #4]
 800f39c:	0852      	lsrs	r2, r2, #1
 800f39e:	441a      	add	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3ac:	e0df      	b.n	800f56e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d045      	beq.n	800f442 <UART_SetConfig+0x1a2a>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d03f      	beq.n	800f43e <UART_SetConfig+0x1a26>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	d039      	beq.n	800f43a <UART_SetConfig+0x1a22>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ca:	2b03      	cmp	r3, #3
 800f3cc:	d033      	beq.n	800f436 <UART_SetConfig+0x1a1e>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d2:	2b04      	cmp	r3, #4
 800f3d4:	d02d      	beq.n	800f432 <UART_SetConfig+0x1a1a>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3da:	2b05      	cmp	r3, #5
 800f3dc:	d027      	beq.n	800f42e <UART_SetConfig+0x1a16>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e2:	2b06      	cmp	r3, #6
 800f3e4:	d021      	beq.n	800f42a <UART_SetConfig+0x1a12>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ea:	2b07      	cmp	r3, #7
 800f3ec:	d01b      	beq.n	800f426 <UART_SetConfig+0x1a0e>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f2:	2b08      	cmp	r3, #8
 800f3f4:	d015      	beq.n	800f422 <UART_SetConfig+0x1a0a>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3fa:	2b09      	cmp	r3, #9
 800f3fc:	d00f      	beq.n	800f41e <UART_SetConfig+0x1a06>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f402:	2b0a      	cmp	r3, #10
 800f404:	d008      	beq.n	800f418 <UART_SetConfig+0x1a00>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f40a:	2b0b      	cmp	r3, #11
 800f40c:	d102      	bne.n	800f414 <UART_SetConfig+0x19fc>
 800f40e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800f412:	e017      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f414:	4b18      	ldr	r3, [pc, #96]	; (800f478 <UART_SetConfig+0x1a60>)
 800f416:	e015      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f418:	f24f 4324 	movw	r3, #62500	; 0xf424
 800f41c:	e012      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f41e:	4b1c      	ldr	r3, [pc, #112]	; (800f490 <UART_SetConfig+0x1a78>)
 800f420:	e010      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f422:	4b1c      	ldr	r3, [pc, #112]	; (800f494 <UART_SetConfig+0x1a7c>)
 800f424:	e00e      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f426:	4b0f      	ldr	r3, [pc, #60]	; (800f464 <UART_SetConfig+0x1a4c>)
 800f428:	e00c      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f42a:	4b1b      	ldr	r3, [pc, #108]	; (800f498 <UART_SetConfig+0x1a80>)
 800f42c:	e00a      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f42e:	4b1b      	ldr	r3, [pc, #108]	; (800f49c <UART_SetConfig+0x1a84>)
 800f430:	e008      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f432:	4b0e      	ldr	r3, [pc, #56]	; (800f46c <UART_SetConfig+0x1a54>)
 800f434:	e006      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f436:	4b1a      	ldr	r3, [pc, #104]	; (800f4a0 <UART_SetConfig+0x1a88>)
 800f438:	e004      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f43a:	4b0d      	ldr	r3, [pc, #52]	; (800f470 <UART_SetConfig+0x1a58>)
 800f43c:	e002      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f43e:	4b0d      	ldr	r3, [pc, #52]	; (800f474 <UART_SetConfig+0x1a5c>)
 800f440:	e000      	b.n	800f444 <UART_SetConfig+0x1a2c>
 800f442:	4b0d      	ldr	r3, [pc, #52]	; (800f478 <UART_SetConfig+0x1a60>)
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	6852      	ldr	r2, [r2, #4]
 800f448:	0852      	lsrs	r2, r2, #1
 800f44a:	441a      	add	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	fbb2 f3f3 	udiv	r3, r2, r3
 800f454:	b29b      	uxth	r3, r3
 800f456:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f458:	e089      	b.n	800f56e <UART_SetConfig+0x1b56>
 800f45a:	bf00      	nop
 800f45c:	58024400 	.word	0x58024400
 800f460:	03d09000 	.word	0x03d09000
 800f464:	0007a120 	.word	0x0007a120
 800f468:	07a12000 	.word	0x07a12000
 800f46c:	000f4240 	.word	0x000f4240
 800f470:	001e8480 	.word	0x001e8480
 800f474:	003d0900 	.word	0x003d0900
 800f478:	007a1200 	.word	0x007a1200
 800f47c:	00a2c2aa 	.word	0x00a2c2aa
 800f480:	00c35000 	.word	0x00c35000
 800f484:	00f42400 	.word	0x00f42400
 800f488:	01458554 	.word	0x01458554
 800f48c:	01e84800 	.word	0x01e84800
 800f490:	0001e848 	.word	0x0001e848
 800f494:	0003d090 	.word	0x0003d090
 800f498:	000a2c2a 	.word	0x000a2c2a
 800f49c:	000c3500 	.word	0x000c3500
 800f4a0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d04f      	beq.n	800f54c <UART_SetConfig+0x1b34>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d048      	beq.n	800f546 <UART_SetConfig+0x1b2e>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d041      	beq.n	800f540 <UART_SetConfig+0x1b28>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c0:	2b03      	cmp	r3, #3
 800f4c2:	d03a      	beq.n	800f53a <UART_SetConfig+0x1b22>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c8:	2b04      	cmp	r3, #4
 800f4ca:	d033      	beq.n	800f534 <UART_SetConfig+0x1b1c>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d0:	2b05      	cmp	r3, #5
 800f4d2:	d02c      	beq.n	800f52e <UART_SetConfig+0x1b16>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d8:	2b06      	cmp	r3, #6
 800f4da:	d025      	beq.n	800f528 <UART_SetConfig+0x1b10>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e0:	2b07      	cmp	r3, #7
 800f4e2:	d01e      	beq.n	800f522 <UART_SetConfig+0x1b0a>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	2b08      	cmp	r3, #8
 800f4ea:	d017      	beq.n	800f51c <UART_SetConfig+0x1b04>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f0:	2b09      	cmp	r3, #9
 800f4f2:	d010      	beq.n	800f516 <UART_SetConfig+0x1afe>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f8:	2b0a      	cmp	r3, #10
 800f4fa:	d009      	beq.n	800f510 <UART_SetConfig+0x1af8>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f500:	2b0b      	cmp	r3, #11
 800f502:	d102      	bne.n	800f50a <UART_SetConfig+0x1af2>
 800f504:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f508:	e022      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f50a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f50e:	e01f      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f510:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f514:	e01c      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f51a:	e019      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f51c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f520:	e016      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f526:	e013      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f528:	f241 5354 	movw	r3, #5460	; 0x1554
 800f52c:	e010      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f52e:	f641 1398 	movw	r3, #6552	; 0x1998
 800f532:	e00d      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f538:	e00a      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f53a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800f53e:	e007      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f540:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f544:	e004      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f54a:	e001      	b.n	800f550 <UART_SetConfig+0x1b38>
 800f54c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	6852      	ldr	r2, [r2, #4]
 800f554:	0852      	lsrs	r2, r2, #1
 800f556:	441a      	add	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f560:	b29b      	uxth	r3, r3
 800f562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f564:	e003      	b.n	800f56e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800f566:	2301      	movs	r3, #1
 800f568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800f56c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f570:	2b0f      	cmp	r3, #15
 800f572:	d916      	bls.n	800f5a2 <UART_SetConfig+0x1b8a>
 800f574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f57a:	d212      	bcs.n	800f5a2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57e:	b29b      	uxth	r3, r3
 800f580:	f023 030f 	bic.w	r3, r3, #15
 800f584:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f588:	085b      	lsrs	r3, r3, #1
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	f003 0307 	and.w	r3, r3, #7
 800f590:	b29a      	uxth	r2, r3
 800f592:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f594:	4313      	orrs	r3, r2
 800f596:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f59e:	60da      	str	r2, [r3, #12]
 800f5a0:	e3a3      	b.n	800fcea <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5a8:	e39f      	b.n	800fcea <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800f5aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f5ae:	2b40      	cmp	r3, #64	; 0x40
 800f5b0:	f200 8388 	bhi.w	800fcc4 <UART_SetConfig+0x22ac>
 800f5b4:	a201      	add	r2, pc, #4	; (adr r2, 800f5bc <UART_SetConfig+0x1ba4>)
 800f5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ba:	bf00      	nop
 800f5bc:	0800f6c1 	.word	0x0800f6c1
 800f5c0:	0800f777 	.word	0x0800f777
 800f5c4:	0800fcc5 	.word	0x0800fcc5
 800f5c8:	0800fcc5 	.word	0x0800fcc5
 800f5cc:	0800f82d 	.word	0x0800f82d
 800f5d0:	0800fcc5 	.word	0x0800fcc5
 800f5d4:	0800fcc5 	.word	0x0800fcc5
 800f5d8:	0800fcc5 	.word	0x0800fcc5
 800f5dc:	0800f8e7 	.word	0x0800f8e7
 800f5e0:	0800fcc5 	.word	0x0800fcc5
 800f5e4:	0800fcc5 	.word	0x0800fcc5
 800f5e8:	0800fcc5 	.word	0x0800fcc5
 800f5ec:	0800fcc5 	.word	0x0800fcc5
 800f5f0:	0800fcc5 	.word	0x0800fcc5
 800f5f4:	0800fcc5 	.word	0x0800fcc5
 800f5f8:	0800fcc5 	.word	0x0800fcc5
 800f5fc:	0800f9a1 	.word	0x0800f9a1
 800f600:	0800fcc5 	.word	0x0800fcc5
 800f604:	0800fcc5 	.word	0x0800fcc5
 800f608:	0800fcc5 	.word	0x0800fcc5
 800f60c:	0800fcc5 	.word	0x0800fcc5
 800f610:	0800fcc5 	.word	0x0800fcc5
 800f614:	0800fcc5 	.word	0x0800fcc5
 800f618:	0800fcc5 	.word	0x0800fcc5
 800f61c:	0800fcc5 	.word	0x0800fcc5
 800f620:	0800fcc5 	.word	0x0800fcc5
 800f624:	0800fcc5 	.word	0x0800fcc5
 800f628:	0800fcc5 	.word	0x0800fcc5
 800f62c:	0800fcc5 	.word	0x0800fcc5
 800f630:	0800fcc5 	.word	0x0800fcc5
 800f634:	0800fcc5 	.word	0x0800fcc5
 800f638:	0800fcc5 	.word	0x0800fcc5
 800f63c:	0800fb11 	.word	0x0800fb11
 800f640:	0800fcc5 	.word	0x0800fcc5
 800f644:	0800fcc5 	.word	0x0800fcc5
 800f648:	0800fcc5 	.word	0x0800fcc5
 800f64c:	0800fcc5 	.word	0x0800fcc5
 800f650:	0800fcc5 	.word	0x0800fcc5
 800f654:	0800fcc5 	.word	0x0800fcc5
 800f658:	0800fcc5 	.word	0x0800fcc5
 800f65c:	0800fcc5 	.word	0x0800fcc5
 800f660:	0800fcc5 	.word	0x0800fcc5
 800f664:	0800fcc5 	.word	0x0800fcc5
 800f668:	0800fcc5 	.word	0x0800fcc5
 800f66c:	0800fcc5 	.word	0x0800fcc5
 800f670:	0800fcc5 	.word	0x0800fcc5
 800f674:	0800fcc5 	.word	0x0800fcc5
 800f678:	0800fcc5 	.word	0x0800fcc5
 800f67c:	0800fcc5 	.word	0x0800fcc5
 800f680:	0800fcc5 	.word	0x0800fcc5
 800f684:	0800fcc5 	.word	0x0800fcc5
 800f688:	0800fcc5 	.word	0x0800fcc5
 800f68c:	0800fcc5 	.word	0x0800fcc5
 800f690:	0800fcc5 	.word	0x0800fcc5
 800f694:	0800fcc5 	.word	0x0800fcc5
 800f698:	0800fcc5 	.word	0x0800fcc5
 800f69c:	0800fcc5 	.word	0x0800fcc5
 800f6a0:	0800fcc5 	.word	0x0800fcc5
 800f6a4:	0800fcc5 	.word	0x0800fcc5
 800f6a8:	0800fcc5 	.word	0x0800fcc5
 800f6ac:	0800fcc5 	.word	0x0800fcc5
 800f6b0:	0800fcc5 	.word	0x0800fcc5
 800f6b4:	0800fcc5 	.word	0x0800fcc5
 800f6b8:	0800fcc5 	.word	0x0800fcc5
 800f6bc:	0800fc05 	.word	0x0800fc05
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6c0:	f7f9 fda6 	bl	8009210 <HAL_RCC_GetPCLK1Freq>
 800f6c4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d044      	beq.n	800f758 <UART_SetConfig+0x1d40>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d03e      	beq.n	800f754 <UART_SetConfig+0x1d3c>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6da:	2b02      	cmp	r3, #2
 800f6dc:	d038      	beq.n	800f750 <UART_SetConfig+0x1d38>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d032      	beq.n	800f74c <UART_SetConfig+0x1d34>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ea:	2b04      	cmp	r3, #4
 800f6ec:	d02c      	beq.n	800f748 <UART_SetConfig+0x1d30>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f2:	2b05      	cmp	r3, #5
 800f6f4:	d026      	beq.n	800f744 <UART_SetConfig+0x1d2c>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6fa:	2b06      	cmp	r3, #6
 800f6fc:	d020      	beq.n	800f740 <UART_SetConfig+0x1d28>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f702:	2b07      	cmp	r3, #7
 800f704:	d01a      	beq.n	800f73c <UART_SetConfig+0x1d24>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70a:	2b08      	cmp	r3, #8
 800f70c:	d014      	beq.n	800f738 <UART_SetConfig+0x1d20>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f712:	2b09      	cmp	r3, #9
 800f714:	d00e      	beq.n	800f734 <UART_SetConfig+0x1d1c>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71a:	2b0a      	cmp	r3, #10
 800f71c:	d008      	beq.n	800f730 <UART_SetConfig+0x1d18>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f722:	2b0b      	cmp	r3, #11
 800f724:	d102      	bne.n	800f72c <UART_SetConfig+0x1d14>
 800f726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f72a:	e016      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f72c:	2301      	movs	r3, #1
 800f72e:	e014      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f730:	2380      	movs	r3, #128	; 0x80
 800f732:	e012      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f734:	2340      	movs	r3, #64	; 0x40
 800f736:	e010      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f738:	2320      	movs	r3, #32
 800f73a:	e00e      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f73c:	2310      	movs	r3, #16
 800f73e:	e00c      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f740:	230c      	movs	r3, #12
 800f742:	e00a      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f744:	230a      	movs	r3, #10
 800f746:	e008      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f748:	2308      	movs	r3, #8
 800f74a:	e006      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f74c:	2306      	movs	r3, #6
 800f74e:	e004      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f750:	2304      	movs	r3, #4
 800f752:	e002      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f754:	2302      	movs	r3, #2
 800f756:	e000      	b.n	800f75a <UART_SetConfig+0x1d42>
 800f758:	2301      	movs	r3, #1
 800f75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f75c:	fbb2 f2f3 	udiv	r2, r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	085b      	lsrs	r3, r3, #1
 800f766:	441a      	add	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f770:	b29b      	uxth	r3, r3
 800f772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f774:	e2aa      	b.n	800fccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f776:	f7f9 fd61 	bl	800923c <HAL_RCC_GetPCLK2Freq>
 800f77a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f780:	2b00      	cmp	r3, #0
 800f782:	d044      	beq.n	800f80e <UART_SetConfig+0x1df6>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d03e      	beq.n	800f80a <UART_SetConfig+0x1df2>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f790:	2b02      	cmp	r3, #2
 800f792:	d038      	beq.n	800f806 <UART_SetConfig+0x1dee>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f798:	2b03      	cmp	r3, #3
 800f79a:	d032      	beq.n	800f802 <UART_SetConfig+0x1dea>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a0:	2b04      	cmp	r3, #4
 800f7a2:	d02c      	beq.n	800f7fe <UART_SetConfig+0x1de6>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a8:	2b05      	cmp	r3, #5
 800f7aa:	d026      	beq.n	800f7fa <UART_SetConfig+0x1de2>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b0:	2b06      	cmp	r3, #6
 800f7b2:	d020      	beq.n	800f7f6 <UART_SetConfig+0x1dde>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b8:	2b07      	cmp	r3, #7
 800f7ba:	d01a      	beq.n	800f7f2 <UART_SetConfig+0x1dda>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c0:	2b08      	cmp	r3, #8
 800f7c2:	d014      	beq.n	800f7ee <UART_SetConfig+0x1dd6>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c8:	2b09      	cmp	r3, #9
 800f7ca:	d00e      	beq.n	800f7ea <UART_SetConfig+0x1dd2>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d0:	2b0a      	cmp	r3, #10
 800f7d2:	d008      	beq.n	800f7e6 <UART_SetConfig+0x1dce>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d8:	2b0b      	cmp	r3, #11
 800f7da:	d102      	bne.n	800f7e2 <UART_SetConfig+0x1dca>
 800f7dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7e0:	e016      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e014      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f7e6:	2380      	movs	r3, #128	; 0x80
 800f7e8:	e012      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f7ea:	2340      	movs	r3, #64	; 0x40
 800f7ec:	e010      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f7ee:	2320      	movs	r3, #32
 800f7f0:	e00e      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f7f2:	2310      	movs	r3, #16
 800f7f4:	e00c      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f7f6:	230c      	movs	r3, #12
 800f7f8:	e00a      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f7fa:	230a      	movs	r3, #10
 800f7fc:	e008      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f7fe:	2308      	movs	r3, #8
 800f800:	e006      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f802:	2306      	movs	r3, #6
 800f804:	e004      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f806:	2304      	movs	r3, #4
 800f808:	e002      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f80a:	2302      	movs	r3, #2
 800f80c:	e000      	b.n	800f810 <UART_SetConfig+0x1df8>
 800f80e:	2301      	movs	r3, #1
 800f810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f812:	fbb2 f2f3 	udiv	r2, r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	085b      	lsrs	r3, r3, #1
 800f81c:	441a      	add	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	fbb2 f3f3 	udiv	r3, r2, r3
 800f826:	b29b      	uxth	r3, r3
 800f828:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f82a:	e24f      	b.n	800fccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f82c:	f107 0318 	add.w	r3, r7, #24
 800f830:	4618      	mov	r0, r3
 800f832:	f7fa fec7 	bl	800a5c4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f836:	69fa      	ldr	r2, [r7, #28]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d044      	beq.n	800f8ca <UART_SetConfig+0x1eb2>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f844:	2b01      	cmp	r3, #1
 800f846:	d03e      	beq.n	800f8c6 <UART_SetConfig+0x1eae>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84c:	2b02      	cmp	r3, #2
 800f84e:	d038      	beq.n	800f8c2 <UART_SetConfig+0x1eaa>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f854:	2b03      	cmp	r3, #3
 800f856:	d032      	beq.n	800f8be <UART_SetConfig+0x1ea6>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85c:	2b04      	cmp	r3, #4
 800f85e:	d02c      	beq.n	800f8ba <UART_SetConfig+0x1ea2>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f864:	2b05      	cmp	r3, #5
 800f866:	d026      	beq.n	800f8b6 <UART_SetConfig+0x1e9e>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86c:	2b06      	cmp	r3, #6
 800f86e:	d020      	beq.n	800f8b2 <UART_SetConfig+0x1e9a>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f874:	2b07      	cmp	r3, #7
 800f876:	d01a      	beq.n	800f8ae <UART_SetConfig+0x1e96>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87c:	2b08      	cmp	r3, #8
 800f87e:	d014      	beq.n	800f8aa <UART_SetConfig+0x1e92>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f884:	2b09      	cmp	r3, #9
 800f886:	d00e      	beq.n	800f8a6 <UART_SetConfig+0x1e8e>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88c:	2b0a      	cmp	r3, #10
 800f88e:	d008      	beq.n	800f8a2 <UART_SetConfig+0x1e8a>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f894:	2b0b      	cmp	r3, #11
 800f896:	d102      	bne.n	800f89e <UART_SetConfig+0x1e86>
 800f898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f89c:	e016      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e014      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8a2:	2380      	movs	r3, #128	; 0x80
 800f8a4:	e012      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8a6:	2340      	movs	r3, #64	; 0x40
 800f8a8:	e010      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8aa:	2320      	movs	r3, #32
 800f8ac:	e00e      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8ae:	2310      	movs	r3, #16
 800f8b0:	e00c      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8b2:	230c      	movs	r3, #12
 800f8b4:	e00a      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8b6:	230a      	movs	r3, #10
 800f8b8:	e008      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8ba:	2308      	movs	r3, #8
 800f8bc:	e006      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8be:	2306      	movs	r3, #6
 800f8c0:	e004      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8c2:	2304      	movs	r3, #4
 800f8c4:	e002      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8c6:	2302      	movs	r3, #2
 800f8c8:	e000      	b.n	800f8cc <UART_SetConfig+0x1eb4>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	085b      	lsrs	r3, r3, #1
 800f8d6:	441a      	add	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f8e4:	e1f2      	b.n	800fccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8e6:	f107 030c 	add.w	r3, r7, #12
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fa ffb6 	bl	800a85c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8f0:	693a      	ldr	r2, [r7, #16]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d044      	beq.n	800f984 <UART_SetConfig+0x1f6c>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d03e      	beq.n	800f980 <UART_SetConfig+0x1f68>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f906:	2b02      	cmp	r3, #2
 800f908:	d038      	beq.n	800f97c <UART_SetConfig+0x1f64>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90e:	2b03      	cmp	r3, #3
 800f910:	d032      	beq.n	800f978 <UART_SetConfig+0x1f60>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f916:	2b04      	cmp	r3, #4
 800f918:	d02c      	beq.n	800f974 <UART_SetConfig+0x1f5c>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91e:	2b05      	cmp	r3, #5
 800f920:	d026      	beq.n	800f970 <UART_SetConfig+0x1f58>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f926:	2b06      	cmp	r3, #6
 800f928:	d020      	beq.n	800f96c <UART_SetConfig+0x1f54>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92e:	2b07      	cmp	r3, #7
 800f930:	d01a      	beq.n	800f968 <UART_SetConfig+0x1f50>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f936:	2b08      	cmp	r3, #8
 800f938:	d014      	beq.n	800f964 <UART_SetConfig+0x1f4c>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93e:	2b09      	cmp	r3, #9
 800f940:	d00e      	beq.n	800f960 <UART_SetConfig+0x1f48>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f946:	2b0a      	cmp	r3, #10
 800f948:	d008      	beq.n	800f95c <UART_SetConfig+0x1f44>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94e:	2b0b      	cmp	r3, #11
 800f950:	d102      	bne.n	800f958 <UART_SetConfig+0x1f40>
 800f952:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f956:	e016      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f958:	2301      	movs	r3, #1
 800f95a:	e014      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f95c:	2380      	movs	r3, #128	; 0x80
 800f95e:	e012      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f960:	2340      	movs	r3, #64	; 0x40
 800f962:	e010      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f964:	2320      	movs	r3, #32
 800f966:	e00e      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f968:	2310      	movs	r3, #16
 800f96a:	e00c      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f96c:	230c      	movs	r3, #12
 800f96e:	e00a      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f970:	230a      	movs	r3, #10
 800f972:	e008      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f974:	2308      	movs	r3, #8
 800f976:	e006      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f978:	2306      	movs	r3, #6
 800f97a:	e004      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f97c:	2304      	movs	r3, #4
 800f97e:	e002      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f980:	2302      	movs	r3, #2
 800f982:	e000      	b.n	800f986 <UART_SetConfig+0x1f6e>
 800f984:	2301      	movs	r3, #1
 800f986:	fbb2 f2f3 	udiv	r2, r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	085b      	lsrs	r3, r3, #1
 800f990:	441a      	add	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	fbb2 f3f3 	udiv	r3, r2, r3
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f99e:	e195      	b.n	800fccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9a0:	4b87      	ldr	r3, [pc, #540]	; (800fbc0 <UART_SetConfig+0x21a8>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f003 0320 	and.w	r3, r3, #32
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d05d      	beq.n	800fa68 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9ac:	4b84      	ldr	r3, [pc, #528]	; (800fbc0 <UART_SetConfig+0x21a8>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	08db      	lsrs	r3, r3, #3
 800f9b2:	f003 0303 	and.w	r3, r3, #3
 800f9b6:	4a83      	ldr	r2, [pc, #524]	; (800fbc4 <UART_SetConfig+0x21ac>)
 800f9b8:	40da      	lsrs	r2, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d044      	beq.n	800fa4c <UART_SetConfig+0x2034>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d03e      	beq.n	800fa48 <UART_SetConfig+0x2030>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ce:	2b02      	cmp	r3, #2
 800f9d0:	d038      	beq.n	800fa44 <UART_SetConfig+0x202c>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d6:	2b03      	cmp	r3, #3
 800f9d8:	d032      	beq.n	800fa40 <UART_SetConfig+0x2028>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9de:	2b04      	cmp	r3, #4
 800f9e0:	d02c      	beq.n	800fa3c <UART_SetConfig+0x2024>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e6:	2b05      	cmp	r3, #5
 800f9e8:	d026      	beq.n	800fa38 <UART_SetConfig+0x2020>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ee:	2b06      	cmp	r3, #6
 800f9f0:	d020      	beq.n	800fa34 <UART_SetConfig+0x201c>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f6:	2b07      	cmp	r3, #7
 800f9f8:	d01a      	beq.n	800fa30 <UART_SetConfig+0x2018>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fe:	2b08      	cmp	r3, #8
 800fa00:	d014      	beq.n	800fa2c <UART_SetConfig+0x2014>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa06:	2b09      	cmp	r3, #9
 800fa08:	d00e      	beq.n	800fa28 <UART_SetConfig+0x2010>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0e:	2b0a      	cmp	r3, #10
 800fa10:	d008      	beq.n	800fa24 <UART_SetConfig+0x200c>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa16:	2b0b      	cmp	r3, #11
 800fa18:	d102      	bne.n	800fa20 <UART_SetConfig+0x2008>
 800fa1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa1e:	e016      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa20:	2301      	movs	r3, #1
 800fa22:	e014      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa24:	2380      	movs	r3, #128	; 0x80
 800fa26:	e012      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa28:	2340      	movs	r3, #64	; 0x40
 800fa2a:	e010      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa2c:	2320      	movs	r3, #32
 800fa2e:	e00e      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa30:	2310      	movs	r3, #16
 800fa32:	e00c      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa34:	230c      	movs	r3, #12
 800fa36:	e00a      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa38:	230a      	movs	r3, #10
 800fa3a:	e008      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa3c:	2308      	movs	r3, #8
 800fa3e:	e006      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa40:	2306      	movs	r3, #6
 800fa42:	e004      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa44:	2304      	movs	r3, #4
 800fa46:	e002      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa48:	2302      	movs	r3, #2
 800fa4a:	e000      	b.n	800fa4e <UART_SetConfig+0x2036>
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	fbb2 f2f3 	udiv	r2, r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	085b      	lsrs	r3, r3, #1
 800fa58:	441a      	add	r2, r3
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800fa66:	e131      	b.n	800fccc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d043      	beq.n	800faf8 <UART_SetConfig+0x20e0>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d03d      	beq.n	800faf4 <UART_SetConfig+0x20dc>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d037      	beq.n	800faf0 <UART_SetConfig+0x20d8>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa84:	2b03      	cmp	r3, #3
 800fa86:	d031      	beq.n	800faec <UART_SetConfig+0x20d4>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8c:	2b04      	cmp	r3, #4
 800fa8e:	d02b      	beq.n	800fae8 <UART_SetConfig+0x20d0>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa94:	2b05      	cmp	r3, #5
 800fa96:	d025      	beq.n	800fae4 <UART_SetConfig+0x20cc>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9c:	2b06      	cmp	r3, #6
 800fa9e:	d01f      	beq.n	800fae0 <UART_SetConfig+0x20c8>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa4:	2b07      	cmp	r3, #7
 800faa6:	d019      	beq.n	800fadc <UART_SetConfig+0x20c4>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faac:	2b08      	cmp	r3, #8
 800faae:	d013      	beq.n	800fad8 <UART_SetConfig+0x20c0>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab4:	2b09      	cmp	r3, #9
 800fab6:	d00d      	beq.n	800fad4 <UART_SetConfig+0x20bc>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabc:	2b0a      	cmp	r3, #10
 800fabe:	d007      	beq.n	800fad0 <UART_SetConfig+0x20b8>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac4:	2b0b      	cmp	r3, #11
 800fac6:	d101      	bne.n	800facc <UART_SetConfig+0x20b4>
 800fac8:	4b3f      	ldr	r3, [pc, #252]	; (800fbc8 <UART_SetConfig+0x21b0>)
 800faca:	e016      	b.n	800fafa <UART_SetConfig+0x20e2>
 800facc:	4b3d      	ldr	r3, [pc, #244]	; (800fbc4 <UART_SetConfig+0x21ac>)
 800face:	e014      	b.n	800fafa <UART_SetConfig+0x20e2>
 800fad0:	4b3e      	ldr	r3, [pc, #248]	; (800fbcc <UART_SetConfig+0x21b4>)
 800fad2:	e012      	b.n	800fafa <UART_SetConfig+0x20e2>
 800fad4:	4b3e      	ldr	r3, [pc, #248]	; (800fbd0 <UART_SetConfig+0x21b8>)
 800fad6:	e010      	b.n	800fafa <UART_SetConfig+0x20e2>
 800fad8:	4b3e      	ldr	r3, [pc, #248]	; (800fbd4 <UART_SetConfig+0x21bc>)
 800fada:	e00e      	b.n	800fafa <UART_SetConfig+0x20e2>
 800fadc:	4b3e      	ldr	r3, [pc, #248]	; (800fbd8 <UART_SetConfig+0x21c0>)
 800fade:	e00c      	b.n	800fafa <UART_SetConfig+0x20e2>
 800fae0:	4b3e      	ldr	r3, [pc, #248]	; (800fbdc <UART_SetConfig+0x21c4>)
 800fae2:	e00a      	b.n	800fafa <UART_SetConfig+0x20e2>
 800fae4:	4b3e      	ldr	r3, [pc, #248]	; (800fbe0 <UART_SetConfig+0x21c8>)
 800fae6:	e008      	b.n	800fafa <UART_SetConfig+0x20e2>
 800fae8:	4b3e      	ldr	r3, [pc, #248]	; (800fbe4 <UART_SetConfig+0x21cc>)
 800faea:	e006      	b.n	800fafa <UART_SetConfig+0x20e2>
 800faec:	4b3e      	ldr	r3, [pc, #248]	; (800fbe8 <UART_SetConfig+0x21d0>)
 800faee:	e004      	b.n	800fafa <UART_SetConfig+0x20e2>
 800faf0:	4b3e      	ldr	r3, [pc, #248]	; (800fbec <UART_SetConfig+0x21d4>)
 800faf2:	e002      	b.n	800fafa <UART_SetConfig+0x20e2>
 800faf4:	4b3e      	ldr	r3, [pc, #248]	; (800fbf0 <UART_SetConfig+0x21d8>)
 800faf6:	e000      	b.n	800fafa <UART_SetConfig+0x20e2>
 800faf8:	4b32      	ldr	r3, [pc, #200]	; (800fbc4 <UART_SetConfig+0x21ac>)
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	6852      	ldr	r2, [r2, #4]
 800fafe:	0852      	lsrs	r2, r2, #1
 800fb00:	441a      	add	r2, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb0e:	e0dd      	b.n	800fccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d046      	beq.n	800fba6 <UART_SetConfig+0x218e>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d040      	beq.n	800fba2 <UART_SetConfig+0x218a>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d03a      	beq.n	800fb9e <UART_SetConfig+0x2186>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb2c:	2b03      	cmp	r3, #3
 800fb2e:	d034      	beq.n	800fb9a <UART_SetConfig+0x2182>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb34:	2b04      	cmp	r3, #4
 800fb36:	d02e      	beq.n	800fb96 <UART_SetConfig+0x217e>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb3c:	2b05      	cmp	r3, #5
 800fb3e:	d028      	beq.n	800fb92 <UART_SetConfig+0x217a>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb44:	2b06      	cmp	r3, #6
 800fb46:	d022      	beq.n	800fb8e <UART_SetConfig+0x2176>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4c:	2b07      	cmp	r3, #7
 800fb4e:	d01c      	beq.n	800fb8a <UART_SetConfig+0x2172>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb54:	2b08      	cmp	r3, #8
 800fb56:	d016      	beq.n	800fb86 <UART_SetConfig+0x216e>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5c:	2b09      	cmp	r3, #9
 800fb5e:	d00f      	beq.n	800fb80 <UART_SetConfig+0x2168>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb64:	2b0a      	cmp	r3, #10
 800fb66:	d008      	beq.n	800fb7a <UART_SetConfig+0x2162>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	2b0b      	cmp	r3, #11
 800fb6e:	d102      	bne.n	800fb76 <UART_SetConfig+0x215e>
 800fb70:	f643 5309 	movw	r3, #15625	; 0x3d09
 800fb74:	e018      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb76:	4b18      	ldr	r3, [pc, #96]	; (800fbd8 <UART_SetConfig+0x21c0>)
 800fb78:	e016      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb7a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800fb7e:	e013      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb80:	f24f 4324 	movw	r3, #62500	; 0xf424
 800fb84:	e010      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb86:	4b1b      	ldr	r3, [pc, #108]	; (800fbf4 <UART_SetConfig+0x21dc>)
 800fb88:	e00e      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb8a:	4b0f      	ldr	r3, [pc, #60]	; (800fbc8 <UART_SetConfig+0x21b0>)
 800fb8c:	e00c      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb8e:	4b1a      	ldr	r3, [pc, #104]	; (800fbf8 <UART_SetConfig+0x21e0>)
 800fb90:	e00a      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb92:	4b1a      	ldr	r3, [pc, #104]	; (800fbfc <UART_SetConfig+0x21e4>)
 800fb94:	e008      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb96:	4b0d      	ldr	r3, [pc, #52]	; (800fbcc <UART_SetConfig+0x21b4>)
 800fb98:	e006      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb9a:	4b19      	ldr	r3, [pc, #100]	; (800fc00 <UART_SetConfig+0x21e8>)
 800fb9c:	e004      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fb9e:	4b0c      	ldr	r3, [pc, #48]	; (800fbd0 <UART_SetConfig+0x21b8>)
 800fba0:	e002      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fba2:	4b0c      	ldr	r3, [pc, #48]	; (800fbd4 <UART_SetConfig+0x21bc>)
 800fba4:	e000      	b.n	800fba8 <UART_SetConfig+0x2190>
 800fba6:	4b0c      	ldr	r3, [pc, #48]	; (800fbd8 <UART_SetConfig+0x21c0>)
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	6852      	ldr	r2, [r2, #4]
 800fbac:	0852      	lsrs	r2, r2, #1
 800fbae:	441a      	add	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbbc:	e086      	b.n	800fccc <UART_SetConfig+0x22b4>
 800fbbe:	bf00      	nop
 800fbc0:	58024400 	.word	0x58024400
 800fbc4:	03d09000 	.word	0x03d09000
 800fbc8:	0003d090 	.word	0x0003d090
 800fbcc:	0007a120 	.word	0x0007a120
 800fbd0:	000f4240 	.word	0x000f4240
 800fbd4:	001e8480 	.word	0x001e8480
 800fbd8:	003d0900 	.word	0x003d0900
 800fbdc:	00516155 	.word	0x00516155
 800fbe0:	0061a800 	.word	0x0061a800
 800fbe4:	007a1200 	.word	0x007a1200
 800fbe8:	00a2c2aa 	.word	0x00a2c2aa
 800fbec:	00f42400 	.word	0x00f42400
 800fbf0:	01e84800 	.word	0x01e84800
 800fbf4:	0001e848 	.word	0x0001e848
 800fbf8:	00051615 	.word	0x00051615
 800fbfc:	00061a80 	.word	0x00061a80
 800fc00:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d04e      	beq.n	800fcaa <UART_SetConfig+0x2292>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d047      	beq.n	800fca4 <UART_SetConfig+0x228c>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d040      	beq.n	800fc9e <UART_SetConfig+0x2286>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc20:	2b03      	cmp	r3, #3
 800fc22:	d039      	beq.n	800fc98 <UART_SetConfig+0x2280>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc28:	2b04      	cmp	r3, #4
 800fc2a:	d032      	beq.n	800fc92 <UART_SetConfig+0x227a>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc30:	2b05      	cmp	r3, #5
 800fc32:	d02b      	beq.n	800fc8c <UART_SetConfig+0x2274>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc38:	2b06      	cmp	r3, #6
 800fc3a:	d024      	beq.n	800fc86 <UART_SetConfig+0x226e>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc40:	2b07      	cmp	r3, #7
 800fc42:	d01d      	beq.n	800fc80 <UART_SetConfig+0x2268>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc48:	2b08      	cmp	r3, #8
 800fc4a:	d016      	beq.n	800fc7a <UART_SetConfig+0x2262>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc50:	2b09      	cmp	r3, #9
 800fc52:	d00f      	beq.n	800fc74 <UART_SetConfig+0x225c>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc58:	2b0a      	cmp	r3, #10
 800fc5a:	d008      	beq.n	800fc6e <UART_SetConfig+0x2256>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc60:	2b0b      	cmp	r3, #11
 800fc62:	d101      	bne.n	800fc68 <UART_SetConfig+0x2250>
 800fc64:	2380      	movs	r3, #128	; 0x80
 800fc66:	e022      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc6c:	e01f      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc72:	e01c      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc78:	e019      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc7e:	e016      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc84:	e013      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc86:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800fc8a:	e010      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc8c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800fc90:	e00d      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc96:	e00a      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc98:	f241 5355 	movw	r3, #5461	; 0x1555
 800fc9c:	e007      	b.n	800fcae <UART_SetConfig+0x2296>
 800fc9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fca2:	e004      	b.n	800fcae <UART_SetConfig+0x2296>
 800fca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fca8:	e001      	b.n	800fcae <UART_SetConfig+0x2296>
 800fcaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	6852      	ldr	r2, [r2, #4]
 800fcb2:	0852      	lsrs	r2, r2, #1
 800fcb4:	441a      	add	r2, r3
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fcc2:	e003      	b.n	800fccc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800fcca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcce:	2b0f      	cmp	r3, #15
 800fcd0:	d908      	bls.n	800fce4 <UART_SetConfig+0x22cc>
 800fcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcd8:	d204      	bcs.n	800fce4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fce0:	60da      	str	r2, [r3, #12]
 800fce2:	e002      	b.n	800fcea <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800fce4:	2301      	movs	r3, #1
 800fce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2201      	movs	r2, #1
 800fcee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800fd06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3740      	adds	r7, #64	; 0x40
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800fd14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd20:	f003 0301 	and.w	r3, r3, #1
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00a      	beq.n	800fd3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	430a      	orrs	r2, r1
 800fd3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd42:	f003 0302 	and.w	r3, r3, #2
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00a      	beq.n	800fd60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	430a      	orrs	r2, r1
 800fd5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd64:	f003 0304 	and.w	r3, r3, #4
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00a      	beq.n	800fd82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	430a      	orrs	r2, r1
 800fd80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd86:	f003 0308 	and.w	r3, r3, #8
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d00a      	beq.n	800fda4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	430a      	orrs	r2, r1
 800fda2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fda8:	f003 0310 	and.w	r3, r3, #16
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d00a      	beq.n	800fdc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	430a      	orrs	r2, r1
 800fdc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdca:	f003 0320 	and.w	r3, r3, #32
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d00a      	beq.n	800fde8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	689b      	ldr	r3, [r3, #8]
 800fdd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	430a      	orrs	r2, r1
 800fde6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d01a      	beq.n	800fe2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	430a      	orrs	r2, r1
 800fe08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe12:	d10a      	bne.n	800fe2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	430a      	orrs	r2, r1
 800fe28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d00a      	beq.n	800fe4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	430a      	orrs	r2, r1
 800fe4a:	605a      	str	r2, [r3, #4]
  }
}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b086      	sub	sp, #24
 800fe5c:	af02      	add	r7, sp, #8
 800fe5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fe68:	f7f2 fe1c 	bl	8002aa4 <HAL_GetTick>
 800fe6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f003 0308 	and.w	r3, r3, #8
 800fe78:	2b08      	cmp	r3, #8
 800fe7a:	d10e      	bne.n	800fe9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2200      	movs	r2, #0
 800fe86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f000 f82c 	bl	800fee8 <UART_WaitOnFlagUntilTimeout>
 800fe90:	4603      	mov	r3, r0
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d001      	beq.n	800fe9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fe96:	2303      	movs	r3, #3
 800fe98:	e022      	b.n	800fee0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f003 0304 	and.w	r3, r3, #4
 800fea4:	2b04      	cmp	r3, #4
 800fea6:	d10e      	bne.n	800fec6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800feac:	9300      	str	r3, [sp, #0]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2200      	movs	r2, #0
 800feb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 f816 	bl	800fee8 <UART_WaitOnFlagUntilTimeout>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d001      	beq.n	800fec6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fec2:	2303      	movs	r3, #3
 800fec4:	e00c      	b.n	800fee0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2220      	movs	r2, #32
 800feca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2220      	movs	r2, #32
 800fed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3710      	adds	r7, #16
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	603b      	str	r3, [r7, #0]
 800fef4:	4613      	mov	r3, r2
 800fef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fef8:	e062      	b.n	800ffc0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff00:	d05e      	beq.n	800ffc0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff02:	f7f2 fdcf 	bl	8002aa4 <HAL_GetTick>
 800ff06:	4602      	mov	r2, r0
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	69ba      	ldr	r2, [r7, #24]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d302      	bcc.n	800ff18 <UART_WaitOnFlagUntilTimeout+0x30>
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d11d      	bne.n	800ff54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ff26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	689a      	ldr	r2, [r3, #8]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f022 0201 	bic.w	r2, r2, #1
 800ff36:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2220      	movs	r2, #32
 800ff3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2220      	movs	r2, #32
 800ff44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ff50:	2303      	movs	r3, #3
 800ff52:	e045      	b.n	800ffe0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f003 0304 	and.w	r3, r3, #4
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d02e      	beq.n	800ffc0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	69db      	ldr	r3, [r3, #28]
 800ff68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ff70:	d126      	bne.n	800ffc0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ff7a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ff8a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	689a      	ldr	r2, [r3, #8]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f022 0201 	bic.w	r2, r2, #1
 800ff9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2220      	movs	r2, #32
 800ffa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2220      	movs	r2, #32
 800ffa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2220      	movs	r2, #32
 800ffb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800ffbc:	2303      	movs	r3, #3
 800ffbe:	e00f      	b.n	800ffe0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	69da      	ldr	r2, [r3, #28]
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	4013      	ands	r3, r2
 800ffca:	68ba      	ldr	r2, [r7, #8]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	bf0c      	ite	eq
 800ffd0:	2301      	moveq	r3, #1
 800ffd2:	2300      	movne	r3, #0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	79fb      	ldrb	r3, [r7, #7]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d08d      	beq.n	800fefa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ffde:	2300      	movs	r3, #0
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3710      	adds	r7, #16
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fffe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	6899      	ldr	r1, [r3, #8]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	4b08      	ldr	r3, [pc, #32]	; (801002c <UART_EndRxTransfer+0x44>)
 801000c:	400b      	ands	r3, r1
 801000e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2220      	movs	r2, #32
 8010014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 801001e:	bf00      	nop
 8010020:	370c      	adds	r7, #12
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	effffffe 	.word	0xeffffffe

08010030 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801003c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2200      	movs	r2, #0
 801004a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	f7fd fcd8 	bl	800da04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010054:	bf00      	nop
 8010056:	3710      	adds	r7, #16
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010072:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2220      	movs	r2, #32
 8010078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7fd fcb4 	bl	800d9f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80100ac:	bf00      	nop
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b085      	sub	sp, #20
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d101      	bne.n	80100e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80100de:	2302      	movs	r3, #2
 80100e0:	e027      	b.n	8010132 <HAL_UARTEx_DisableFifoMode+0x66>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2201      	movs	r2, #1
 80100e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2224      	movs	r2, #36	; 0x24
 80100ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f022 0201 	bic.w	r2, r2, #1
 8010108:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010110:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2220      	movs	r2, #32
 8010124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010130:	2300      	movs	r3, #0
}
 8010132:	4618      	mov	r0, r3
 8010134:	3714      	adds	r7, #20
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b084      	sub	sp, #16
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801014e:	2b01      	cmp	r3, #1
 8010150:	d101      	bne.n	8010156 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010152:	2302      	movs	r3, #2
 8010154:	e02d      	b.n	80101b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2201      	movs	r2, #1
 801015a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2224      	movs	r2, #36	; 0x24
 8010162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f022 0201 	bic.w	r2, r2, #1
 801017c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	683a      	ldr	r2, [r7, #0]
 801018e:	430a      	orrs	r2, r1
 8010190:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 f850 	bl	8010238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2220      	movs	r2, #32
 80101a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80101b0:	2300      	movs	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b084      	sub	sp, #16
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
 80101c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d101      	bne.n	80101d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80101ce:	2302      	movs	r3, #2
 80101d0:	e02d      	b.n	801022e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2201      	movs	r2, #1
 80101d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2224      	movs	r2, #36	; 0x24
 80101de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f022 0201 	bic.w	r2, r2, #1
 80101f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	689b      	ldr	r3, [r3, #8]
 8010200:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	430a      	orrs	r2, r1
 801020c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 f812 	bl	8010238 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2220      	movs	r2, #32
 8010220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801022c:	2300      	movs	r3, #0
}
 801022e:	4618      	mov	r0, r3
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
	...

08010238 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010238:	b480      	push	{r7}
 801023a:	b089      	sub	sp, #36	; 0x24
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010240:	4a2f      	ldr	r2, [pc, #188]	; (8010300 <UARTEx_SetNbDataToProcess+0xc8>)
 8010242:	f107 0314 	add.w	r3, r7, #20
 8010246:	e892 0003 	ldmia.w	r2, {r0, r1}
 801024a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801024e:	4a2d      	ldr	r2, [pc, #180]	; (8010304 <UARTEx_SetNbDataToProcess+0xcc>)
 8010250:	f107 030c 	add.w	r3, r7, #12
 8010254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010258:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010260:	2b00      	cmp	r3, #0
 8010262:	d108      	bne.n	8010276 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2201      	movs	r2, #1
 8010268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2201      	movs	r2, #1
 8010270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010274:	e03d      	b.n	80102f2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010276:	2308      	movs	r3, #8
 8010278:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801027a:	2308      	movs	r3, #8
 801027c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	0e5b      	lsrs	r3, r3, #25
 8010286:	b2db      	uxtb	r3, r3
 8010288:	f003 0307 	and.w	r3, r3, #7
 801028c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	0f5b      	lsrs	r3, r3, #29
 8010296:	b2db      	uxtb	r3, r3
 8010298:	f003 0307 	and.w	r3, r3, #7
 801029c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801029e:	7fbb      	ldrb	r3, [r7, #30]
 80102a0:	7f3a      	ldrb	r2, [r7, #28]
 80102a2:	f107 0120 	add.w	r1, r7, #32
 80102a6:	440a      	add	r2, r1
 80102a8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80102ac:	fb02 f303 	mul.w	r3, r2, r3
 80102b0:	7f3a      	ldrb	r2, [r7, #28]
 80102b2:	f107 0120 	add.w	r1, r7, #32
 80102b6:	440a      	add	r2, r1
 80102b8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80102bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80102c0:	b29a      	uxth	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80102c8:	7ffb      	ldrb	r3, [r7, #31]
 80102ca:	7f7a      	ldrb	r2, [r7, #29]
 80102cc:	f107 0120 	add.w	r1, r7, #32
 80102d0:	440a      	add	r2, r1
 80102d2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80102d6:	fb02 f303 	mul.w	r3, r2, r3
 80102da:	7f7a      	ldrb	r2, [r7, #29]
 80102dc:	f107 0120 	add.w	r1, r7, #32
 80102e0:	440a      	add	r2, r1
 80102e2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80102e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80102f2:	bf00      	nop
 80102f4:	3724      	adds	r7, #36	; 0x24
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	080110ac 	.word	0x080110ac
 8010304:	080110b4 	.word	0x080110b4

08010308 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d121      	bne.n	801035e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	4b27      	ldr	r3, [pc, #156]	; (80103bc <FMC_SDRAM_Init+0xb4>)
 8010320:	4013      	ands	r3, r2
 8010322:	683a      	ldr	r2, [r7, #0]
 8010324:	6851      	ldr	r1, [r2, #4]
 8010326:	683a      	ldr	r2, [r7, #0]
 8010328:	6892      	ldr	r2, [r2, #8]
 801032a:	4311      	orrs	r1, r2
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	68d2      	ldr	r2, [r2, #12]
 8010330:	4311      	orrs	r1, r2
 8010332:	683a      	ldr	r2, [r7, #0]
 8010334:	6912      	ldr	r2, [r2, #16]
 8010336:	4311      	orrs	r1, r2
 8010338:	683a      	ldr	r2, [r7, #0]
 801033a:	6952      	ldr	r2, [r2, #20]
 801033c:	4311      	orrs	r1, r2
 801033e:	683a      	ldr	r2, [r7, #0]
 8010340:	6992      	ldr	r2, [r2, #24]
 8010342:	4311      	orrs	r1, r2
 8010344:	683a      	ldr	r2, [r7, #0]
 8010346:	69d2      	ldr	r2, [r2, #28]
 8010348:	4311      	orrs	r1, r2
 801034a:	683a      	ldr	r2, [r7, #0]
 801034c:	6a12      	ldr	r2, [r2, #32]
 801034e:	4311      	orrs	r1, r2
 8010350:	683a      	ldr	r2, [r7, #0]
 8010352:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010354:	430a      	orrs	r2, r1
 8010356:	431a      	orrs	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	601a      	str	r2, [r3, #0]
 801035c:	e026      	b.n	80103ac <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	69d9      	ldr	r1, [r3, #28]
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	6a1b      	ldr	r3, [r3, #32]
 801036e:	4319      	orrs	r1, r3
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010374:	430b      	orrs	r3, r1
 8010376:	431a      	orrs	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	685a      	ldr	r2, [r3, #4]
 8010380:	4b0e      	ldr	r3, [pc, #56]	; (80103bc <FMC_SDRAM_Init+0xb4>)
 8010382:	4013      	ands	r3, r2
 8010384:	683a      	ldr	r2, [r7, #0]
 8010386:	6851      	ldr	r1, [r2, #4]
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	6892      	ldr	r2, [r2, #8]
 801038c:	4311      	orrs	r1, r2
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	68d2      	ldr	r2, [r2, #12]
 8010392:	4311      	orrs	r1, r2
 8010394:	683a      	ldr	r2, [r7, #0]
 8010396:	6912      	ldr	r2, [r2, #16]
 8010398:	4311      	orrs	r1, r2
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	6952      	ldr	r2, [r2, #20]
 801039e:	4311      	orrs	r1, r2
 80103a0:	683a      	ldr	r2, [r7, #0]
 80103a2:	6992      	ldr	r2, [r2, #24]
 80103a4:	430a      	orrs	r2, r1
 80103a6:	431a      	orrs	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	370c      	adds	r7, #12
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	ffff8000 	.word	0xffff8000

080103c0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80103c0:	b480      	push	{r7}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d128      	bne.n	8010424 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	1e59      	subs	r1, r3, #1
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	3b01      	subs	r3, #1
 80103e6:	011b      	lsls	r3, r3, #4
 80103e8:	4319      	orrs	r1, r3
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	3b01      	subs	r3, #1
 80103f0:	021b      	lsls	r3, r3, #8
 80103f2:	4319      	orrs	r1, r3
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	031b      	lsls	r3, r3, #12
 80103fc:	4319      	orrs	r1, r3
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	691b      	ldr	r3, [r3, #16]
 8010402:	3b01      	subs	r3, #1
 8010404:	041b      	lsls	r3, r3, #16
 8010406:	4319      	orrs	r1, r3
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	3b01      	subs	r3, #1
 801040e:	051b      	lsls	r3, r3, #20
 8010410:	4319      	orrs	r1, r3
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	699b      	ldr	r3, [r3, #24]
 8010416:	3b01      	subs	r3, #1
 8010418:	061b      	lsls	r3, r3, #24
 801041a:	430b      	orrs	r3, r1
 801041c:	431a      	orrs	r2, r3
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	609a      	str	r2, [r3, #8]
 8010422:	e02d      	b.n	8010480 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	689a      	ldr	r2, [r3, #8]
 8010428:	4b19      	ldr	r3, [pc, #100]	; (8010490 <FMC_SDRAM_Timing_Init+0xd0>)
 801042a:	4013      	ands	r3, r2
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	68d2      	ldr	r2, [r2, #12]
 8010430:	3a01      	subs	r2, #1
 8010432:	0311      	lsls	r1, r2, #12
 8010434:	68ba      	ldr	r2, [r7, #8]
 8010436:	6952      	ldr	r2, [r2, #20]
 8010438:	3a01      	subs	r2, #1
 801043a:	0512      	lsls	r2, r2, #20
 801043c:	430a      	orrs	r2, r1
 801043e:	431a      	orrs	r2, r3
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	1e59      	subs	r1, r3, #1
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	3b01      	subs	r3, #1
 8010458:	011b      	lsls	r3, r3, #4
 801045a:	4319      	orrs	r1, r3
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	3b01      	subs	r3, #1
 8010462:	021b      	lsls	r3, r3, #8
 8010464:	4319      	orrs	r1, r3
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	3b01      	subs	r3, #1
 801046c:	041b      	lsls	r3, r3, #16
 801046e:	4319      	orrs	r1, r3
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	699b      	ldr	r3, [r3, #24]
 8010474:	3b01      	subs	r3, #1
 8010476:	061b      	lsls	r3, r3, #24
 8010478:	430b      	orrs	r3, r1
 801047a:	431a      	orrs	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	3714      	adds	r7, #20
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	ff0f0fff 	.word	0xff0f0fff

08010494 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010494:	b084      	sub	sp, #16
 8010496:	b480      	push	{r7}
 8010498:	b085      	sub	sp, #20
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
 801049e:	f107 001c 	add.w	r0, r7, #28
 80104a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80104aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80104ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80104ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80104b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80104b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80104b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80104b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80104ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	4313      	orrs	r3, r2
 80104c0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	4b07      	ldr	r3, [pc, #28]	; (80104e4 <SDMMC_Init+0x50>)
 80104c8:	4013      	ands	r3, r2
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	431a      	orrs	r2, r3
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3714      	adds	r7, #20
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	b004      	add	sp, #16
 80104e0:	4770      	bx	lr
 80104e2:	bf00      	nop
 80104e4:	ffc02c00 	.word	0xffc02c00

080104e8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	370c      	adds	r7, #12
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr

08010502 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010502:	b480      	push	{r7}
 8010504:	b083      	sub	sp, #12
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f043 0203 	orr.w	r2, r3, #3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f003 0303 	and.w	r3, r3, #3
}
 8010534:	4618      	mov	r0, r3
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010540:	b480      	push	{r7}
 8010542:	b085      	sub	sp, #20
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801054a:	2300      	movs	r3, #0
 801054c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801055e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010564:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801056a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	4313      	orrs	r3, r2
 8010570:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	68da      	ldr	r2, [r3, #12]
 8010576:	4b06      	ldr	r3, [pc, #24]	; (8010590 <SDMMC_SendCommand+0x50>)
 8010578:	4013      	ands	r3, r2
 801057a:	68fa      	ldr	r2, [r7, #12]
 801057c:	431a      	orrs	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010582:	2300      	movs	r3, #0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3714      	adds	r7, #20
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr
 8010590:	fffee0c0 	.word	0xfffee0c0

08010594 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	691b      	ldr	r3, [r3, #16]
 80105a0:	b2db      	uxtb	r3, r3
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	370c      	adds	r7, #12
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr

080105ae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80105ae:	b480      	push	{r7}
 80105b0:	b085      	sub	sp, #20
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
 80105b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	3314      	adds	r3, #20
 80105bc:	461a      	mov	r2, r3
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	4413      	add	r3, r2
 80105c2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3714      	adds	r7, #20
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105de:	2300      	movs	r3, #0
 80105e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	685a      	ldr	r2, [r3, #4]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80105fa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010600:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010606:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	4313      	orrs	r3, r2
 801060c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010612:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	431a      	orrs	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801061e:	2300      	movs	r3, #0

}
 8010620:	4618      	mov	r0, r3
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b088      	sub	sp, #32
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801063a:	2310      	movs	r3, #16
 801063c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801063e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010644:	2300      	movs	r3, #0
 8010646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801064c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801064e:	f107 0308 	add.w	r3, r7, #8
 8010652:	4619      	mov	r1, r3
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7ff ff73 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801065a:	f241 3288 	movw	r2, #5000	; 0x1388
 801065e:	2110      	movs	r1, #16
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f000 f9e3 	bl	8010a2c <SDMMC_GetCmdResp1>
 8010666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010668:	69fb      	ldr	r3, [r7, #28]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3720      	adds	r7, #32
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b08a      	sub	sp, #40	; 0x28
 8010676:	af00      	add	r7, sp, #0
 8010678:	60f8      	str	r0, [r7, #12]
 801067a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010682:	2307      	movs	r3, #7
 8010684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010686:	f44f 7380 	mov.w	r3, #256	; 0x100
 801068a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801068c:	2300      	movs	r3, #0
 801068e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010694:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010696:	f107 0310 	add.w	r3, r7, #16
 801069a:	4619      	mov	r1, r3
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f7ff ff4f 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80106a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80106a6:	2107      	movs	r1, #7
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f000 f9bf 	bl	8010a2c <SDMMC_GetCmdResp1>
 80106ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3728      	adds	r7, #40	; 0x28
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}

080106ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80106ba:	b580      	push	{r7, lr}
 80106bc:	b088      	sub	sp, #32
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80106c2:	2300      	movs	r3, #0
 80106c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80106c6:	2300      	movs	r3, #0
 80106c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80106ca:	2300      	movs	r3, #0
 80106cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106ce:	2300      	movs	r3, #0
 80106d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106d8:	f107 0308 	add.w	r3, r7, #8
 80106dc:	4619      	mov	r1, r3
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f7ff ff2e 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f000 f977 	bl	80109d8 <SDMMC_GetCmdError>
 80106ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106ec:	69fb      	ldr	r3, [r7, #28]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3720      	adds	r7, #32
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b088      	sub	sp, #32
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80106fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010704:	2308      	movs	r3, #8
 8010706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010708:	f44f 7380 	mov.w	r3, #256	; 0x100
 801070c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801070e:	2300      	movs	r3, #0
 8010710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010716:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010718:	f107 0308 	add.w	r3, r7, #8
 801071c:	4619      	mov	r1, r3
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f7ff ff0e 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 fb6b 	bl	8010e00 <SDMMC_GetCmdResp7>
 801072a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801072c:	69fb      	ldr	r3, [r7, #28]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3720      	adds	r7, #32
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b088      	sub	sp, #32
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010744:	2337      	movs	r3, #55	; 0x37
 8010746:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010748:	f44f 7380 	mov.w	r3, #256	; 0x100
 801074c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801074e:	2300      	movs	r3, #0
 8010750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010758:	f107 0308 	add.w	r3, r7, #8
 801075c:	4619      	mov	r1, r3
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7ff feee 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010764:	f241 3288 	movw	r2, #5000	; 0x1388
 8010768:	2137      	movs	r1, #55	; 0x37
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 f95e 	bl	8010a2c <SDMMC_GetCmdResp1>
 8010770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010772:	69fb      	ldr	r3, [r7, #28]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3720      	adds	r7, #32
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b088      	sub	sp, #32
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801078a:	2329      	movs	r3, #41	; 0x29
 801078c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801078e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010794:	2300      	movs	r3, #0
 8010796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801079c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801079e:	f107 0308 	add.w	r3, r7, #8
 80107a2:	4619      	mov	r1, r3
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7ff fecb 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 fa76 	bl	8010c9c <SDMMC_GetCmdResp3>
 80107b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107b2:	69fb      	ldr	r3, [r7, #28]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3720      	adds	r7, #32
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b088      	sub	sp, #32
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80107ca:	2306      	movs	r3, #6
 80107cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107d4:	2300      	movs	r3, #0
 80107d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107de:	f107 0308 	add.w	r3, r7, #8
 80107e2:	4619      	mov	r1, r3
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f7ff feab 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80107ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80107ee:	2106      	movs	r1, #6
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 f91b 	bl	8010a2c <SDMMC_GetCmdResp1>
 80107f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107f8:	69fb      	ldr	r3, [r7, #28]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3720      	adds	r7, #32
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b088      	sub	sp, #32
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801080a:	2300      	movs	r3, #0
 801080c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801080e:	2333      	movs	r3, #51	; 0x33
 8010810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010818:	2300      	movs	r3, #0
 801081a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010820:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010822:	f107 0308 	add.w	r3, r7, #8
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7ff fe89 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801082e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010832:	2133      	movs	r1, #51	; 0x33
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f000 f8f9 	bl	8010a2c <SDMMC_GetCmdResp1>
 801083a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801083c:	69fb      	ldr	r3, [r7, #28]
}
 801083e:	4618      	mov	r0, r3
 8010840:	3720      	adds	r7, #32
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}

08010846 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010846:	b580      	push	{r7, lr}
 8010848:	b088      	sub	sp, #32
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801084e:	2300      	movs	r3, #0
 8010850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010852:	2302      	movs	r3, #2
 8010854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010856:	f44f 7340 	mov.w	r3, #768	; 0x300
 801085a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801085c:	2300      	movs	r3, #0
 801085e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010866:	f107 0308 	add.w	r3, r7, #8
 801086a:	4619      	mov	r1, r3
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff fe67 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 f9ca 	bl	8010c0c <SDMMC_GetCmdResp2>
 8010878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801087a:	69fb      	ldr	r3, [r7, #28]
}
 801087c:	4618      	mov	r0, r3
 801087e:	3720      	adds	r7, #32
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b088      	sub	sp, #32
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010892:	2309      	movs	r3, #9
 8010894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010896:	f44f 7340 	mov.w	r3, #768	; 0x300
 801089a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801089c:	2300      	movs	r3, #0
 801089e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108a6:	f107 0308 	add.w	r3, r7, #8
 80108aa:	4619      	mov	r1, r3
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7ff fe47 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 f9aa 	bl	8010c0c <SDMMC_GetCmdResp2>
 80108b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108ba:	69fb      	ldr	r3, [r7, #28]
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3720      	adds	r7, #32
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b088      	sub	sp, #32
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80108ce:	2300      	movs	r3, #0
 80108d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80108d2:	2303      	movs	r3, #3
 80108d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108dc:	2300      	movs	r3, #0
 80108de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108e6:	f107 0308 	add.w	r3, r7, #8
 80108ea:	4619      	mov	r1, r3
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7ff fe27 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80108f2:	683a      	ldr	r2, [r7, #0]
 80108f4:	2103      	movs	r1, #3
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fa0c 	bl	8010d14 <SDMMC_GetCmdResp6>
 80108fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108fe:	69fb      	ldr	r3, [r7, #28]
}
 8010900:	4618      	mov	r0, r3
 8010902:	3720      	adds	r7, #32
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b088      	sub	sp, #32
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010916:	230d      	movs	r3, #13
 8010918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801091a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801091e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010920:	2300      	movs	r3, #0
 8010922:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010928:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801092a:	f107 0308 	add.w	r3, r7, #8
 801092e:	4619      	mov	r1, r3
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff fe05 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010936:	f241 3288 	movw	r2, #5000	; 0x1388
 801093a:	210d      	movs	r1, #13
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f000 f875 	bl	8010a2c <SDMMC_GetCmdResp1>
 8010942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010944:	69fb      	ldr	r3, [r7, #28]
}
 8010946:	4618      	mov	r0, r3
 8010948:	3720      	adds	r7, #32
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}

0801094e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801094e:	b580      	push	{r7, lr}
 8010950:	b088      	sub	sp, #32
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010956:	2300      	movs	r3, #0
 8010958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801095a:	230d      	movs	r3, #13
 801095c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801095e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010964:	2300      	movs	r3, #0
 8010966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801096c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801096e:	f107 0308 	add.w	r3, r7, #8
 8010972:	4619      	mov	r1, r3
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f7ff fde3 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801097a:	f241 3288 	movw	r2, #5000	; 0x1388
 801097e:	210d      	movs	r1, #13
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f853 	bl	8010a2c <SDMMC_GetCmdResp1>
 8010986:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010988:	69fb      	ldr	r3, [r7, #28]
}
 801098a:	4618      	mov	r0, r3
 801098c:	3720      	adds	r7, #32
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}

08010992 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8010992:	b580      	push	{r7, lr}
 8010994:	b088      	sub	sp, #32
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 801099a:	2300      	movs	r3, #0
 801099c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 801099e:	230b      	movs	r3, #11
 80109a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109a8:	2300      	movs	r3, #0
 80109aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109b2:	f107 0308 	add.w	r3, r7, #8
 80109b6:	4619      	mov	r1, r3
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7ff fdc1 	bl	8010540 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80109be:	f241 3288 	movw	r2, #5000	; 0x1388
 80109c2:	210b      	movs	r1, #11
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 f831 	bl	8010a2c <SDMMC_GetCmdResp1>
 80109ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109cc:	69fb      	ldr	r3, [r7, #28]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3720      	adds	r7, #32
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
	...

080109d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80109d8:	b490      	push	{r4, r7}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109e0:	4b0f      	ldr	r3, [pc, #60]	; (8010a20 <SDMMC_GetCmdError+0x48>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a0f      	ldr	r2, [pc, #60]	; (8010a24 <SDMMC_GetCmdError+0x4c>)
 80109e6:	fba2 2303 	umull	r2, r3, r2, r3
 80109ea:	0a5b      	lsrs	r3, r3, #9
 80109ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80109f0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80109f4:	4623      	mov	r3, r4
 80109f6:	1e5c      	subs	r4, r3, #1
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d102      	bne.n	8010a02 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a00:	e009      	b.n	8010a16 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d0f2      	beq.n	80109f4 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4a05      	ldr	r2, [pc, #20]	; (8010a28 <SDMMC_GetCmdError+0x50>)
 8010a12:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010a14:	2300      	movs	r3, #0
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3708      	adds	r7, #8
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bc90      	pop	{r4, r7}
 8010a1e:	4770      	bx	lr
 8010a20:	24000000 	.word	0x24000000
 8010a24:	10624dd3 	.word	0x10624dd3
 8010a28:	002000c5 	.word	0x002000c5

08010a2c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010a2c:	b590      	push	{r4, r7, lr}
 8010a2e:	b087      	sub	sp, #28
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	460b      	mov	r3, r1
 8010a36:	607a      	str	r2, [r7, #4]
 8010a38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010a3a:	4b6f      	ldr	r3, [pc, #444]	; (8010bf8 <SDMMC_GetCmdResp1+0x1cc>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a6f      	ldr	r2, [pc, #444]	; (8010bfc <SDMMC_GetCmdResp1+0x1d0>)
 8010a40:	fba2 2303 	umull	r2, r3, r2, r3
 8010a44:	0a5b      	lsrs	r3, r3, #9
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010a4c:	4623      	mov	r3, r4
 8010a4e:	1e5c      	subs	r4, r3, #1
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d102      	bne.n	8010a5a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a58:	e0c9      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a5e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010a60:	697a      	ldr	r2, [r7, #20]
 8010a62:	4b67      	ldr	r3, [pc, #412]	; (8010c00 <SDMMC_GetCmdResp1+0x1d4>)
 8010a64:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d0f0      	beq.n	8010a4c <SDMMC_GetCmdResp1+0x20>
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1eb      	bne.n	8010a4c <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d004      	beq.n	8010a8a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2204      	movs	r2, #4
 8010a84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a86:	2304      	movs	r3, #4
 8010a88:	e0b1      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a8e:	f003 0301 	and.w	r3, r3, #1
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d004      	beq.n	8010aa0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2201      	movs	r2, #1
 8010a9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e0a6      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	4a58      	ldr	r2, [pc, #352]	; (8010c04 <SDMMC_GetCmdResp1+0x1d8>)
 8010aa4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f7ff fd74 	bl	8010594 <SDMMC_GetCommandResponse>
 8010aac:	4603      	mov	r3, r0
 8010aae:	461a      	mov	r2, r3
 8010ab0:	7afb      	ldrb	r3, [r7, #11]
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d001      	beq.n	8010aba <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e099      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010aba:	2100      	movs	r1, #0
 8010abc:	68f8      	ldr	r0, [r7, #12]
 8010abe:	f7ff fd76 	bl	80105ae <SDMMC_GetResponse>
 8010ac2:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010ac4:	693a      	ldr	r2, [r7, #16]
 8010ac6:	4b50      	ldr	r3, [pc, #320]	; (8010c08 <SDMMC_GetCmdResp1+0x1dc>)
 8010ac8:	4013      	ands	r3, r2
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d101      	bne.n	8010ad2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	e08d      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	da02      	bge.n	8010ade <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010adc:	e087      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d001      	beq.n	8010aec <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010ae8:	2340      	movs	r3, #64	; 0x40
 8010aea:	e080      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d001      	beq.n	8010afa <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010af6:	2380      	movs	r3, #128	; 0x80
 8010af8:	e079      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d002      	beq.n	8010b0a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b08:	e071      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d002      	beq.n	8010b1a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b18:	e069      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d002      	beq.n	8010b2a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b28:	e061      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d002      	beq.n	8010b3a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b38:	e059      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d002      	beq.n	8010b4a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b48:	e051      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d002      	beq.n	8010b5a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b58:	e049      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010b64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b68:	e041      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d002      	beq.n	8010b7a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b78:	e039      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010b88:	e031      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010b94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010b98:	e029      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d002      	beq.n	8010baa <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010ba4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010ba8:	e021      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d002      	beq.n	8010bba <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010bb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010bb8:	e019      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d002      	beq.n	8010bca <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010bc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010bc8:	e011      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d002      	beq.n	8010bda <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010bd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010bd8:	e009      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	f003 0308 	and.w	r3, r3, #8
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d002      	beq.n	8010bea <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010be4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010be8:	e001      	b.n	8010bee <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	371c      	adds	r7, #28
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd90      	pop	{r4, r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	24000000 	.word	0x24000000
 8010bfc:	10624dd3 	.word	0x10624dd3
 8010c00:	00200045 	.word	0x00200045
 8010c04:	002000c5 	.word	0x002000c5
 8010c08:	fdffe008 	.word	0xfdffe008

08010c0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010c0c:	b490      	push	{r4, r7}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c14:	4b1e      	ldr	r3, [pc, #120]	; (8010c90 <SDMMC_GetCmdResp2+0x84>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	4a1e      	ldr	r2, [pc, #120]	; (8010c94 <SDMMC_GetCmdResp2+0x88>)
 8010c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8010c1e:	0a5b      	lsrs	r3, r3, #9
 8010c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c24:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010c28:	4623      	mov	r3, r4
 8010c2a:	1e5c      	subs	r4, r3, #1
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d102      	bne.n	8010c36 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c34:	e026      	b.n	8010c84 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d0f0      	beq.n	8010c28 <SDMMC_GetCmdResp2+0x1c>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d1eb      	bne.n	8010c28 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c54:	f003 0304 	and.w	r3, r3, #4
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d004      	beq.n	8010c66 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2204      	movs	r2, #4
 8010c60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c62:	2304      	movs	r3, #4
 8010c64:	e00e      	b.n	8010c84 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c6a:	f003 0301 	and.w	r3, r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d004      	beq.n	8010c7c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2201      	movs	r2, #1
 8010c76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c78:	2301      	movs	r3, #1
 8010c7a:	e003      	b.n	8010c84 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	4a06      	ldr	r2, [pc, #24]	; (8010c98 <SDMMC_GetCmdResp2+0x8c>)
 8010c80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3710      	adds	r7, #16
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bc90      	pop	{r4, r7}
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	24000000 	.word	0x24000000
 8010c94:	10624dd3 	.word	0x10624dd3
 8010c98:	002000c5 	.word	0x002000c5

08010c9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010c9c:	b490      	push	{r4, r7}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ca4:	4b18      	ldr	r3, [pc, #96]	; (8010d08 <SDMMC_GetCmdResp3+0x6c>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a18      	ldr	r2, [pc, #96]	; (8010d0c <SDMMC_GetCmdResp3+0x70>)
 8010caa:	fba2 2303 	umull	r2, r3, r2, r3
 8010cae:	0a5b      	lsrs	r3, r3, #9
 8010cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cb4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010cb8:	4623      	mov	r3, r4
 8010cba:	1e5c      	subs	r4, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d102      	bne.n	8010cc6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cc4:	e01b      	b.n	8010cfe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d0f0      	beq.n	8010cb8 <SDMMC_GetCmdResp3+0x1c>
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1eb      	bne.n	8010cb8 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce4:	f003 0304 	and.w	r3, r3, #4
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d004      	beq.n	8010cf6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2204      	movs	r2, #4
 8010cf0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010cf2:	2304      	movs	r3, #4
 8010cf4:	e003      	b.n	8010cfe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4a05      	ldr	r2, [pc, #20]	; (8010d10 <SDMMC_GetCmdResp3+0x74>)
 8010cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010cfc:	2300      	movs	r3, #0
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3710      	adds	r7, #16
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bc90      	pop	{r4, r7}
 8010d06:	4770      	bx	lr
 8010d08:	24000000 	.word	0x24000000
 8010d0c:	10624dd3 	.word	0x10624dd3
 8010d10:	002000c5 	.word	0x002000c5

08010d14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010d14:	b590      	push	{r4, r7, lr}
 8010d16:	b087      	sub	sp, #28
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	607a      	str	r2, [r7, #4]
 8010d20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d22:	4b34      	ldr	r3, [pc, #208]	; (8010df4 <SDMMC_GetCmdResp6+0xe0>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a34      	ldr	r2, [pc, #208]	; (8010df8 <SDMMC_GetCmdResp6+0xe4>)
 8010d28:	fba2 2303 	umull	r2, r3, r2, r3
 8010d2c:	0a5b      	lsrs	r3, r3, #9
 8010d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d32:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010d36:	4623      	mov	r3, r4
 8010d38:	1e5c      	subs	r4, r3, #1
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d102      	bne.n	8010d44 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d42:	e052      	b.n	8010dea <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d48:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d0f0      	beq.n	8010d36 <SDMMC_GetCmdResp6+0x22>
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1eb      	bne.n	8010d36 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d62:	f003 0304 	and.w	r3, r3, #4
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d004      	beq.n	8010d74 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	2204      	movs	r2, #4
 8010d6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d70:	2304      	movs	r3, #4
 8010d72:	e03a      	b.n	8010dea <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d78:	f003 0301 	and.w	r3, r3, #1
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d004      	beq.n	8010d8a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2201      	movs	r2, #1
 8010d84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d86:	2301      	movs	r3, #1
 8010d88:	e02f      	b.n	8010dea <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f7ff fc02 	bl	8010594 <SDMMC_GetCommandResponse>
 8010d90:	4603      	mov	r3, r0
 8010d92:	461a      	mov	r2, r3
 8010d94:	7afb      	ldrb	r3, [r7, #11]
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d001      	beq.n	8010d9e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e025      	b.n	8010dea <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	4a16      	ldr	r2, [pc, #88]	; (8010dfc <SDMMC_GetCmdResp6+0xe8>)
 8010da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010da4:	2100      	movs	r1, #0
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f7ff fc01 	bl	80105ae <SDMMC_GetResponse>
 8010dac:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d106      	bne.n	8010dc6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	0c1b      	lsrs	r3, r3, #16
 8010dbc:	b29a      	uxth	r2, r3
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	e011      	b.n	8010dea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010dd4:	e009      	b.n	8010dea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d002      	beq.n	8010de6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010de4:	e001      	b.n	8010dea <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	371c      	adds	r7, #28
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd90      	pop	{r4, r7, pc}
 8010df2:	bf00      	nop
 8010df4:	24000000 	.word	0x24000000
 8010df8:	10624dd3 	.word	0x10624dd3
 8010dfc:	002000c5 	.word	0x002000c5

08010e00 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010e00:	b490      	push	{r4, r7}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e08:	4b21      	ldr	r3, [pc, #132]	; (8010e90 <SDMMC_GetCmdResp7+0x90>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a21      	ldr	r2, [pc, #132]	; (8010e94 <SDMMC_GetCmdResp7+0x94>)
 8010e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e12:	0a5b      	lsrs	r3, r3, #9
 8010e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e18:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010e1c:	4623      	mov	r3, r4
 8010e1e:	1e5c      	subs	r4, r3, #1
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d102      	bne.n	8010e2a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e28:	e02c      	b.n	8010e84 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e2e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d0f0      	beq.n	8010e1c <SDMMC_GetCmdResp7+0x1c>
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d1eb      	bne.n	8010e1c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e48:	f003 0304 	and.w	r3, r3, #4
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d004      	beq.n	8010e5a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2204      	movs	r2, #4
 8010e54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e56:	2304      	movs	r3, #4
 8010e58:	e014      	b.n	8010e84 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e5e:	f003 0301 	and.w	r3, r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d004      	beq.n	8010e70 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2201      	movs	r2, #1
 8010e6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	e009      	b.n	8010e84 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2240      	movs	r2, #64	; 0x40
 8010e80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010e82:	2300      	movs	r3, #0

}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3710      	adds	r7, #16
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bc90      	pop	{r4, r7}
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	24000000 	.word	0x24000000
 8010e94:	10624dd3 	.word	0x10624dd3

08010e98 <__errno>:
 8010e98:	4b01      	ldr	r3, [pc, #4]	; (8010ea0 <__errno+0x8>)
 8010e9a:	6818      	ldr	r0, [r3, #0]
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	24000010 	.word	0x24000010

08010ea4 <__libc_init_array>:
 8010ea4:	b570      	push	{r4, r5, r6, lr}
 8010ea6:	4e0d      	ldr	r6, [pc, #52]	; (8010edc <__libc_init_array+0x38>)
 8010ea8:	4c0d      	ldr	r4, [pc, #52]	; (8010ee0 <__libc_init_array+0x3c>)
 8010eaa:	1ba4      	subs	r4, r4, r6
 8010eac:	10a4      	asrs	r4, r4, #2
 8010eae:	2500      	movs	r5, #0
 8010eb0:	42a5      	cmp	r5, r4
 8010eb2:	d109      	bne.n	8010ec8 <__libc_init_array+0x24>
 8010eb4:	4e0b      	ldr	r6, [pc, #44]	; (8010ee4 <__libc_init_array+0x40>)
 8010eb6:	4c0c      	ldr	r4, [pc, #48]	; (8010ee8 <__libc_init_array+0x44>)
 8010eb8:	f000 f8ec 	bl	8011094 <_init>
 8010ebc:	1ba4      	subs	r4, r4, r6
 8010ebe:	10a4      	asrs	r4, r4, #2
 8010ec0:	2500      	movs	r5, #0
 8010ec2:	42a5      	cmp	r5, r4
 8010ec4:	d105      	bne.n	8010ed2 <__libc_init_array+0x2e>
 8010ec6:	bd70      	pop	{r4, r5, r6, pc}
 8010ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ecc:	4798      	blx	r3
 8010ece:	3501      	adds	r5, #1
 8010ed0:	e7ee      	b.n	8010eb0 <__libc_init_array+0xc>
 8010ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ed6:	4798      	blx	r3
 8010ed8:	3501      	adds	r5, #1
 8010eda:	e7f2      	b.n	8010ec2 <__libc_init_array+0x1e>
 8010edc:	080110dc 	.word	0x080110dc
 8010ee0:	080110dc 	.word	0x080110dc
 8010ee4:	080110dc 	.word	0x080110dc
 8010ee8:	080110e0 	.word	0x080110e0

08010eec <memset>:
 8010eec:	4402      	add	r2, r0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d100      	bne.n	8010ef6 <memset+0xa>
 8010ef4:	4770      	bx	lr
 8010ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8010efa:	e7f9      	b.n	8010ef0 <memset+0x4>

08010efc <srand>:
 8010efc:	b538      	push	{r3, r4, r5, lr}
 8010efe:	4b0d      	ldr	r3, [pc, #52]	; (8010f34 <srand+0x38>)
 8010f00:	681c      	ldr	r4, [r3, #0]
 8010f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f04:	4605      	mov	r5, r0
 8010f06:	b97b      	cbnz	r3, 8010f28 <srand+0x2c>
 8010f08:	2018      	movs	r0, #24
 8010f0a:	f000 f84f 	bl	8010fac <malloc>
 8010f0e:	4a0a      	ldr	r2, [pc, #40]	; (8010f38 <srand+0x3c>)
 8010f10:	4b0a      	ldr	r3, [pc, #40]	; (8010f3c <srand+0x40>)
 8010f12:	63a0      	str	r0, [r4, #56]	; 0x38
 8010f14:	e9c0 2300 	strd	r2, r3, [r0]
 8010f18:	4b09      	ldr	r3, [pc, #36]	; (8010f40 <srand+0x44>)
 8010f1a:	6083      	str	r3, [r0, #8]
 8010f1c:	230b      	movs	r3, #11
 8010f1e:	8183      	strh	r3, [r0, #12]
 8010f20:	2201      	movs	r2, #1
 8010f22:	2300      	movs	r3, #0
 8010f24:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	611d      	str	r5, [r3, #16]
 8010f2e:	615a      	str	r2, [r3, #20]
 8010f30:	bd38      	pop	{r3, r4, r5, pc}
 8010f32:	bf00      	nop
 8010f34:	24000010 	.word	0x24000010
 8010f38:	abcd330e 	.word	0xabcd330e
 8010f3c:	e66d1234 	.word	0xe66d1234
 8010f40:	0005deec 	.word	0x0005deec

08010f44 <rand>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4b13      	ldr	r3, [pc, #76]	; (8010f94 <rand+0x50>)
 8010f48:	681c      	ldr	r4, [r3, #0]
 8010f4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f4c:	b97b      	cbnz	r3, 8010f6e <rand+0x2a>
 8010f4e:	2018      	movs	r0, #24
 8010f50:	f000 f82c 	bl	8010fac <malloc>
 8010f54:	4a10      	ldr	r2, [pc, #64]	; (8010f98 <rand+0x54>)
 8010f56:	4b11      	ldr	r3, [pc, #68]	; (8010f9c <rand+0x58>)
 8010f58:	63a0      	str	r0, [r4, #56]	; 0x38
 8010f5a:	e9c0 2300 	strd	r2, r3, [r0]
 8010f5e:	4b10      	ldr	r3, [pc, #64]	; (8010fa0 <rand+0x5c>)
 8010f60:	6083      	str	r3, [r0, #8]
 8010f62:	230b      	movs	r3, #11
 8010f64:	8183      	strh	r3, [r0, #12]
 8010f66:	2201      	movs	r2, #1
 8010f68:	2300      	movs	r3, #0
 8010f6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010f6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010f70:	480c      	ldr	r0, [pc, #48]	; (8010fa4 <rand+0x60>)
 8010f72:	690a      	ldr	r2, [r1, #16]
 8010f74:	694b      	ldr	r3, [r1, #20]
 8010f76:	4c0c      	ldr	r4, [pc, #48]	; (8010fa8 <rand+0x64>)
 8010f78:	4350      	muls	r0, r2
 8010f7a:	fb04 0003 	mla	r0, r4, r3, r0
 8010f7e:	fba2 2304 	umull	r2, r3, r2, r4
 8010f82:	4403      	add	r3, r0
 8010f84:	1c54      	adds	r4, r2, #1
 8010f86:	f143 0500 	adc.w	r5, r3, #0
 8010f8a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8010f8e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8010f92:	bd38      	pop	{r3, r4, r5, pc}
 8010f94:	24000010 	.word	0x24000010
 8010f98:	abcd330e 	.word	0xabcd330e
 8010f9c:	e66d1234 	.word	0xe66d1234
 8010fa0:	0005deec 	.word	0x0005deec
 8010fa4:	5851f42d 	.word	0x5851f42d
 8010fa8:	4c957f2d 	.word	0x4c957f2d

08010fac <malloc>:
 8010fac:	4b02      	ldr	r3, [pc, #8]	; (8010fb8 <malloc+0xc>)
 8010fae:	4601      	mov	r1, r0
 8010fb0:	6818      	ldr	r0, [r3, #0]
 8010fb2:	f000 b803 	b.w	8010fbc <_malloc_r>
 8010fb6:	bf00      	nop
 8010fb8:	24000010 	.word	0x24000010

08010fbc <_malloc_r>:
 8010fbc:	b570      	push	{r4, r5, r6, lr}
 8010fbe:	1ccd      	adds	r5, r1, #3
 8010fc0:	f025 0503 	bic.w	r5, r5, #3
 8010fc4:	3508      	adds	r5, #8
 8010fc6:	2d0c      	cmp	r5, #12
 8010fc8:	bf38      	it	cc
 8010fca:	250c      	movcc	r5, #12
 8010fcc:	2d00      	cmp	r5, #0
 8010fce:	4606      	mov	r6, r0
 8010fd0:	db01      	blt.n	8010fd6 <_malloc_r+0x1a>
 8010fd2:	42a9      	cmp	r1, r5
 8010fd4:	d903      	bls.n	8010fde <_malloc_r+0x22>
 8010fd6:	230c      	movs	r3, #12
 8010fd8:	6033      	str	r3, [r6, #0]
 8010fda:	2000      	movs	r0, #0
 8010fdc:	bd70      	pop	{r4, r5, r6, pc}
 8010fde:	f000 f857 	bl	8011090 <__malloc_lock>
 8010fe2:	4a21      	ldr	r2, [pc, #132]	; (8011068 <_malloc_r+0xac>)
 8010fe4:	6814      	ldr	r4, [r2, #0]
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	b991      	cbnz	r1, 8011010 <_malloc_r+0x54>
 8010fea:	4c20      	ldr	r4, [pc, #128]	; (801106c <_malloc_r+0xb0>)
 8010fec:	6823      	ldr	r3, [r4, #0]
 8010fee:	b91b      	cbnz	r3, 8010ff8 <_malloc_r+0x3c>
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	f000 f83d 	bl	8011070 <_sbrk_r>
 8010ff6:	6020      	str	r0, [r4, #0]
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	f000 f838 	bl	8011070 <_sbrk_r>
 8011000:	1c43      	adds	r3, r0, #1
 8011002:	d124      	bne.n	801104e <_malloc_r+0x92>
 8011004:	230c      	movs	r3, #12
 8011006:	6033      	str	r3, [r6, #0]
 8011008:	4630      	mov	r0, r6
 801100a:	f000 f842 	bl	8011092 <__malloc_unlock>
 801100e:	e7e4      	b.n	8010fda <_malloc_r+0x1e>
 8011010:	680b      	ldr	r3, [r1, #0]
 8011012:	1b5b      	subs	r3, r3, r5
 8011014:	d418      	bmi.n	8011048 <_malloc_r+0x8c>
 8011016:	2b0b      	cmp	r3, #11
 8011018:	d90f      	bls.n	801103a <_malloc_r+0x7e>
 801101a:	600b      	str	r3, [r1, #0]
 801101c:	50cd      	str	r5, [r1, r3]
 801101e:	18cc      	adds	r4, r1, r3
 8011020:	4630      	mov	r0, r6
 8011022:	f000 f836 	bl	8011092 <__malloc_unlock>
 8011026:	f104 000b 	add.w	r0, r4, #11
 801102a:	1d23      	adds	r3, r4, #4
 801102c:	f020 0007 	bic.w	r0, r0, #7
 8011030:	1ac3      	subs	r3, r0, r3
 8011032:	d0d3      	beq.n	8010fdc <_malloc_r+0x20>
 8011034:	425a      	negs	r2, r3
 8011036:	50e2      	str	r2, [r4, r3]
 8011038:	e7d0      	b.n	8010fdc <_malloc_r+0x20>
 801103a:	428c      	cmp	r4, r1
 801103c:	684b      	ldr	r3, [r1, #4]
 801103e:	bf16      	itet	ne
 8011040:	6063      	strne	r3, [r4, #4]
 8011042:	6013      	streq	r3, [r2, #0]
 8011044:	460c      	movne	r4, r1
 8011046:	e7eb      	b.n	8011020 <_malloc_r+0x64>
 8011048:	460c      	mov	r4, r1
 801104a:	6849      	ldr	r1, [r1, #4]
 801104c:	e7cc      	b.n	8010fe8 <_malloc_r+0x2c>
 801104e:	1cc4      	adds	r4, r0, #3
 8011050:	f024 0403 	bic.w	r4, r4, #3
 8011054:	42a0      	cmp	r0, r4
 8011056:	d005      	beq.n	8011064 <_malloc_r+0xa8>
 8011058:	1a21      	subs	r1, r4, r0
 801105a:	4630      	mov	r0, r6
 801105c:	f000 f808 	bl	8011070 <_sbrk_r>
 8011060:	3001      	adds	r0, #1
 8011062:	d0cf      	beq.n	8011004 <_malloc_r+0x48>
 8011064:	6025      	str	r5, [r4, #0]
 8011066:	e7db      	b.n	8011020 <_malloc_r+0x64>
 8011068:	24000164 	.word	0x24000164
 801106c:	24000168 	.word	0x24000168

08011070 <_sbrk_r>:
 8011070:	b538      	push	{r3, r4, r5, lr}
 8011072:	4c06      	ldr	r4, [pc, #24]	; (801108c <_sbrk_r+0x1c>)
 8011074:	2300      	movs	r3, #0
 8011076:	4605      	mov	r5, r0
 8011078:	4608      	mov	r0, r1
 801107a:	6023      	str	r3, [r4, #0]
 801107c:	f7f1 fada 	bl	8002634 <_sbrk>
 8011080:	1c43      	adds	r3, r0, #1
 8011082:	d102      	bne.n	801108a <_sbrk_r+0x1a>
 8011084:	6823      	ldr	r3, [r4, #0]
 8011086:	b103      	cbz	r3, 801108a <_sbrk_r+0x1a>
 8011088:	602b      	str	r3, [r5, #0]
 801108a:	bd38      	pop	{r3, r4, r5, pc}
 801108c:	24000990 	.word	0x24000990

08011090 <__malloc_lock>:
 8011090:	4770      	bx	lr

08011092 <__malloc_unlock>:
 8011092:	4770      	bx	lr

08011094 <_init>:
 8011094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011096:	bf00      	nop
 8011098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801109a:	bc08      	pop	{r3}
 801109c:	469e      	mov	lr, r3
 801109e:	4770      	bx	lr

080110a0 <_fini>:
 80110a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110a2:	bf00      	nop
 80110a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110a6:	bc08      	pop	{r3}
 80110a8:	469e      	mov	lr, r3
 80110aa:	4770      	bx	lr
